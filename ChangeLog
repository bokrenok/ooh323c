Release 0.9.1
* Added a configuration parameter for bearer capability (bearercap).
* Added capability to read a configuration file in the simple test program.
* Fixed a basic socket error that prevented test programs from running.
* Simplified build procedures for Windows to use Visual Studio nmake.
* Added open source FLOSS exception to GPL.

Release 0.9.0
* Updated specs to H.323 version 6 and regenerated codecs. This also fixed
  a bug in open extension decoding.
* Fixed version number.
* Increased maximum message buffer size to avoid segmentation faults.
* Fixed a bug preventing the stack from being restarted.
* Call monitors can now be stopped even if the stack is not registered with
  the GateKeeper.
* Fixed a bug in large message tracing in which a crash would occur if
  message was too large.
* Fixed a bug in copying remote display name in which it was not properly
  null-terminated.
* Fixed numerous compilation warnings.

Release 0.8.4
1. Updated log information for "H.225 Information" message
   (thanks to Andrew Maksimov)
2. Fixed bug in keepalive Regstration Message(RRQ) for endpoint identifier
   value (thanks to Mike Tubby)
3. Fixed handling of empty call identifier values.  Optional field now
   omitted from encoded messages).
4. Modified generation of conference ID value to create a more unique
   identifier.
5. Fixed multiple problems with Makefile.msvc for building on Windows.
6. Changed default T35 country code and manufacturer code to assigned values.

Release 0.8.3
1. Added MediaWaitForConnect configuration option (Thanks to Tim King,
   for solving PSTN call ring problem)
2. Changed CallingPartyNumber IE to disable the CLI screening. (Thanks to
   Tim King)
3. Added fast start response in ALERTING message for early audio. Solves the
   problem to listening PSTN ring or announcements.

Release 0.8.2
1. Used rand number for conference id, Thanks to Patrick Jordan
   (Fixes mapping all calls from the same origin number to the destination
   of the first call for H323 gatekeeper (Quintum Voicemaster))
2. Fixed bug for codec type comparison, Thanks to Legostayev Denis
3. Fixed "#*," digits bug for dialedDigit & callerID, Thanks to Vlasis
   Hatzistavrou
4. Added ETC for call hold, Thanks to Dan Austin
5. Fixed bug causing core dump for manual ringback in cleared call
6. Added G.728 audio codec negotiation support, Thanks to Aleksandar Sutic

Release 0.8.1
1. Fixed bug causing dialed digits alias being set as a char string.
2. Added close for cmdListener
3. Fixed called party number set.
4. Other minor FreeBSD support updates.

Release 0.8
1. ManualRingback support (Benni A. Aswin)
2. Gateway/Endpoint config
3. Fixed lot of warning messages generated while compiling with -Wall option.
   (Thanks to Ben Greear for this).
4. Removed all mutexes from code and used sockets to communicate with stack
   thread. From threading perspective this means, stack executes in a single
   thread including callbacks. As long as applications have only one thread
   issuing commands to stack thread, they don't have to worry about threading
   and if application has multiple threads issuing stack commands then they
   have to protect those calls using mutexes.
5. Few bug fixes.
        
Release 0.7.3
1. Added H.245 based alphanumeric and signal DTMF support.
2. Added DTMF support using Q.931 based keypad information element.
3. Improved UsersGuide, with example of interaction between stack and
   application program.
4. Few minor bug fixes.
        
Release 0.7.2
1. Interop issues with Xener gateway and couple of Cisco devices solved.
2. Bearer capability IE changed to use PacketMode
3. Support for binding to multiple interfaces.
4. Support for NULL type encoded as zero length element.
5. Support for handling faststart response received in CallProceeding/alerting
   messages.
6. Tracing of CalledPartyNumber, CallingPartyNumber, BearerCapability,
   FastStart elements.
7. Bug causing crash fixed in ooCapability.c when symmetric capability is
   received.
8. Other small bug fixes and performance improvement.


Release 0.7.1
1. Bug fixes and fix for CISCO gateway interop issue.

Release 0.7
1. Added support for G711 alaw, G729, G729a, G723.1, GSM, H.263 codecs
2. Better callback support. Two levels of callbacks, viz., at call level
   (examples onIncomingCall, onCallEstablished, onCallCleared) and at message
   level(examples onReceivedSetup, onBuiltSetup). The call level callbacks
   provide applications high level call events where as message level callbacks
   allow applications to do finer things like additional processing of incoming
   messages or modify outgoing messages before they are sent.
3. Improved sample telephony application.
4. Support for Call Forward using Facility UUIE.
5. Improved documentation.
6. Code improvement and bug fixes.
        
Release 0.6
1. Added support for timers for various messages.
2. Added support for various Reject/Release messages.
3. RAS layer functionality changed to create a more modular gatekeeper client.
4. Code refactoring for better design and performance.
5. Improved capability creation and management code.
6. Added alias addresses to connect/setup/alerting messages.
        
Release 0.5.2
1. Added dtmf rfc2833 support
2. Reduced dynamic encode buffer extension size from 16*1024 to 2*1024, as
   large size causes problems in some embedded systems like uclinux.
3. Added support for logging outgoing messages.
4. Fixed indentation bug in message logging.
5. Added better way to convert internet address to network address.
6. Updated simple.c for ip address problem


Release 0.5.1
1. Callback functions updated.
2. Consolidated Text/Error descriptions in oo.c
3. Improved the capability handling code. Now applications can simply use
   predefined caps such as OO_CAP_ULAW_64k_240 etc, instead of having to
   populate the whole capability structure.
4. Removed the code to load the media library from the main stack library,
   and now it is part of the applications such as "simple", "player" etc. This
   change was made in effort to keep stack totally independent of media.
5. Fixed bugs - Specifically memory bug which causes uncertain behaviour on
   certain embedded systems.


Release 0.5:
1. Added RAS channel support. This release supports
   GatekeeperRequest, RegistrationRequest, AdmissionRequest,
   DisengageRequest and corresponding response messages.
2. Added aliases support and parsing capability. The endpoint
   will now be able to register an e-mail id, h323-id, url,
   and dialedDigits aliases and will be able to call other
   endpoints using these types of aliases with the help of
   gatekeeper.
3. Added capability to configure local call signalling address.
   This was done to avoid problems with logic to retrieve local
   IP address which can fail on some systems, which do not have
   host name setup. This logic is still used as backup, in case
   user does not configure IP.
4. Added auto answer feature.This was done to allow user make a
   decision to answer/reject call.
5. Fixed bugs reported in 0.4 release.

Release 0.4:
1. Added support for FastStart and Tunneling.
2. Added support for external configuration of RTP ip:port. This
   allows application to use any ip:port combination for media channel.
   Thus, now it is possible to terminate signalling at one ip address and
   media at some different ip address. Default uses localip and an RTP port
   from the range specified by the application.
3. Display ie added to outgoing SETUP message.
4. Error handling and logging improved.


Release 0.3.1:
1. Fixes bug reported on source forge as request Id: 1079205
   Also fixes other many unknown bug related with ooh245.c & ooq931.c function calls.

2. Fixes bug reported on source forge as request Id:1078936
   Host name can be longer than 20 length, Increased the capacity upto 100 character

3. Fixed problem with pdf documents


Release 0.3: New Features
1. New Design
   a. Allows handling multiple simultaneous calls
   b. Unique call identifiers for calls
   c. Applications can add capabilities and register control functions
      such as start/stop for managing those media channels. The stack
      just calls start/stop callback functions to start or stop media
      channel.
   d. Applications are much simpler to write as they just have to initialize
      end point with all the capabilities and stack handles all the message
      exchanges, unlike the earlier design where application had to build
      SETUP, CONNECT etc. messages

2. Debugging capabilities
   a. Prints all received messages to log
   b. Prints call-ids to identify which log message is associated with which
      call.

3. Detects remote endpoints abruptly closing TCP connections.

4.Verifies that the Capability specified in the OpenLogicalChannel by remote
  endpoint is actually supported by local endpoint.


  
        
