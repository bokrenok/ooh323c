<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
         <TITLE>Rtmem</TITLE>
         <LINK REL="stylesheet" HREF="http://www.obj-sys.com/stylesheet.css"
          TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
         <CENTER>
                <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
                                SRC="http://www.obj-sys.com/images/Head1.jpg" WIDTH="725" HEIGHT="90"
                                ALT="Objective Systems, Inc."></TD>
                         <TD WIDTH="100%"
                          BACKGROUND="http://www.obj-sys.com/images/Head2.jpg">&nbsp;</TD>
                  </TR>
                </TABLE>
<TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                <TR VALIGN="TOP">
                  <TD VALIGN="top" BACKGROUND="http://www.obj-sys.com/images/LeftBkd.jpg"
                        WIDTH="129">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0"
                          BACKGROUND="http://www.obj-sys.com/images/NetscapeCorrection.gif">
                                <TR VALIGN="TOP">
                                  <TD BGCOLOR="#D9E4F1" VALIGN="top" ROWSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="96" HEIGHT="1">
                                         <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
                                                
                                                <TR>
                                                  <TD></TD>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">
                                                         <A HREF="http://www.obj-sys.com/index.shtml" CLASS="nav">Home</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutasn1.shtml" CLASS="nav">About
                                                         ASN.1</A><BR> <A HREF="http://www.obj-sys.com/products.shtml"
                                                         CLASS="nav">Products</A><BR>
                                                         <A HREF="http://www.obj-sys.com/freesoftware.shtml" CLASS="nav">Free
                                                         Software</A><BR>
                                                         <A HREF="http://www.obj-sys.com/docs/acv55docs.shtml" CLASS="nav">Documents</A>
                                                         <BR> <A HREF="http://www.obj-sys.com/services.shtml"
                                                         CLASS="nav">Services</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resources.shtml" CLASS="nav">Resources</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resellers.shtml" CLASS="nav">Resellers</A><BR>
<!--      <a href="http://www.obj-sys.com/ordering.shtml" class="nav">Ordering</a><br>  -->
                                                         <A HREF="http://www.obj-sys.com/customers.shtml"
                                                          CLASS="nav">Customers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/careers.shtml" CLASS="nav">Careers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutus.shtml" CLASS="nav">About Us</A><BR>
                                                         <A HREF="http://www.obj-sys.com/contactus.shtml" CLASS="nav">Contact Us</A><BR>
                                                         </TD>
                                                </TR>
                                                <TR>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">&nbsp;</TD>
                                                </TR>
                                                <TR>
                                                  <TD> </TD>
                                                  <TD>
                        <!--Google search -->
                                                         <FORM METHOD="GET" ACTION="http://www.google.com/custom">
                                                                
                                                                <P><A HREF="http://www.google.com/search"></A>
                                                                  <IMG SRC="http://www.obj-sys.com/images/google.gif" BORDER="0" ALT="Google"
                                                                        ALIGN="middle"><BR>
                                                                  <INPUT TYPE="text" NAME="q" SIZE="10" MAXLENGTH="255" VALUE=""><BR>
                                                                  <INPUT TYPE="submit" NAME="sa" VALUE="Search">
                                                                  <INPUT TYPE="hidden" NAME="cof"
                                                                        VALUE="AH:center;GL:0;S:http://www.obj-sys.com;AWFID:b38a0de10d0a7b9b;">
                                                                  <INPUT TYPE="hidden" NAME="domains" VALUE="obj-sys.com">
                                                                  <INPUT TYPE="hidden" NAME="sitesearch" VALUE="obj-sys.com"><BR> </P> </FORM>
                        <!--End Google search -->
                                                  </TD>
                                                  <TD><IMG BORDER="0"
                                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="10" HEIGHT="1"></TD>
                                                </TR>
                                                
                                         </TABLE> </TD>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="top"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftTop.jpg"
                                         WIDTH="33" HEIGHT="114"></TD>
                                </TR>
                                <TR>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="bottom"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftC.jpg"
                                         WIDTH="33" HEIGHT="16"></TD>
                                </TR>
                                <TR>
                                  <TD WIDTH="100%" COLSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftD.jpg" WIDTH="129" HEIGHT="37"
                                         ALT="Objective Systems, Inc."><BR><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftBottom.jpg" WIDTH="129"><BR>
                                         <IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftBottombkd.jpg"></TD>
                                </TR>
                         </TABLE> </TD>
                  <TD VALIGN="top" WIDTH="100%">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                                <TR>
                                  <TD WIDTH="100%"
                                        BACKGROUND="http://www.obj-sys.com/images/Top2bkd.jpg"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/Top2.jpg" WIDTH="568" HEIGHT="20"></TD>
                                </TR>
                         </TABLE>
                <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD><IMG BORDER="0" SRC="http://www.obj-sys.com/images/Top3.jpg"
                                WIDTH="58" HEIGHT="34"></TD>
                         <TD ALIGN="center" WIDTH="100%"> </TD>
                  </TR>
                  <TR>
                         <TD VALIGN="top" WIDTH="95%">
<!-- Generated by Doxygen 1.3.6-20040413 -->
<div class="qindex"><a class="qindex" href="index.shtml">Main&nbsp;Page</a> | <a class="qindex" href="modules.shtml">Modules</a> | <a class="qindex" href="classes.shtml">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.shtml">Data&nbsp;Structures</a> | <a class="qindex" href="files.shtml">File&nbsp;List</a> | <a class="qindex" href="functions.shtml">Data&nbsp;Fields</a> | <a class="qindex" href="globals.shtml">Globals</a></div>
<h1>Rtmem<br>
<small>
[<a class="el" href="group__llfuns.shtml">Linked List Utility Functions</a>]</small>
</h1><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga80">memAlloc</a>(pctxt, nbytes)&nbsp;&nbsp;&nbsp;memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate memory.  <a href="#ga80"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga81">memAllocZ</a>(pctxt, nbytes)&nbsp;&nbsp;&nbsp;memHeapAllocZ(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate and zero memory.  <a href="#ga81"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga82">memRealloc</a>(pctxt, mem_p, nbytes)&nbsp;&nbsp;&nbsp;memHeapRealloc(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p, nbytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reallocate memory.  <a href="#ga82"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga83">memFreePtr</a>(pctxt, mem_p)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free memory pointer.  <a href="#ga83"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga84">memFree</a>(pctxt)&nbsp;&nbsp;&nbsp;memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free memory associated with a context.  <a href="#ga84"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga85">memReset</a>(pctxt)&nbsp;&nbsp;&nbsp;memHeapReset(&amp;(pctxt)-&gt;pTypeMemHeap)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reset memory associated with a context.  <a href="#ga85"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga86" doxytag="Rtmem::OSCDECL" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>OSCDECL</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><b>INCRBITIDX</b>(pctxt)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><b>DECODEBIT</b>(pctxt, pvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga89">decodeUnconsInteger</a>(pctxt, pvalue)&nbsp;&nbsp;&nbsp;decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unconstrained integer.  <a href="#ga89"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga90">decodeUnconsUnsigned</a>(pctxt, pvalue)&nbsp;&nbsp;&nbsp;decodeSemiConsUnsigned(pctxt, pvalue, 0U)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unconstrained unsigned integer.  <a href="#ga90"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga91">encodeUnconsInteger</a>(pctxt, value)&nbsp;&nbsp;&nbsp;encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an unconstrained integer.  <a href="#ga91"></a><br><br></td></tr>
<tr><td colspan=2><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga0" doxytag="Rtmem::OSMallocFunc" ></a>
typedef void *OSCDECL *&nbsp;</td><td class="memItemRight" valign=bottom><b>OSMallocFunc</b> (size_t size)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga1" doxytag="Rtmem::OSReallocFunc" ></a>
typedef void *OSCDECL *&nbsp;</td><td class="memItemRight" valign=bottom><b>OSReallocFunc</b> (void *ptr, size_t size)</td></tr>

<tr><td colspan=2><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga2" doxytag="Rtmem::void" ></a>
typedef&nbsp;</td><td class="memItemRight" valign=bottom><b>void</b> (OSCDECL *OSFreeFunc)(void *ptr)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga3" doxytag="Rtmem::memHeapAddRef" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapAddRef</b> (void **ppvMemHeap)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga4" doxytag="Rtmem::memHeapAlloc" ></a>
EXTERN void *&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapAlloc</b> (void **ppvMemHeap, int nbytes)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga5" doxytag="Rtmem::memHeapAllocZ" ></a>
EXTERN void *&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapAllocZ</b> (void **ppvMemHeap, int nbytes)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga6" doxytag="Rtmem::memHeapCheckPtr" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapCheckPtr</b> (void **ppvMemHeap, void *mem_p)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga7" doxytag="Rtmem::memHeapCreate" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapCreate</b> (void **ppvMemHeap)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga8" doxytag="Rtmem::memHeapFreeAll" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapFreeAll</b> (void **ppvMemHeap)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga9" doxytag="Rtmem::memHeapFreePtr" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapFreePtr</b> (void **ppvMemHeap, void *mem_p)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga10" doxytag="Rtmem::memHeapRealloc" ></a>
EXTERN void *&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapRealloc</b> (void **ppvMemHeap, void *mem_p, int nbytes_)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga11" doxytag="Rtmem::memHeapRelease" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapRelease</b> (void **ppvMemHeap)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga12" doxytag="Rtmem::memHeapReset" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapReset</b> (void **ppvMemHeap)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga13" doxytag="Rtmem::memHeapMarkSaved" ></a>
EXTERN void *&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapMarkSaved</b> (void **ppvMemHeap, const void *mem_p, ASN1BOOL saved)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga14" doxytag="Rtmem::memHeapSetProperty" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapSetProperty</b> (void **ppvMemHeap, ASN1UINT propId, void *pProp)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga15">memSetAllocFuncs</a> (OSMallocFunc malloc_func, OSReallocFunc realloc_func, OSFreeFunc free_func)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function sets the pointers to standard allocation functions.  <a href="#ga15"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga16" doxytag="Rtmem::memFreeOpenSeqExt" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memFreeOpenSeqExt</b> (OOCTXT *pctxt, DList *pElemList)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga17" doxytag="Rtmem::memHeapSetFlags" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapSetFlags</b> (OOCTXT *pctxt, ASN1UINT flags)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga18" doxytag="Rtmem::memHeapClearFlags" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>memHeapClearFlags</b> (OOCTXT *pctxt, ASN1UINT flags)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga19">memHeapSetDefBlkSize</a> (OOCTXT *pctxt, ASN1UINT blkSize)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function sets the pointer to standard allocation functions.  <a href="#ga19"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN ASN1UINT&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga20">memHeapGetDefBlkSize</a> (OOCTXT *pctxt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function returns the actual granularity of memory blocks.  <a href="#ga20"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga21">decodeBits</a> (OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT nbits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a series of multiple bits and place the results in an unsigned integer variable.  <a href="#ga21"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga22">decodeBitString</a> (OOCTXT *pctxt, ASN1UINT *numbits_p, ASN1OCTET *buffer, ASN1UINT bufsiz)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 bit string type whose maximum size is is known in advance.  <a href="#ga22"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga23">decodeBMPString</a> (OOCTXT *pctxt, ASN1BMPString *pvalue, Asn116BitCharSet *permCharSet)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a variable of the ASN.1 BMP character string.  <a href="#ga23"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga24">decodeByteAlign</a> (OOCTXT *pctxt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will position the decode bit cursor on the next byte boundary.  <a href="#ga24"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga25">decodeConsInteger</a> (OOCTXT *pctxt, ASN1INT *pvalue, ASN1INT lower, ASN1INT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an integer constrained either by a value or value range constraint.  <a href="#ga25"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga26">decodeConsUnsigned</a> (OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unsigned integer constrained either by a value or value range constraint.  <a href="#ga26"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga27">decodeConsUInt8</a> (OOCTXT *pctxt, ASN1UINT8 *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an 8-bit unsigned integer constrained either by a value or value range constraint.  <a href="#ga27"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga28">decodeConsUInt16</a> (OOCTXT *pctxt, ASN1USINT *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a 16-bit unsigned integer constrained either by a value or value range constraint.  <a href="#ga28"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga29">decodeConsWholeNumber</a> (OOCTXT *pctxt, ASN1UINT *padjusted_value, ASN1UINT range_value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a constrained whole number as specified in Section 10.5 of the X.691 standard.  <a href="#ga29"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga30">decodeConstrainedStringEx</a> (OOCTXT *pctxt, const char **string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a constrained string value.  <a href="#ga30"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga31">decodeDynBitString</a> (OOCTXT *pctxt, ASN1DynBitStr *pBitStr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a variable of thr ASN.1 BIT STRING type.  <a href="#ga31"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga32">decodeDynOctetString</a> (OOCTXT *pctxt, ASN1DynOctStr *pOctStr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 octet string type whose maximum size is known in advance.  <a href="#ga32"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga33">decodeLength</a> (OOCTXT *pctxt, ASN1UINT *pvalue)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a length determinant value.  <a href="#ga33"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga34">moveBitCursor</a> (OOCTXT *pctxt, int bitOffset)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga35">decodeObjectIdentifier</a> (OOCTXT *pctxt, ASN1OBJID *pvalue)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a value of the ASN.1 object identifier type.  <a href="#ga35"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga36">decodeOctetString</a> (OOCTXT *pctxt, ASN1UINT *numocts_p, ASN1OCTET *buffer, ASN1UINT bufsiz)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 octet string type whose maximun size is known in advance.  <a href="#ga36"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga37">decodeOpenType</a> (OOCTXT *pctxt, const ASN1OCTET **object_p2, ASN1UINT *numocts_p)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an ASN.1 open type.  <a href="#ga37"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga38">decodeSmallNonNegWholeNumber</a> (OOCTXT *pctxt, ASN1UINT *pvalue)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a small non-negative whole number as specified in Section 10.6 of the X.691 standard.  <a href="#ga38"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga39">decodeSemiConsInteger</a> (OOCTXT *pctxt, ASN1INT *pvalue, ASN1INT lower)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a semi-constrained integer.  <a href="#ga39"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga40">decodeSemiConsUnsigned</a> (OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT lower)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a semi-constrained unsigned integer.  <a href="#ga40"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga41" doxytag="Rtmem::decodeVarWidthCharString" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>decodeVarWidthCharString</b> (OOCTXT *pctxt, const char **pvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga42">encodeBit</a> (OOCTXT *pctxt, ASN1BOOL value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a variable of the ASN.1 BOOLEAN type in a single bit.  <a href="#ga42"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga43">encodeBits</a> (OOCTXT *pctxt, ASN1UINT value, ASN1UINT nbits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes multiple bits.  <a href="#ga43"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga44">encodeBitString</a> (OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a value of the ASN.1 bit string type.  <a href="#ga44"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga45">encodeBMPString</a> (OOCTXT *pctxt, ASN1BMPString value, Asn116BitCharSet *permCharSet)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a variable of the ASN.1 BMP character string.  <a href="#ga45"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga46">encodeByteAlign</a> (OOCTXT *pctxt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will position the encode bit cursor on the next byte boundry.  <a href="#ga46"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga47">encodeCheckBuffer</a> (OOCTXT *pctxt, ASN1UINT nbytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will determine if the given number of bytes will fit in the encode buffer.  <a href="#ga47"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga48">encodeConstrainedStringEx</a> (OOCTXT *pctxt, const char *string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a constrained string value.  <a href="#ga48"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga49">encodeConsInteger</a> (OOCTXT *pctxt, ASN1INT value, ASN1INT lower, ASN1INT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an integer constrained either by a value or value range constraint.  <a href="#ga49"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga50">encodeConsUnsigned</a> (OOCTXT *pctxt, ASN1UINT value, ASN1UINT lower, ASN1UINT upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an unsigned integer constrained either by a value or value range constraint.  <a href="#ga50"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga51">encodeConsWholeNumber</a> (OOCTXT *pctxt, ASN1UINT adjusted_value, ASN1UINT range_value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a constrained whole number as specified in Section 10.5 of the X.691 standard.  <a href="#ga51"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga52">encodeExpandBuffer</a> (OOCTXT *pctxt, ASN1UINT nbytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will expand the buffer to hold the given number of bytes.  <a href="#ga52"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN ASN1OCTET *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga53">encodeGetMsgPtr</a> (OOCTXT *pctxt, int *pLength)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will return the message pointer and length of an encoded message.  <a href="#ga53"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga54">encodeLength</a> (OOCTXT *pctxt, ASN1UINT value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a length determinant value.  <a href="#ga54"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga55">encodeObjectIdentifier</a> (OOCTXT *pctxt, ASN1OBJID *pvalue)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a value of the ASN.1 object identifier type.  <a href="#ga55"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga56">encodebitsFromOctet</a> (OOCTXT *pctxt, ASN1OCTET value, ASN1UINT nbits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes bits from a given octet to the output buffer.  <a href="#ga56"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga57">encodeOctets</a> (OOCTXT *pctxt, const ASN1OCTET *pvalue, ASN1UINT nbits)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This fuction will encode an array of octets.  <a href="#ga57"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga58">encodeOctetString</a> (OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a value of the ASN.1 octet string type.  <a href="#ga58"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga59">encodeOpenType</a> (OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode an ASN.1 open type.  <a href="#ga59"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga60">encodeOpenTypeExt</a> (OOCTXT *pctxt, DList *pElemList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode an ASN.1 open type extension.  <a href="#ga60"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga61" doxytag="Rtmem::encodeOpenTypeExtBits" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>encodeOpenTypeExtBits</b> (OOCTXT *pctxt, DList *pElemList)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga62">encodeSmallNonNegWholeNumber</a> (OOCTXT *pctxt, ASN1UINT value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will endcode a small, non-negative whole number as specified in Section 10.6 of teh X.691 standard.  <a href="#ga62"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga63">encodeSemiConsInteger</a> (OOCTXT *pctxt, ASN1INT value, ASN1INT lower)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a semi-constrained integer.  <a href="#ga63"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml#ga64">encodeSemiConsUnsigned</a> (OOCTXT *pctxt, ASN1UINT value, ASN1UINT lower)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an semi-constrained unsigned integer.  <a href="#ga64"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga65" doxytag="Rtmem::encodeVarWidthCharString" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>encodeVarWidthCharString</b> (OOCTXT *pctxt, const char *value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga66" doxytag="Rtmem::addSizeConstraint" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>addSizeConstraint</b> (OOCTXT *pctxt, Asn1SizeCnst *pSize)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga67" doxytag="Rtmem::alignCharStr" ></a>
EXTERN ASN1BOOL&nbsp;</td><td class="memItemRight" valign=bottom><b>alignCharStr</b> (OOCTXT *pctxt, ASN1UINT len, ASN1UINT nbits, Asn1SizeCnst *pSize)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga68" doxytag="Rtmem::bitAndOctetStringAlignmentTest" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>bitAndOctetStringAlignmentTest</b> (Asn1SizeCnst *pSizeList, ASN1UINT itemCount, ASN1BOOL bitStrFlag, ASN1BOOL *pAlignFlag)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga69" doxytag="Rtmem::getPERMsgLen" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>getPERMsgLen</b> (OOCTXT *pctxt)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga70" doxytag="Rtmem::getSizeConstraint" ></a>
EXTERN Asn1SizeCnst *&nbsp;</td><td class="memItemRight" valign=bottom><b>getSizeConstraint</b> (OOCTXT *pctxt, ASN1BOOL extbit)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga71" doxytag="Rtmem::checkSizeConstraint" ></a>
EXTERN int&nbsp;</td><td class="memItemRight" valign=bottom><b>checkSizeConstraint</b> (OOCTXT *pctxt, int size)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga72" doxytag="Rtmem::getUIntBitCount" ></a>
EXTERN ASN1UINT&nbsp;</td><td class="memItemRight" valign=bottom><b>getUIntBitCount</b> (ASN1UINT value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga73" doxytag="Rtmem::checkSize" ></a>
EXTERN Asn1SizeCnst *&nbsp;</td><td class="memItemRight" valign=bottom><b>checkSize</b> (Asn1SizeCnst *pSizeList, ASN1UINT value, ASN1BOOL *pExtendable)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga74" doxytag="Rtmem::init16BitCharSet" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>init16BitCharSet</b> (Asn116BitCharSet *pCharSet, ASN116BITCHAR first, ASN116BITCHAR last, ASN1UINT abits, ASN1UINT ubits)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga75" doxytag="Rtmem::isExtendableSize" ></a>
EXTERN ASN1BOOL&nbsp;</td><td class="memItemRight" valign=bottom><b>isExtendableSize</b> (Asn1SizeCnst *pSizeList)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga77" doxytag="Rtmem::set16BitCharSet" ></a>
EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><b>set16BitCharSet</b> (OOCTXT *pctxt, Asn116BitCharSet *pCharSet, Asn116BitCharSet *pAlphabet)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga78" doxytag="Rtmem::rtBitStrToString" ></a>
EXTERN const char *&nbsp;</td><td class="memItemRight" valign=bottom><b>rtBitStrToString</b> (ASN1UINT numbits, const ASN1OCTET *data, char *buffer, size_t bufsiz)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga79" doxytag="Rtmem::rtOctStrToString" ></a>
EXTERN const char *&nbsp;</td><td class="memItemRight" valign=bottom><b>rtOctStrToString</b> (ASN1UINT numocts, const ASN1OCTET *data, char *buffer, size_t bufsiz)</td></tr>

</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="ga88" doxytag="ooasn1.h::DECODEBIT" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define DECODEBIT          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>pvalue&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><pre class="fragment"><div>((INCRBITIDX (pctxt) != ASN_OK) ? ASN_E_ENDOFBUF : ((pvalue) ? \
((*(pvalue) = (((pctxt)-&gt;buffer.data[(pctxt)-&gt;buffer.byteIndex]) &amp; \
(1 &lt;&lt; (pctxt)-&gt;buffer.bitOffset)) != 0), ASN_OK) : ASN_OK ))
</div></pre>
<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01230">1230</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga89" doxytag="ooasn1.h::decodeUnconsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define decodeUnconsInteger          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>pvalue&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an unconstrained integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01612">1612</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga90" doxytag="ooasn1.h::decodeUnconsUnsigned" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define decodeUnconsUnsigned          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>pvalue&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;decodeSemiConsUnsigned(pctxt, pvalue, 0U)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an unconstrained unsigned integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01625">1625</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga91" doxytag="ooasn1.h::encodeUnconsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define encodeUnconsInteger          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>value&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes an unconstrained integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01999">1999</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga87" doxytag="ooasn1.h::INCRBITIDX" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define INCRBITIDX          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><pre class="fragment"><div>((--(pctxt)-&gt;buffer.bitOffset &lt; 0) ? \
((++(pctxt)-&gt;buffer.byteIndex &gt;= (pctxt)-&gt;buffer.size) ? ASN_E_ENDOFBUF : \
((pctxt)-&gt;buffer.bitOffset = 7, ASN_OK)) : ASN_OK)
</div></pre>
<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01225">1225</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga80" doxytag="ooasn1.h::memAlloc" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memAlloc          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>nbytes&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate memory.
<p>
This macro allocates the given number of bytes. It is similar to the C <code>malloc</code> run-time function.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
    <tr><td valign=top><em>nbytes</em>&nbsp;</td><td>- Number of bytes of memory to allocate </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>- Void pointer to allocated memory or NULL if insufficient memory was available to fulfill the request. </dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01044">1044</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga81" doxytag="ooasn1.h::memAllocZ" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memAllocZ          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>nbytes&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;memHeapAllocZ(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate and zero memory.
<p>
This macro allocates the given number of bytes and then initializes the memory block to zero.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
    <tr><td valign=top><em>nbytes</em>&nbsp;</td><td>- Number of bytes of memory to allocate </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>- Void pointer to allocated memory or NULL if insufficient memory was available to fulfill the request. </dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01056">1056</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga84" doxytag="ooasn1.h::memFree" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memFree          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Free memory associated with a context.
<p>
This macro frees all memory held within a context. This is all memory allocated using the memHeapAlloc (and similar macros) and the mem memory allocation functions using the given context variable.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
  </table>
</dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01099">1099</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga83" doxytag="ooasn1.h::memFreePtr" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memFreePtr          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>mem_p&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><pre class="fragment"><div><span class="keywordflow">if</span> (memHeapCheckPtr (&amp;(pctxt)-&gt;pTypeMemHeap, (<span class="keywordtype">void</span>*)mem_p)) \
memHeapFreePtr(&amp;(pctxt)-&gt;pTypeMemHeap, (<span class="keywordtype">void</span>*)mem_p)
</div></pre>Free memory pointer.
<p>
This macro frees memory at the given pointer. The memory must have been allocated using the memHeapAlloc (or similar) macros or the mem memory allocation macros. This macro is similar to the C <code>free</code> function.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
    <tr><td valign=top><em>mem_p</em>&nbsp;</td><td>- Pointer to memory block to free. This must have been allocated using the memHeapAlloc or memAlloc macro or the memHeapAlloc function. </td></tr>
  </table>
</dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01087">1087</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga82" doxytag="ooasn1.h::memRealloc" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memRealloc          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>mem_p,         <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>nbytes&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;memHeapRealloc(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p, nbytes)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reallocate memory.
<p>
This macro reallocates a memory block (either expands or contracts) to the given number of bytes. It is similar to the C <code>realloc</code> run-time function.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
    <tr><td valign=top><em>mem_p</em>&nbsp;</td><td>- Pointer to memory block to reallocate. This must have been allocated using the memHeapAlloc macro or the memHeapAlloc function. </td></tr>
    <tr><td valign=top><em>nbytes</em>&nbsp;</td><td>- Number of bytes of memory to which the block is to be resized. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>- Void pointer to allocated memory or NULL if insufficient memory was available to fulfill the request. This may be the same as the pmem pointer that was passed in if the block did not need to be relocated. </dd></dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01073">1073</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ga85" doxytag="ooasn1.h::memReset" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define memReset          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">pctxt&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap>&nbsp;&nbsp;&nbsp;memHeapReset(&amp;(pctxt)-&gt;pTypeMemHeap)</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reset memory associated with a context.
<p>
This macro resets all memory held within a context. This is all memory allocated using the memHeapAlloc (and similar macros) and the mem memory allocation functions using the given context variable.<p>
The difference between this and the ASN1MEMFREE macro is that the memory blocks held within the context are not actually freed. Internal pointers are reset so the existing blocks can be reused. This can provide a performace improvement for repetitive tasks such as decoding messages in a loop.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>- Pointer to a context block </td></tr>
  </table>
</dl>

<p>
Definition at line <a class="el" href="ooasn1_8h-source.shtml#l01116">1116</a> of file <a class="el" href="ooasn1_8h-source.shtml">ooasn1.h</a>.    </td>
  </tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="ga21" doxytag="ooasn1.h::decodeBits" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeBits           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a series of multiple bits and place the results in an unsigned integer variable.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>A pointer to an unsigned integer variable to receive the decoded result. </td></tr>
    <tr><td valign=top><em>nbits</em>&nbsp;</td><td>The number of bits to decode. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga22" doxytag="ooasn1.h::decodeBitString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeBitString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>numbits_p</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>bufsiz</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a value of the ASN.1 bit string type whose maximum size is is known in advance.
<p>
The ASN1C complier generates a call to this function to decode bit string productions or elements that contain a size constraint.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numbits_p</em>&nbsp;</td><td>Pointer to an unsigned integer variable to receive decoded number of bits. </td></tr>
    <tr><td valign=top><em>buffer</em>&nbsp;</td><td>Pointer to a fixed-size or pre-allocated array of bufsiz octets to receive a decoded bit string. </td></tr>
    <tr><td valign=top><em>bufsiz</em>&nbsp;</td><td>Length (in octets) of the buffer to receive the decoded bit string. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga23" doxytag="ooasn1.h::decodeBMPString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeBMPString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1BMPString *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>Asn116BitCharSet *&nbsp;</td>
          <td class="mdname" nowrap> <em>permCharSet</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a variable of the ASN.1 BMP character string.
<p>
This differs from the decode routines for the character strings previously described in that the BMP string type is based on 16-bit characters. A 16-bit character string is modeled using an array of unsigned short integers.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to character string structure to receive the decoded result The structure includes a count field containing the number of characters and an array of unsigned short integers to hold the 16-bit character values. </td></tr>
    <tr><td valign=top><em>permCharSet</em>&nbsp;</td><td>A pointer to the constraining character set. This contains an array containing all valid characters in the set as well as the aligned and unaligned bit counts required to encode the characters. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga24" doxytag="ooasn1.h::decodeByteAlign" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeByteAlign           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pctxt</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will position the decode bit cursor on the next byte boundary.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga25" doxytag="ooasn1.h::decodeConsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConsInteger           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an integer constrained either by a value or value range constraint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga30" doxytag="ooasn1.h::decodeConstrainedStringEx" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConstrainedStringEx           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const char **&nbsp;</td>
          <td class="mdname" nowrap> <em>string</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>charSet</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>abits</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>ubits</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>canSetBits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function decodes a constrained string value.
<p>
This version of the function allows all of the required permitted alphabet constraint parameters to be passed in as arguments.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>string</em>&nbsp;</td><td>Pointer to const char* to receive decoded string. Memory will be allocated for this variable using internal memory management functions. </td></tr>
    <tr><td valign=top><em>charSet</em>&nbsp;</td><td>String containing permitted alphabet character set. Can be null if no character set was specified. </td></tr>
    <tr><td valign=top><em>abits</em>&nbsp;</td><td>Number of bits in a character set character (aligned). </td></tr>
    <tr><td valign=top><em>ubits</em>&nbsp;</td><td>Number of bits in a character set character (unaligned). </td></tr>
    <tr><td valign=top><em>canSetBits</em>&nbsp;</td><td>Number of bits in a character from the canonical set representing this string. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga28" doxytag="ooasn1.h::decodeConsUInt16" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConsUInt16           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1USINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a 16-bit unsigned integer constrained either by a value or value range constraint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to 16-bit unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga27" doxytag="ooasn1.h::decodeConsUInt8" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConsUInt8           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT8 *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an 8-bit unsigned integer constrained either by a value or value range constraint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to 8-bit unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga26" doxytag="ooasn1.h::decodeConsUnsigned" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConsUnsigned           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an unsigned integer constrained either by a value or value range constraint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga29" doxytag="ooasn1.h::decodeConsWholeNumber" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeConsWholeNumber           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>padjusted_value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>range_value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function decodes a constrained whole number as specified in Section 10.5 of the X.691 standard.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>padjusted_value</em>&nbsp;</td><td>Pointer to unsigned adjusted integer value to receive decoded result. To get the final value, this value is added to the lower boundary of the range. </td></tr>
    <tr><td valign=top><em>range_value</em>&nbsp;</td><td>Unsigned integer value specifying the total size of the range. This is obtained by subtracting the lower range value from the upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga31" doxytag="ooasn1.h::decodeDynBitString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeDynBitString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1DynBitStr *&nbsp;</td>
          <td class="mdname" nowrap> <em>pBitStr</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a variable of thr ASN.1 BIT STRING type.
<p>
This function allocates dynamic memory t store the decoded result. The ASN1C complier generates a call to this function to decode an unconstrained bit string production or element.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pBitStr</em>&nbsp;</td><td>Pointer to a dynamic bit string structure to receive the decoded result. This structure contains a field to hold the number of decoded bits and a pointer to an octet string to hold the decoded data. Memory is allocated by the decoder using the memAlloc function. This memory is tracked within the context and released when the freeContext function is invoked. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga32" doxytag="ooasn1.h::decodeDynOctetString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeDynOctetString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1DynOctStr *&nbsp;</td>
          <td class="mdname" nowrap> <em>pOctStr</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a value of the ASN.1 octet string type whose maximum size is known in advance.
<p>
The ASN1C complier generates a call to this function to decode octet string productions or elements that contain a size constraint.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pOctStr</em>&nbsp;</td><td>A pointer to a dynamic octet string to receive the decoded result. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga33" doxytag="ooasn1.h::decodeLength" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeLength           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a length determinant value.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>A pointer to an unsigned integer variable to receive the decoded length value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga35" doxytag="ooasn1.h::decodeObjectIdentifier" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeObjectIdentifier           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1OBJID *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function decodes a value of the ASN.1 object identifier type.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to value to receive decoded result. The ASN1OBJID structure contains an integer to hold the number of subidentifiers and an array to hold the subidentifier values. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga36" doxytag="ooasn1.h::decodeOctetString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeOctetString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>numocts_p</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>bufsiz</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a value of the ASN.1 octet string type whose maximun size is known in advance.
<p>
The ASN1C compiler generates a call to this function to decode octet string productions or elements that contain a size constraint.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numocts_p</em>&nbsp;</td><td>A pointer to an unsigned buffer of bufsiz octets to receive decoded data. </td></tr>
    <tr><td valign=top><em>buffer</em>&nbsp;</td><td>A pointer to a pre-allocated buffer of size octets to receive the decoded data. </td></tr>
    <tr><td valign=top><em>bufsiz</em>&nbsp;</td><td>The size of the buffer to receive the decoded result. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga37" doxytag="ooasn1.h::decodeOpenType" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeOpenType           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const ASN1OCTET **&nbsp;</td>
          <td class="mdname" nowrap> <em>object_p2</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>numocts_p</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode an ASN.1 open type.
<p>
This used to be the ASN.1 ANY type, but now is used in a variety of applications requiring an encoding that can be interpreted by a decoder without prior knowledge of the type of the variable.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numocts_p</em>&nbsp;</td><td>A pointer to an unsigned buffer of bufsiz octets to receive decoded data. </td></tr>
    <tr><td valign=top><em>object_p2</em>&nbsp;</td><td>A pointer to an open type variable to receive the decoded data. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga39" doxytag="ooasn1.h::decodeSemiConsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeSemiConsInteger           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a semi-constrained integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value, represented as signed integer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga40" doxytag="ooasn1.h::decodeSemiConsUnsigned" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeSemiConsUnsigned           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a semi-constrained unsigned integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value, represented as unsigned integer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga38" doxytag="ooasn1.h::decodeSmallNonNegWholeNumber" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int decodeSmallNonNegWholeNumber           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will decode a small non-negative whole number as specified in Section 10.6 of the X.691 standard.
<p>
This is a number that is expected to be small, but whose size is potentially unlimited due to the presence of an extension maker.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all workings variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to an unsigned integer value t receive decoded results. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga42" doxytag="ooasn1.h::encodeBit" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeBit           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1BOOL&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode a variable of the ASN.1 BOOLEAN type in a single bit.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>The BOOLEAN value to be encoded. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga43" doxytag="ooasn1.h::encodeBits" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeBits           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes multiple bits.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Unsigned integer containing the bits to be encoded. </td></tr>
    <tr><td valign=top><em>nbits</em>&nbsp;</td><td>Number of bits in value to encode. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga56" doxytag="ooasn1.h::encodebitsFromOctet" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodebitsFromOctet           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1OCTET&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes bits from a given octet to the output buffer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to ASN.1 PER context structure </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value of bits to be encoded </td></tr>
    <tr><td valign=top><em>nbits</em>&nbsp;</td><td>Number of bits to be encoded</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Status of operation </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga44" doxytag="ooasn1.h::encodeBitString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeBitString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>data</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode a value of the ASN.1 bit string type.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numocts</em>&nbsp;</td><td>The number of bits n the string to be encoded. </td></tr>
    <tr><td valign=top><em>data</em>&nbsp;</td><td>Pointer to the bit string data to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga45" doxytag="ooasn1.h::encodeBMPString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeBMPString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1BMPString&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>Asn116BitCharSet *&nbsp;</td>
          <td class="mdname" nowrap> <em>permCharSet</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode a variable of the ASN.1 BMP character string.
<p>
This differs from the encode routines for the character strings previously described in that the BMP string type is based on 16-bit characters. A 16-bit character string is modeled using an array of unsigned short integers.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Character string to be encoded. This structure includes a count field containing the number of characters to encode and an array of unsigned short integers to hold the 16-bit characters to be encoded. </td></tr>
    <tr><td valign=top><em>permCharSet</em>&nbsp;</td><td>Pointer to the constraining character set. This contains an array containing all valid characters in the set as well as the aligned and unaligned bit counts required to encode the characters. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga46" doxytag="ooasn1.h::encodeByteAlign" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeByteAlign           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pctxt</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will position the encode bit cursor on the next byte boundry.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga47" doxytag="ooasn1.h::encodeCheckBuffer" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeCheckBuffer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbytes</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will determine if the given number of bytes will fit in the encode buffer.
<p>
If not, either the buffer is expanded (if it is a dynamic buffer) or an error is signaled.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>nbytes</em>&nbsp;</td><td>Number of bytes of space required to hold the variable to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga49" doxytag="ooasn1.h::encodeConsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeConsInteger           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes an integer constrained either by a value or value range constraint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga48" doxytag="ooasn1.h::encodeConstrainedStringEx" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeConstrainedStringEx           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>string</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>charSet</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>abits</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>ubits</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>canSetBits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes a constrained string value.
<p>
This version of the function allows all of the required permitted alphabet constraint parameters to be passed in as arguments.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>string</em>&nbsp;</td><td>Pointer to string to be encoded. </td></tr>
    <tr><td valign=top><em>charSet</em>&nbsp;</td><td>String containing permitted alphabet character set. Can be null if no character set was specified. </td></tr>
    <tr><td valign=top><em>abits</em>&nbsp;</td><td>Number of bits in a character set character (aligned). </td></tr>
    <tr><td valign=top><em>ubits</em>&nbsp;</td><td>Number of bits in a character set character (unaligned). </td></tr>
    <tr><td valign=top><em>canSetBits</em>&nbsp;</td><td>Number of bits in a character from the canonical set representing this string. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga50" doxytag="ooasn1.h::encodeConsUnsigned" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeConsUnsigned           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes an unsigned integer constrained either by a value or value range constraint.
<p>
The constrained unsigned integer option is used if:<p>
1. The lower value of the range is &gt;= 0, and 2. The upper value of the range is &gt;= MAXINT<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign=top><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga51" doxytag="ooasn1.h::encodeConsWholeNumber" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeConsWholeNumber           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>adjusted_value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>range_value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes a constrained whole number as specified in Section 10.5 of the X.691 standard.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>adjusted_value</em>&nbsp;</td><td>Unsigned adjusted integer value to be encoded. The adjustment is done by subtracting the lower value of the range from the value to be encoded. </td></tr>
    <tr><td valign=top><em>range_value</em>&nbsp;</td><td>Unsigned integer value specifying the total size of the range. This is obtained by subtracting the lower range value from the upper range value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga52" doxytag="ooasn1.h::encodeExpandBuffer" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeExpandBuffer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbytes</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will expand the buffer to hold the given number of bytes.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>nbytes</em>&nbsp;</td><td>The number of bytes the buffer is to be expanded by. Note that the buffer will be expanded by ASN_K_ENCBIFXIZ or nbytes (whichever is larger. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga53" doxytag="ooasn1.h::encodeGetMsgPtr" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN ASN1OCTET* encodeGetMsgPtr           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>int *&nbsp;</td>
          <td class="mdname" nowrap> <em>pLength</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will return the message pointer and length of an encoded message.
<p>
This function is called after a complier generated encode function to get the pointer and length of the message. It is normally used when dynamic encoding is specified because the message pointer is not known until encoding is complete. If static encoding is used, the message starts at the beginning of the specified buffer adn the encodeGetMsgLen function can be used to obtain the lenght of the message.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pLength</em>&nbsp;</td><td>Pointer to variable to receive length of the encoded message. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga54" doxytag="ooasn1.h::encodeLength" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeLength           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode a length determinant value.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Length value to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga55" doxytag="ooasn1.h::encodeObjectIdentifier" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeObjectIdentifier           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1OBJID *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes a value of the ASN.1 object identifier type.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>Pointer to value to be encoded. The ASN1OBJID structure contains a numids fields to hold the number of subidentifiers and an array to hold the subidentifier values. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga57" doxytag="ooasn1.h::encodeOctets" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeOctets           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>nbits</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This fuction will encode an array of octets.
<p>
The Octets will be encoded unaligned starting at the current bit offset within the encode buffer.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pvalue</em>&nbsp;</td><td>A pointer to an array of octets to encode </td></tr>
    <tr><td valign=top><em>nbits</em>&nbsp;</td><td>The number of Octets to encode </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga58" doxytag="ooasn1.h::encodeOctetString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeOctetString           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>data</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode a value of the ASN.1 octet string type.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numocts</em>&nbsp;</td><td>Number of octets in the string to be encoded. </td></tr>
    <tr><td valign=top><em>data</em>&nbsp;</td><td>Pointer to octet string data to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga59" doxytag="ooasn1.h::encodeOpenType" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeOpenType           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const ASN1OCTET *&nbsp;</td>
          <td class="mdname" nowrap> <em>data</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode an ASN.1 open type.
<p>
This used to be the ANY type, but now is used in a variety of applications requiring an encoding that can be interpreted by a decoder without a prior knowledge of the type of the variable.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>numocts</em>&nbsp;</td><td>Number of octets in the string to be encoded. </td></tr>
    <tr><td valign=top><em>data</em>&nbsp;</td><td>Pointer to octet string data to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga60" doxytag="ooasn1.h::encodeOpenTypeExt" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeOpenTypeExt           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>DList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pElemList</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will encode an ASN.1 open type extension.
<p>
An open type extension field is the data that potentially resides after the ... marker in a version-1 message. The open type structure contains a complete encoded bit set including option element bits or choice index, length, and data. Typically, this data is populated when a version-1 system decodes a version-2 message. The extension fields are retained and can then be re-encoded if a new message is to be sent out (for example, in a store and forward system).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pElemList</em>&nbsp;</td><td>A pointer to the open type to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga63" doxytag="ooasn1.h::encodeSemiConsInteger" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeSemiConsInteger           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1INT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes a semi-constrained integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value, represented as signed integer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga64" doxytag="ooasn1.h::encodeSemiConsUnsigned" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeSemiConsUnsigned           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function encodes an semi-constrained unsigned integer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign=top><em>lower</em>&nbsp;</td><td>Lower range value, represented as unsigned integer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga62" doxytag="ooasn1.h::encodeSmallNonNegWholeNumber" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int encodeSmallNonNegWholeNumber           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function will endcode a small, non-negative whole number as specified in Section 10.6 of teh X.691 standard.
<p>
This is a number that is expected to be small, but whose size is potentially unlimited due to the presence of an extension marker.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>An unsigned integer value to be encoded. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li><li>negative return value is error. </li></ul>
</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga20" doxytag="ooasn1.h::memHeapGetDefBlkSize" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN ASN1UINT memHeapGetDefBlkSize           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pctxt</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function returns the actual granularity of memory blocks.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context block. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga19" doxytag="ooasn1.h::memHeapSetDefBlkSize" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void memHeapSetDefBlkSize           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>ASN1UINT&nbsp;</td>
          <td class="mdname" nowrap> <em>blkSize</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function sets the pointer to standard allocation functions.
<p>
These functions are used to allocate/reallocate/free the memory blocks. By default, standard C functions - malloc, realloc, and free - are used. But if some platforms do not support these functions or some other reasons exist) they can be overloaded. The functions being overloaded should have the same prototypes as standard ones.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context block. </td></tr>
    <tr><td valign=top><em>blkSize</em>&nbsp;</td><td>The currently used minimum size and the granularity of memory blocks. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga15" doxytag="ooasn1.h::memSetAllocFuncs" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void memSetAllocFuncs           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OSMallocFunc&nbsp;</td>
          <td class="mdname" nowrap> <em>malloc_func</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>OSReallocFunc&nbsp;</td>
          <td class="mdname" nowrap> <em>realloc_func</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>OSFreeFunc&nbsp;</td>
          <td class="mdname" nowrap> <em>free_func</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function sets the pointers to standard allocation functions.
<p>
These functions are used to allocate/reallocate/free the memory blocks. By default, standard C functions - 'malloc', 'realloc' and 'free' - are used. But if some platforms do not support these functions (or some other reasons exist) they can be overloaded. The functions being overloaded should have the same prototypes as standard ones.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>malloc_func</em>&nbsp;</td><td>Pointer to the memory allocation function ('malloc' by default). </td></tr>
    <tr><td valign=top><em>realloc_func</em>&nbsp;</td><td>Pointer to the memory reallocation function ('realloc' by default). </td></tr>
    <tr><td valign=top><em>free_func</em>&nbsp;</td><td>Pointer to the memory deallocation function ('free' by default). </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga34" doxytag="ooasn1.h::moveBitCursor" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN int moveBitCursor           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bitOffset</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>bitOffset</em>&nbsp;</td><td>The bit offset inside the message buffer. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
         <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
                21 Jan 2005.<BR> H323FrameworkStack, Version 0.4 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
