<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
         <TITLE>ooasn1.h Source File</TITLE>
         <LINK REL="stylesheet" HREF="http://www.obj-sys.com/stylesheet.css"
          TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
         <CENTER>
                <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
                                SRC="http://www.obj-sys.com/images/Head1.jpg" WIDTH="725" HEIGHT="90"
                                ALT="Objective Systems, Inc."></TD>
                         <TD WIDTH="100%"
                          BACKGROUND="http://www.obj-sys.com/images/Head2.jpg">&nbsp;</TD>
                  </TR>
                </TABLE>
<TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                <TR VALIGN="TOP">
                  <TD VALIGN="top" BACKGROUND="http://www.obj-sys.com/images/LeftBkd.jpg"
                        WIDTH="129">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0"
                          BACKGROUND="http://www.obj-sys.com/images/NetscapeCorrection.gif">
                                <TR VALIGN="TOP">
                                  <TD BGCOLOR="#D9E4F1" VALIGN="top" ROWSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="96" HEIGHT="1">
                                         <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
                                                
                                                <TR>
                                                  <TD></TD>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">
                                                         <A HREF="http://www.obj-sys.com/index.shtml" CLASS="nav">Home</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutasn1.shtml" CLASS="nav">About
                                                         ASN.1</A><BR> <A HREF="http://www.obj-sys.com/products.shtml"
                                                         CLASS="nav">Products</A><BR>
                                                         <A HREF="http://www.obj-sys.com/freesoftware.shtml" CLASS="nav">Free
                                                         Software</A><BR>
                                                         <A HREF="http://www.obj-sys.com/docs/acv55docs.shtml" CLASS="nav">Documents</A>
                                                         <BR> <A HREF="http://www.obj-sys.com/services.shtml"
                                                         CLASS="nav">Services</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resources.shtml" CLASS="nav">Resources</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resellers.shtml" CLASS="nav">Resellers</A><BR>
<!--      <a href="http://www.obj-sys.com/ordering.shtml" class="nav">Ordering</a><br>  -->
                                                         <A HREF="http://www.obj-sys.com/customers.shtml"
                                                          CLASS="nav">Customers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/careers.shtml" CLASS="nav">Careers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutus.shtml" CLASS="nav">About Us</A><BR>
                                                         <A HREF="http://www.obj-sys.com/contactus.shtml" CLASS="nav">Contact Us</A><BR>
                                                         </TD>
                                                </TR>
                                                <TR>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">&nbsp;</TD>
                                                </TR>
                                                <TR>
                                                  <TD> </TD>
                                                  <TD>
                        <!--Google search -->
                                                         <FORM METHOD="GET" ACTION="http://www.google.com/custom">
                                                                
                                                                <P><A HREF="http://www.google.com/search"></A>
                                                                  <IMG SRC="http://www.obj-sys.com/images/google.gif" BORDER="0" ALT="Google"
                                                                        ALIGN="middle"><BR>
                                                                  <INPUT TYPE="text" NAME="q" SIZE="10" MAXLENGTH="255" VALUE=""><BR>
                                                                  <INPUT TYPE="submit" NAME="sa" VALUE="Search">
                                                                  <INPUT TYPE="hidden" NAME="cof"
                                                                        VALUE="AH:center;GL:0;S:http://www.obj-sys.com;AWFID:b38a0de10d0a7b9b;">
                                                                  <INPUT TYPE="hidden" NAME="domains" VALUE="obj-sys.com">
                                                                  <INPUT TYPE="hidden" NAME="sitesearch" VALUE="obj-sys.com"><BR> </P> </FORM>
                        <!--End Google search -->
                                                  </TD>
                                                  <TD><IMG BORDER="0"
                                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="10" HEIGHT="1"></TD>
                                                </TR>
                                                
                                         </TABLE> </TD>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="top"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftTop.jpg"
                                         WIDTH="33" HEIGHT="114"></TD>
                                </TR>
                                <TR>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="bottom"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftC.jpg"
                                         WIDTH="33" HEIGHT="16"></TD>
                                </TR>
                                <TR>
                                  <TD WIDTH="100%" COLSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftD.jpg" WIDTH="129" HEIGHT="37"
                                         ALT="Objective Systems, Inc."><BR><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftBottom.jpg" WIDTH="129"><BR>
                                         <IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftBottombkd.jpg"></TD>
                                </TR>
                         </TABLE> </TD>
                  <TD VALIGN="top" WIDTH="100%">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                                <TR>
                                  <TD WIDTH="100%"
                                        BACKGROUND="http://www.obj-sys.com/images/Top2bkd.jpg"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/Top2.jpg" WIDTH="568" HEIGHT="20"></TD>
                                </TR>
                         </TABLE>
                <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD><IMG BORDER="0" SRC="http://www.obj-sys.com/images/Top3.jpg"
                                WIDTH="58" HEIGHT="34"></TD>
                         <TD ALIGN="center" WIDTH="100%"> </TD>
                  </TR>
                  <TR>
                         <TD VALIGN="top" WIDTH="95%">
<!-- Generated by Doxygen 1.3.6-20040413 -->
<div class="qindex"><a class="qindex" href="index.shtml">Main&nbsp;Page</a> | <a class="qindex" href="modules.shtml">Modules</a> | <a class="qindex" href="classes.shtml">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.shtml">Data&nbsp;Structures</a> | <a class="qindex" href="files.shtml">File&nbsp;List</a> | <a class="qindex" href="functions.shtml">Data&nbsp;Fields</a> | <a class="qindex" href="globals.shtml">Globals</a></div>
<h1>ooasn1.h</h1><a href="ooasn1_8h.shtml">Go to the documentation of this file.</a><pre class="fragment"><div>00001 <span class="comment">/*</span>
00002 <span class="comment"> * Copyright (C) 1997-2005 by Objective Systems, Inc.</span>
00003 <span class="comment"> *</span>
00004 <span class="comment"> * This software is furnished under an open source license and may be </span>
00005 <span class="comment"> * used and copied only in accordance with the terms of this license. </span>
00006 <span class="comment"> * The text of the license may generally be found in the root </span>
00007 <span class="comment"> * directory of this installation in the COPYING file.  It </span>
00008 <span class="comment"> * can also be viewed online at the following URL:</span>
00009 <span class="comment"> *</span>
00010 <span class="comment"> *   http://www.obj-sys.com/open/license.html</span>
00011 <span class="comment"> *</span>
00012 <span class="comment"> * Any redistributions of this file including modified versions must </span>
00013 <span class="comment"> * maintain this copyright notice.</span>
00014 <span class="comment"> *</span>
00015 <span class="comment"> *****************************************************************************/</span>
00021 <span class="preprocessor">#ifndef _OOASN1_H_</span>
00022 <span class="preprocessor"></span><span class="preprocessor">#define _OOASN1_H_</span>
00023 <span class="preprocessor"></span>
00024 <span class="preprocessor">#include &lt;limits.h&gt;</span>
00025 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
00026 <span class="preprocessor">#include &lt;string.h&gt;</span>
00027 <span class="preprocessor">#include &lt;stddef.h&gt;</span>
00028 <span class="preprocessor">#include "<a class="code" href="oo_8h.shtml">oo.h</a>"</span>
00033 <span class="comment">/* Tagging Value and Mask Constants */</span>
00034
00035 <span class="comment">/* tag class value constants */</span>
00036
00037 <span class="preprocessor">#define TV_UNIV         0       </span><span class="comment">/* universal                    */</span>
00038 <span class="preprocessor">#define TV_APPL         1       </span><span class="comment">/* application-wide             */</span>
00039 <span class="preprocessor">#define TV_CTXT         2       </span><span class="comment">/* context-specific             */</span>
00040 <span class="preprocessor">#define TV_PRIV         3       </span><span class="comment">/* private-use                  */</span>
00041
00042 <span class="comment">/* tag form value constants */</span>
00043
00044 <span class="preprocessor">#define TV_PRIM         0       </span><span class="comment">/* primitive                    */</span>
00045 <span class="preprocessor">#define TV_CONS         1       </span><span class="comment">/* constructor                  */</span>
00046
00047 <span class="comment">/* tag mask values - these can be logically or'd together to    */</span>
00048 <span class="comment">/* form tags compatible with the ASNTAG structure..             */</span>
00049
00050 <span class="preprocessor">#define TM_UNIV         0x00000000  </span><span class="comment">/* universal class          */</span>
00051 <span class="preprocessor">#define TM_APPL         0x40000000  </span><span class="comment">/* application-wide class   */</span>
00052 <span class="preprocessor">#define TM_CTXT         0x80000000  </span><span class="comment">/* context-specific class   */</span>
00053 <span class="preprocessor">#define TM_PRIV         0xC0000000  </span><span class="comment">/* private-use class        */</span>
00054
00055 <span class="preprocessor">#define TM_PRIM         0x00000000  </span><span class="comment">/* primitive form           */</span>
00056 <span class="preprocessor">#define TM_CONS         0x20000000  </span><span class="comment">/* constructor form         */</span>
00057 <span class="preprocessor">#define TM_IDCODE       0x1FFFFFFF  </span><span class="comment">/* ID code mask             */</span>
00058
00059 <span class="preprocessor">#define ASN_K_BADTAG    0xFFFFFFFF  </span><span class="comment">/* invalid tag code         */</span>
00060 <span class="preprocessor">#define ASN_K_NOTAG     0xFFFFFFFF  </span><span class="comment">/* no tag input parameter   */</span>
00061
00062 <span class="preprocessor">#define TM_CLASS        0xC0    </span><span class="comment">/* class mask                   */</span>
00063 <span class="preprocessor">#define TM_FORM         0x20    </span><span class="comment">/* form mask                    */</span>
00064 <span class="preprocessor">#define TM_CLASS_FORM   0xE0    </span><span class="comment">/* class/form mask              */</span>
00065 <span class="preprocessor">#define TM_B_IDCODE     0x1F    </span><span class="comment">/* id code mask (byte)          */</span>
00066
00067 <span class="preprocessor">#define MINMSGLEN       8       </span><span class="comment">/* minimum message length               */</span>
00068
00069 <span class="comment">/* Error Code Constants */</span>
00070
00071 <span class="preprocessor">#define ASN_OK            0      </span><span class="comment">/* normal completion status             */</span>
00072 <span class="preprocessor">#define ASN_OK_FRAG       2      </span><span class="comment">/* message fragment detected            */</span>
00073 <span class="preprocessor">#define ASN_E_BUFOVFLW   -1      </span><span class="comment">/* encode buffer overflow               */</span>
00074 <span class="preprocessor">#define ASN_E_ENDOFBUF   -2      </span><span class="comment">/* unexpected end of buffer on decode   */</span>
00075 <span class="preprocessor">#define ASN_E_IDNOTFOU   -3      </span><span class="comment">/* identifer not found                  */</span>
00076 <span class="preprocessor">#define ASN_E_INVOBJID   -4      </span><span class="comment">/* invalid object identifier            */</span>
00077 <span class="preprocessor">#define ASN_E_INVLEN     -5      </span><span class="comment">/* invalid field length                 */</span>
00078 <span class="preprocessor">#define ASN_E_INVENUM    -6      </span><span class="comment">/* enumerated value not in defined set  */</span>
00079 <span class="preprocessor">#define ASN_E_SETDUPL    -7      </span><span class="comment">/* duplicate element in set             */</span>
00080 <span class="preprocessor">#define ASN_E_SETMISRQ   -8      </span><span class="comment">/* missing required element in set      */</span>
00081 <span class="preprocessor">#define ASN_E_NOTINSET   -9      </span><span class="comment">/* element not part of set              */</span>
00082 <span class="preprocessor">#define ASN_E_SEQOVFLW   -10     </span><span class="comment">/* sequence of field overflow           */</span>
00083 <span class="preprocessor">#define ASN_E_INVOPT     -11     </span><span class="comment">/* invalid option encountered in choice */</span>
00084 <span class="preprocessor">#define ASN_E_NOMEM      -12     </span><span class="comment">/* no dynamic memory available          */</span>
00085 <span class="preprocessor">#define ASN_E_INVHEXS    -14     </span><span class="comment">/* invalid hex string                   */</span>
00086 <span class="preprocessor">#define ASN_E_INVBINS    -15     </span><span class="comment">/* invalid binary string                */</span>
00087 <span class="preprocessor">#define ASN_E_INVREAL    -16     </span><span class="comment">/* invalid real value                   */</span>
00088 <span class="preprocessor">#define ASN_E_STROVFLW   -17     </span><span class="comment">/* octet or bit string field overflow   */</span>
00089 <span class="preprocessor">#define ASN_E_BADVALUE   -18     </span><span class="comment">/* invalid value specification          */</span>
00090 <span class="preprocessor">#define ASN_E_UNDEFVAL   -19     </span><span class="comment">/* no def found for ref'd defined value */</span>
00091 <span class="preprocessor">#define ASN_E_UNDEFTYP   -20     </span><span class="comment">/* no def found for ref'd defined type  */</span>
00092 <span class="preprocessor">#define ASN_E_BADTAG     -21     </span><span class="comment">/* invalid tag value                    */</span>
00093 <span class="preprocessor">#define ASN_E_TOODEEP    -22     </span><span class="comment">/* nesting level is too deep            */</span>
00094 <span class="preprocessor">#define ASN_E_CONSVIO    -23     </span><span class="comment">/* value constraint violation           */</span>
00095 <span class="preprocessor">#define ASN_E_RANGERR    -24     </span><span class="comment">/* invalid range (lower &gt; upper)        */</span>
00096 <span class="preprocessor">#define ASN_E_ENDOFFILE  -25     </span><span class="comment">/* end of file on file decode           */</span>
00097 <span class="preprocessor">#define ASN_E_INVUTF8    -26     </span><span class="comment">/* invalid UTF-8 encoding               */</span>
00098 <span class="preprocessor">#define ASN_E_CONCMODF   -27     </span><span class="comment">/* Concurrent list modification         */</span>
00099 <span class="preprocessor">#define ASN_E_ILLSTATE   -28     </span><span class="comment">/* Illegal state error                  */</span>
00100 <span class="preprocessor">#define ASN_E_OUTOFBND   -29     </span><span class="comment">/* out of bounds (of array, etc)        */</span>
00101 <span class="preprocessor">#define ASN_E_INVPARAM   -30     </span><span class="comment">/* invalid parameter                    */</span>
00102 <span class="preprocessor">#define ASN_E_INVFORMAT  -31     </span><span class="comment">/* invalid time string format           */</span>
00103 <span class="preprocessor">#define ASN_E_NOTINIT    -32     </span><span class="comment">/* not initialized                      */</span>
00104 <span class="preprocessor">#define ASN_E_TOOBIG     -33     </span><span class="comment">/* value is too big for given data type */</span>
00105 <span class="preprocessor">#define ASN_E_INVCHAR    -34     </span><span class="comment">/* invalid character (not in char set)  */</span>
00106 <span class="preprocessor">#define ASN_E_XMLSTATE   -35     </span><span class="comment">/* XML state error                      */</span>
00107 <span class="preprocessor">#define ASN_E_XMLPARSE   -36     </span><span class="comment">/* XML parse error                      */</span>
00108 <span class="preprocessor">#define ASN_E_SEQORDER   -37     </span><span class="comment">/* SEQUENCE elements not in order       */</span>
00109 <span class="preprocessor">#define ASN_E_INVINDEX   -38     </span><span class="comment">/* invalid index for TC id              */</span>
00110 <span class="preprocessor">#define ASN_E_INVTCVAL   -39     </span><span class="comment">/* invalid value for TC field           */</span>
00111 <span class="preprocessor">#define ASN_E_FILNOTFOU  -40     </span><span class="comment">/* file not found                       */</span>
00112 <span class="preprocessor">#define ASN_E_FILEREAD   -41     </span><span class="comment">/* error occurred reading file          */</span>
00113 <span class="preprocessor">#define ASN_E_FILEWRITE  -42     </span><span class="comment">/* error occurred writing file          */</span>
00114 <span class="preprocessor">#define ASN_E_INVBASE64  -43     </span><span class="comment">/* invalid base64 encoding              */</span>
00115 <span class="preprocessor">#define ASN_E_INVSOCKET  -44     </span><span class="comment">/* invalid socket operation             */</span>
00116 <span class="preprocessor">#define ASN_E_XMLLIBNFOU -45     </span><span class="comment">/* XML library is not found             */</span>
00117 <span class="preprocessor">#define ASN_E_XMLLIBINV  -46     </span><span class="comment">/* XML library is invalid               */</span>
00118 <span class="preprocessor">#define ASN_E_NOTSUPP    -99     </span><span class="comment">/* non-supported ASN construct          */</span>
00119 <span class="preprocessor">#define ASN_K_INDEFLEN   -9999   </span><span class="comment">/* indefinite length message indicator  */</span>
00120
00121 <span class="comment">/* universal built-in type ID code value constants */</span>
00122
00123 <span class="preprocessor">#define ASN_ID_EOC      0       </span><span class="comment">/* end of contents              */</span>
00124 <span class="preprocessor">#define ASN_ID_BOOL     1       </span><span class="comment">/* boolean                      */</span>
00125 <span class="preprocessor">#define ASN_ID_INT      2       </span><span class="comment">/* integer                      */</span>
00126 <span class="preprocessor">#define ASN_ID_BITSTR   3       </span><span class="comment">/* bit string                   */</span>
00127 <span class="preprocessor">#define ASN_ID_OCTSTR   4       </span><span class="comment">/* byte (octet) string          */</span>
00128 <span class="preprocessor">#define ASN_ID_NULL     5       </span><span class="comment">/* null                         */</span>
00129 <span class="preprocessor">#define ASN_ID_OBJID    6       </span><span class="comment">/* object ID                    */</span>
00130 <span class="preprocessor">#define ASN_ID_OBJDSC   7       </span><span class="comment">/* object descriptor            */</span>
00131 <span class="preprocessor">#define ASN_ID_EXTERN   8       </span><span class="comment">/* external type                */</span>
00132 <span class="preprocessor">#define ASN_ID_REAL     9       </span><span class="comment">/* real                         */</span>
00133 <span class="preprocessor">#define ASN_ID_ENUM     10      </span><span class="comment">/* enumerated value             */</span>
00134 <span class="preprocessor">#define ASN_ID_EPDV     11      </span><span class="comment">/* EmbeddedPDV type             */</span>
00135 <span class="preprocessor">#define ASN_ID_RELOID   13      </span><span class="comment">/* relative object ID           */</span>
00136 <span class="preprocessor">#define ASN_ID_SEQ      16      </span><span class="comment">/* sequence, sequence of        */</span>
00137 <span class="preprocessor">#define ASN_ID_SET      17      </span><span class="comment">/* set, set of                  */</span>
00138
00139 <span class="preprocessor">#define ASN_SEQ_TAG     0x30    </span><span class="comment">/* SEQUENCE universal tag byte  */</span>
00140 <span class="preprocessor">#define ASN_SET_TAG     0x31    </span><span class="comment">/* SET universal tag byte       */</span>
00141
00142 <span class="comment">/* Restricted character string type ID's */</span>
00143
00144 <span class="preprocessor">#define ASN_ID_NumericString    18</span>
00145 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_PrintableString  19</span>
00146 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_TeletexString    20</span>
00147 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_T61String        ASN_ID_TeletexString</span>
00148 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_VideotexString   21</span>
00149 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_IA5String        22</span>
00150 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_UTCTime          23</span>
00151 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GeneralTime      24</span>
00152 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GraphicString    25</span>
00153 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_VisibleString    26</span>
00154 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GeneralString    27</span>
00155 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_UniversalString  28</span>
00156 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_BMPString        30</span>
00157 <span class="preprocessor"></span>
00158 <span class="comment">/* flag mask values */</span>
00159
00160 <span class="preprocessor">#define XM_SEEK         0x01    </span><span class="comment">/* seek match until found or end-of-buf */</span>
00161 <span class="preprocessor">#define XM_ADVANCE      0x02    </span><span class="comment">/* advance pointer to contents on match */</span>
00162 <span class="preprocessor">#define XM_DYNAMIC      0x04    </span><span class="comment">/* alloc dyn mem for decoded variable   */</span>
00163 <span class="preprocessor">#define XM_SKIP         0x08    </span><span class="comment">/* skip to next field after parsing tag */</span>
00164
00165 <span class="comment">/* Sizing Constants */</span>
00166
00167 <span class="preprocessor">#define ASN_K_MAXDEPTH  32      </span><span class="comment">/* maximum nesting depth for messages   */</span>
00168 <span class="preprocessor">#define ASN_K_MAXSUBIDS 128     </span><span class="comment">/* maximum sub-id's in an object ID     */</span>
00169 <span class="preprocessor">#define ASN_K_MAXENUM   100     </span><span class="comment">/* maximum enum values in an enum type  */</span>
00170 <span class="preprocessor">#define ASN_K_MAXERRP   5       </span><span class="comment">/* maximum error parameters             */</span>
00171 <span class="preprocessor">#define ASN_K_MAXERRSTK 8       </span><span class="comment">/* maximum levels on error ctxt stack   */</span>
00172 <span class="preprocessor">#define ASN_K_ENCBUFSIZ 16*1024 </span><span class="comment">/* dynamic encode buffer extent size    */</span>
00173 <span class="preprocessor">#define ASN_K_MEMBUFSEG 1024    </span><span class="comment">/* memory buffer extent size            */</span>
00174
00175 <span class="comment">/* Canonical character set definitions */</span>
00176
00177 <span class="preprocessor">#define NUM_ABITS  4</span>
00178 <span class="preprocessor"></span><span class="preprocessor">#define NUM_UBITS  4</span>
00179 <span class="preprocessor"></span><span class="preprocessor">#define NUM_CANSET \</span>
00180 <span class="preprocessor">" 0123456789"</span>
00181 <span class="preprocessor"></span>
00182 <span class="preprocessor">#define PRN_ABITS  8</span>
00183 <span class="preprocessor"></span><span class="preprocessor">#define PRN_UBITS  7</span>
00184 <span class="preprocessor"></span><span class="preprocessor">#define PRN_CANSET \</span>
00185 <span class="preprocessor">" '()+,-./0123456789:=?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>
00186 <span class="preprocessor"></span>
00187 <span class="preprocessor">#define VIS_ABITS  8</span>
00188 <span class="preprocessor"></span><span class="preprocessor">#define VIS_UBITS  7</span>
00189 <span class="preprocessor"></span><span class="preprocessor">#define VIS_CANSET \</span>
00190 <span class="preprocessor">" !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]"\</span>
00191 <span class="preprocessor">"^_`abcdefghijklmnopqrstuvwxyz{|}~"</span>
00192 <span class="preprocessor"></span>
00193 <span class="preprocessor">#define T61_ABITS  8</span>
00194 <span class="preprocessor"></span><span class="preprocessor">#define T61_UBITS  7</span>
00195 <span class="preprocessor"></span><span class="preprocessor">#define T61_CANSET \</span>
00196 <span class="preprocessor">" !\"%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]"\</span>
00197 <span class="preprocessor">"_abcdefghijklmnopqrstuvwxyz"</span>
00198 <span class="preprocessor"></span>
00199 <span class="preprocessor">#define IA5_ABITS  8</span>
00200 <span class="preprocessor"></span><span class="preprocessor">#define IA5_UBITS  7</span>
00201 <span class="preprocessor"></span><span class="preprocessor">#define IA5_CANSET \</span>
00202 <span class="preprocessor">"\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017"\</span>
00203 <span class="preprocessor">"\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"\</span>
00204 <span class="preprocessor">" !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]"\</span>
00205 <span class="preprocessor">"^_`abcdefghijklmnopqrstuvwxyz{|}~"</span>
00206 <span class="preprocessor"></span>
00207 <span class="preprocessor">#define IA5_RANGE1_LOWER 0</span>
00208 <span class="preprocessor"></span><span class="preprocessor">#define IA5_RANGE2_LOWER 0x5f</span>
00209 <span class="preprocessor"></span>
00210 <span class="preprocessor">#define GEN_ABITS  8</span>
00211 <span class="preprocessor"></span><span class="preprocessor">#define GEN_UBITS  7</span>
00212 <span class="preprocessor"></span><span class="preprocessor">#define GEN_CANSET \</span>
00213 <span class="preprocessor">"\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017"\</span>
00214 <span class="preprocessor">"\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"\</span>
00215 <span class="preprocessor">" !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"\</span>
00216 <span class="preprocessor">"`abcdefghijklmnopqrstuvwxyz{|}~\177\200\201\202\203\204\205\206\207"\</span>
00217 <span class="preprocessor">"\220\221\222\223\224\225\226\227\230\231\232\233\234\235\236\237"\</span>
00218 <span class="preprocessor">"\240\241\242\243\244\245\246\247\250\251\252\253\254\255\256\257"\</span>
00219 <span class="preprocessor">"\260\261\262\263\264\265\266\267\270\271\272\273\274\275\276\277"\</span>
00220 <span class="preprocessor">"\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317"\</span>
00221 <span class="preprocessor">"\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337"\</span>
00222 <span class="preprocessor">"\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357"\</span>
00223 <span class="preprocessor">"\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377"</span>
00224 <span class="preprocessor"></span>
00225 <span class="preprocessor">#define BMP_ABITS  16</span>
00226 <span class="preprocessor"></span><span class="preprocessor">#define BMP_UBITS  16</span>
00227 <span class="preprocessor"></span><span class="preprocessor">#define BMP_FIRST  0</span>
00228 <span class="preprocessor"></span><span class="preprocessor">#define BMP_LAST   0xffff</span>
00229 <span class="preprocessor"></span>
00230 <span class="preprocessor">#define UCS_ABITS  32</span>
00231 <span class="preprocessor"></span><span class="preprocessor">#define UCS_UBITS  32</span>
00232 <span class="preprocessor"></span><span class="preprocessor">#define UCS_FIRST  0</span>
00233 <span class="preprocessor"></span><span class="preprocessor">#define UCS_LAST   0xfffffffful</span>
00234 <span class="preprocessor"></span>
00235 <span class="comment">/* ASN.1 Primitive Type Definitions */</span>
00236
00237 <span class="keyword">typedef</span> <span class="keywordtype">char</span>            ASN1CHAR;
00238 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   ASN1OCTET;
00239 <span class="keyword">typedef</span> ASN1OCTET       ASN1BOOL;
00240 <span class="keyword">typedef</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span>     ASN1INT8;
00241 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   ASN1UINT8;
00242 <span class="keyword">typedef</span> <span class="keywordtype">int</span>             ASN1INT;
00243 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    ASN1UINT;
00244 <span class="keyword">typedef</span> ASN1INT         ASN1ENUM;
00245 <span class="keyword">typedef</span> <span class="keywordtype">double</span>          ASN1REAL;
00246
00247 <span class="keyword">typedef</span> <span class="keywordtype">short</span>           ASN1SINT;
00248 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>  ASN1USINT;
00249 <span class="keyword">typedef</span> ASN1UINT        ASN1TAG;
00250 <span class="preprocessor">#define ASN1TAG_LSHIFT  24</span>
00251 <span class="preprocessor"></span><span class="keyword">typedef</span> ASN1USINT       ASN116BITCHAR;
00252 <span class="keyword">typedef</span> ASN1UINT        ASN132BITCHAR;
00253 <span class="keyword">typedef</span> <span class="keywordtype">void</span>*           ASN1ANY;
00254
00255 <span class="preprocessor">#define ASN1UINT_MAX    4294967295U</span>
00256 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT_MAX     ((ASN1INT)2147483647L)</span>
00257 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT_MIN     ((ASN1INT)(-ASN1INT_MAX-1))</span>
00258 <span class="preprocessor"></span>
00259
00260 <span class="preprocessor">#ifndef ASN1INT64</span>
00261 <span class="preprocessor"></span>
00262 <span class="preprocessor">#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(__WATCOMC__) || \</span>
00263 <span class="preprocessor">defined(_WIN32)</span>
00264 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT64 __int64</span>
00265 <span class="preprocessor"></span>
00266 <span class="preprocessor">#elif defined(__IBMC__) || defined(__GNUC__) || defined(__SUNPRO_C) || \</span>
00267 <span class="preprocessor">defined(__SUNPRO_CC) || defined(__CC_ARM) || \</span>
00268 <span class="preprocessor">defined(__HPUX_CC__) || defined(__HP_aCC) </span>
00269 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT64 long long</span>
00270 <span class="preprocessor"></span>
00271 <span class="preprocessor">#else  </span><span class="comment">/* !MSC_VER &amp;&amp; !__IBMC__ etc */</span>
00272 <span class="preprocessor">#define ASN1INT64 long</span>
00273 <span class="preprocessor"></span>
00274 <span class="preprocessor">#endif</span>
00275 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* ASN1INT64 */</span>
00276
00277 <span class="preprocessor">#ifndef FALSE</span>
00278 <span class="preprocessor"></span><span class="preprocessor">#define FALSE           0</span>
00279 <span class="preprocessor"></span><span class="preprocessor">#define TRUE            1</span>
00280 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00281 <span class="preprocessor"></span>
00282 <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* object identifier */</span>
00283    ASN1UINT     numids;
00284    ASN1UINT     subid[ASN_K_MAXSUBIDS];
00285 } ASN1OBJID;
00286
00287 <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic octet string structure */</span>
00288    ASN1UINT     numocts;
00289    ASN1OCTET    data[1];
00290 } ASN1OctStr;
00291
00292 <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic octet string structure (dynamic) */</span>
00293    ASN1UINT     numocts;
00294    <span class="keyword">const</span> ASN1OCTET* data;
00295 } ASN1DynOctStr;
00296
00297 <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic bit string structure (dynamic) */</span>
00298    ASN1UINT     numbits;
00299    <span class="keyword">const</span> ASN1OCTET* data;
00300 } ASN1DynBitStr;
00301
00302 <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* generic sequence of structure        */</span>
00303    ASN1UINT     n;
00304    <span class="keywordtype">void</span>*        elem;
00305 } ASN1SeqOf;
00306
00307 <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* sequence of OCTET STRING             */</span>
00308    ASN1UINT     n;
00309    ASN1DynOctStr* elem;
00310 } ASN1SeqOfOctStr;
00311
00312 <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* generic open type data structure     */</span>
00313    ASN1UINT     numocts;
00314    <span class="keyword">const</span> ASN1OCTET* data;
00315 } ASN1OpenType;
00316
00317 <span class="comment">/* ASN.1 useful type definitions */</span>
00318
00319 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00320    ASN1UINT       nchars;
00321    ASN116BITCHAR* data;
00322 } Asn116BitCharString;
00323
00324 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00325    ASN1UINT       nchars;
00326    ASN132BITCHAR* data;
00327 } Asn132BitCharString;
00328
00329 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GeneralizedTime;
00330 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GeneralString;
00331 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GraphicString;
00332 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1IA5String;
00333 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1ISO646String;
00334 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1NumericString;
00335 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1ObjectDescriptor;
00336 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1PrintableString;
00337 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1TeletexString;
00338 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1T61String;
00339 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1UTCTime;
00340 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1UTF8String;
00341 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1VideotexString;
00342 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1VisibleString;
00343
00344 <span class="keyword">typedef</span> Asn116BitCharString ASN1BMPString;
00345 <span class="keyword">typedef</span> Asn132BitCharString ASN1UniversalString;
00346
00347 <span class="comment">/* ASN.1 constrained string structures */</span>
00348
00349 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00350    <span class="keywordtype">int</span>          nchars;
00351    <span class="keywordtype">char</span>         data[255];
00352 } Asn1CharArray;
00353
00354 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00355    Asn1CharArray charSet;
00356    <span class="keyword">const</span> <span class="keywordtype">char</span>* canonicalSet;
00357    <span class="keywordtype">int</span>          canonicalSetSize;
00358    <span class="keywordtype">unsigned</span>     canonicalSetBits;
00359    <span class="keywordtype">unsigned</span>     charSetUnalignedBits;
00360    <span class="keywordtype">unsigned</span>     charSetAlignedBits;
00361 } Asn1CharSet;
00362
00363 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00364    Asn116BitCharString charSet;
00365    ASN1USINT    firstChar, lastChar;
00366    <span class="keywordtype">unsigned</span>     unalignedBits;
00367    <span class="keywordtype">unsigned</span>     alignedBits;
00368 } Asn116BitCharSet;
00369
00370 <span class="keyword">typedef</span> <span class="keyword">struct </span>_SListNode {
00371    <span class="keywordtype">void</span>* data;
00372    <span class="keyword">struct </span>_SListNode* next;
00373 } SListNode;
00374
00375 <span class="keyword">struct </span>OOCTXT;
00376
00377 <span class="keyword">typedef</span> <span class="keyword">struct </span>_SList {
00378    ASN1UINT count;
00379    SListNode* head;
00380    SListNode* tail;
00381    <span class="keyword">struct </span>OOCTXT* pctxt;
00382 } SList;
00383
00384 <span class="comment">/* Doubly-linked list */</span>
00385
00386 <span class="keyword">typedef</span> <span class="keyword">struct </span>_DListNode {
00387    <span class="keywordtype">void</span>* data;
00388    <span class="keyword">struct </span>_DListNode* next;
00389    <span class="keyword">struct </span>_DListNode* prev;
00390 } DListNode;
00391
00392 <span class="keyword">typedef</span> <span class="keyword">struct </span>_DList {
00393    ASN1UINT count;
00394    DListNode* head;
00395    DListNode* tail;
00396 } DList;
00397
00398 <span class="comment">/* ASN.1 size constraint structure */</span>
00399
00400 <span class="keyword">typedef</span> <span class="keyword">struct </span>_Asn1SizeCnst {
00401    ASN1BOOL     extended;
00402    ASN1UINT     lower;
00403    ASN1UINT     upper;
00404    <span class="keyword">struct </span>_Asn1SizeCnst* next;
00405 } Asn1SizeCnst;
00406
00407 <span class="comment">/* ASN.1 encode/decode buffer info structure */</span>
00408
00409 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00410    ASN1OCTET*   data;           <span class="comment">/* pointer to start of data buffer      */</span>
00411    ASN1UINT     byteIndex;      <span class="comment">/* byte index                           */</span>
00412    ASN1UINT     size;           <span class="comment">/* current buffer size                  */</span>
00413    ASN1SINT     bitOffset;      <span class="comment">/* current bit offset (8 - 1)           */</span>
00414    ASN1BOOL     dynamic;        <span class="comment">/* is buffer dynamic?                   */</span>
00415 } ASN1BUFFER;
00416
00417 <span class="comment">/* This structure is used to save the current state of the buffer */</span>
00418
00419 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00420    ASN1UINT     byteIndex;      <span class="comment">/* byte index                           */</span>
00421    ASN1SINT     bitOffset;      <span class="comment">/* current bit offset (8 - 1)           */</span>
00422    ASN1USINT    flags;          <span class="comment">/* flag bits                            */</span>
00423 } ASN1BUFSAVE;
00424
00425 <span class="comment">/* ASN.1 run-time error info structures */</span>
00426
00427 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00428    <span class="keyword">const</span> <span class="keywordtype">char</span>* module;
00429    <span class="keywordtype">int</span>          lineno;
00430 } ASN1ErrLocn;
00431
00432 <span class="keyword">typedef</span> <span class="keyword">struct </span>{
00433    ASN1ErrLocn  stack[ASN_K_MAXERRSTK];
00434    <span class="keywordtype">int</span>          stkx;
00435    <span class="keywordtype">int</span>          status;
00436    <span class="keywordtype">int</span>          parmcnt;
00437    <span class="keyword">const</span> <span class="keywordtype">char</span>* parms[ASN_K_MAXERRP];
00438 } ASN1ErrInfo;
00439
00440 <span class="preprocessor">#define XM_K_MEMBLKSIZ  (4*1024)</span>
00441 <span class="preprocessor"></span>
00442 <span class="comment">/* Flag mask constant values */</span>
00443
00444 <span class="preprocessor">#define ASN1DYNCTXT     0x8000</span>
00445 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INDEFLEN    0x4000</span>
00446 <span class="preprocessor"></span><span class="preprocessor">#define ASN1TRACE       0x2000</span>
00447 <span class="preprocessor"></span><span class="preprocessor">#define ASN1LASTEOC     0x1000</span>
00448 <span class="preprocessor"></span><span class="preprocessor">#define ASN1FASTCOPY    0x0800  </span><span class="comment">/* turns on the "fast copy" mode        */</span>
00449 <span class="preprocessor">#define ASN1CONSTAG     0x0400  </span><span class="comment">/* form of last parsed tag              */</span>
00450 <span class="preprocessor">#define ASN1CANXER      0x0200  </span><span class="comment">/* canonical XER                        */</span>
00451 <span class="preprocessor">#define ASN1SAVEBUF     0x0100  </span><span class="comment">/* do not free dynamic encode buffer    */</span>
00452 <span class="preprocessor">#define ASN1OPENTYPE    0x0080  </span><span class="comment">/* item is an open type field           */</span>
00453
00454 <span class="comment">/* ASN.1 encode/decode context block structure */</span>
00455
00456 <span class="keyword">typedef</span> <span class="keyword">struct </span>OOCTXT {         <span class="comment">/* context block                        */</span>
00457    <span class="keywordtype">void</span>*        pMsgMemHeap;    <span class="comment">/* internal message memory heap         */</span>
00458    <span class="keywordtype">void</span>*        pTypeMemHeap;   <span class="comment">/* memory heap                          */</span>
00459    ASN1BUFFER   buffer;         <span class="comment">/* data buffer                          */</span>
00460    ASN1ErrInfo  errInfo;        <span class="comment">/* run-time error info                  */</span>
00461    Asn1SizeCnst* pSizeConstraint;  <span class="comment">/* Size constraint list              */</span>
00462    <span class="keyword">const</span> <span class="keywordtype">char</span>* pCharSet;   <span class="comment">/* String of permitted characters       */</span>
00463    SList  evtHndlrList;   <span class="comment">/* Event handler object list            */</span>
00464    ASN1USINT    flags;          <span class="comment">/* flag bits                            */</span>
00465    ASN1OCTET    spare[2];
00466 } OOCTXT;
00467
00468 <span class="comment">/* macros and function prototypes */</span>
00469
00470 <span class="preprocessor">#ifndef ASN1MAX</span>
00471 <span class="preprocessor"></span><span class="preprocessor">#define ASN1MAX(a,b)        (((a)&gt;(b))?(a):(b))</span>
00472 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00473 <span class="preprocessor"></span>
00474 <span class="preprocessor">#ifndef ASN1MIN</span>
00475 <span class="preprocessor"></span><span class="preprocessor">#define ASN1MIN(a,b)        (((a)&lt;(b))?(a):(b))</span>
00476 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00477 <span class="preprocessor"></span>
<a name="l00497"></a><a class="code" href="group__mem.shtml#ga0">00497</a> <span class="preprocessor">#define ALLOC_ASN1ARRAY(pctxt,pseqof,type) do {\</span>
00498 <span class="preprocessor">if (sizeof(type)*(pseqof)-&gt;n &lt; (pseqof)-&gt;n) return ASN_E_NOMEM; \</span>
00499 <span class="preprocessor">if (((pseqof)-&gt;elem = (type*) memHeapAlloc \</span>
00500 <span class="preprocessor">(&amp;(pctxt)-&gt;pTypeMemHeap, sizeof(type)*(pseqof)-&gt;n)) == 0) return ASN_E_NOMEM; \</span>
00501 <span class="preprocessor">} while (0)</span>
00502 <span class="preprocessor"></span>
<a name="l00510"></a><a class="code" href="group__mem.shtml#ga1">00510</a> <span class="preprocessor">#define ALLOC_ASN1ELEM(pctxt,type) \</span>
00511 <span class="preprocessor">(type*) memHeapAllocZ (&amp;(pctxt)-&gt;pTypeMemHeap, sizeof(type))</span>
00512 <span class="preprocessor"></span>
00513 <span class="preprocessor">#define ALLOC_ASN1ELEMDNODE(pctxt,type) \</span>
00514 <span class="preprocessor">(type*) (((char*)memHeapAllocZ (&amp;(pctxt)-&gt;pTypeMemHeap, sizeof(type) + \</span>
00515 <span class="preprocessor">sizeof(DListNode))) + sizeof(DListNode))</span>
00516 <span class="preprocessor"></span>
<a name="l00527"></a><a class="code" href="group__mem.shtml#ga3">00527</a> <span class="preprocessor">#define ASN1MALLOC(pctxt,nbytes) \</span>
00528 <span class="preprocessor">memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap, nbytes)</span>
00529 <span class="preprocessor"></span>
<a name="l00538"></a><a class="code" href="group__mem.shtml#ga4">00538</a> <span class="preprocessor">#define ASN1MEMFREE(pctxt) \</span>
00539 <span class="preprocessor">memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
00540 <span class="preprocessor"></span>
<a name="l00552"></a><a class="code" href="group__mem.shtml#ga5">00552</a> <span class="preprocessor">#define ASN1MEMFREEPTR(pctxt,pmem)  \</span>
00553 <span class="preprocessor">memHeapFreePtr(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)pmem)</span>
00554 <span class="preprocessor"></span>
00558 <span class="preprocessor">#define ASN1BUFCUR(cp)          (cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</span>
00559 <span class="preprocessor"></span><span class="preprocessor">#define ASN1BUFPTR(cp)          &amp;(cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</span>
00560 <span class="preprocessor"></span>
00561 <span class="preprocessor">#ifdef __cplusplus</span>
00562 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">"C"</span> {
00563 <span class="preprocessor">#endif</span>
00564 <span class="preprocessor"></span>
00565 <span class="preprocessor">#ifndef EXTERN</span>
00566 <span class="preprocessor"></span><span class="preprocessor">#ifdef ASN1DLL</span>
00567 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN __declspec(dllexport)</span>
00568 <span class="preprocessor"></span><span class="preprocessor">#elif defined (USEASN1DLL)</span>
00569 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN __declspec(dllimport)</span>
00570 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00571 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN</span>
00572 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* ASN1DLL */</span>
00573 <span class="preprocessor">#endif </span><span class="comment">/* EXTERN */</span>
00574
00575 <span class="preprocessor">#ifndef _NO_MALLOC</span>
00576 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       malloc(nbytes)</span>
00577 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            free(ptr)</span>
00578 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00579 <span class="preprocessor"></span>
00580 <span class="preprocessor">#ifdef _NO_THREADS</span>
00581 <span class="preprocessor"></span><span class="keyword">extern</span> EXTERN OOCTXT g_ctxt;
00582
00583 <span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       memAlloc(&amp;g_ctxt,(nbytes))</span>
00584 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            memFreePtr(&amp;g_ctxt,(ptr))</span>
00585 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00586 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       (void*)0</span>
00587 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            (void*)0</span>
00588 <span class="preprocessor"></span>
00589 <span class="preprocessor">#endif </span><span class="comment">/* _NO_THREADS */</span>
00590 <span class="preprocessor">#endif </span><span class="comment">/* _NO_MALLOC */</span>
00591
00592 <span class="preprocessor">#define ASN1CRTMALLOC memHeapAlloc</span>
00593 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE   ASN1MEMFREEPTR</span>
00594 <span class="preprocessor"></span>
00595 <span class="comment">/* Function prototypes */</span>
00596
00597 <span class="preprocessor">#define DE_INCRBITIDX(pctxt) \</span>
00598 <span class="preprocessor">((--(pctxt)-&gt;buffer.bitOffset &lt; 0) ? \</span>
00599 <span class="preprocessor">((++(pctxt)-&gt;buffer.byteIndex &gt;= (pctxt)-&gt;buffer.size) ? ASN_E_ENDOFBUF : \</span>
00600 <span class="preprocessor">((pctxt)-&gt;buffer.bitOffset = 7, ASN_OK)) : ASN_OK)</span>
00601 <span class="preprocessor"></span>
00602
00603 <span class="preprocessor">#define DE_BIT(pctxt,pvalue) \</span>
00604 <span class="preprocessor">((DE_INCRBITIDX (pctxt) != ASN_OK) ? ASN_E_ENDOFBUF : ((pvalue) ? \</span>
00605 <span class="preprocessor">((*(pvalue) = (((pctxt)-&gt;buffer.data[(pctxt)-&gt;buffer.byteIndex]) &amp; \</span>
00606 <span class="preprocessor">(1 &lt;&lt; (pctxt)-&gt;buffer.bitOffset)) != 0), ASN_OK) : ASN_OK ))</span>
00607 <span class="preprocessor"></span>
00608
00609 <span class="preprocessor">#define encodeIA5String(pctxt,value,permCharSet) \</span>
00610 <span class="preprocessor">encodeConstrainedStringEx (pctxt, value, permCharSet, 8, 7, 7)</span>
00611 <span class="preprocessor"></span>
00612 <span class="preprocessor">#define encodeGeneralizedTime   encodeIA5String</span>
00613 <span class="preprocessor"></span>
00614 <span class="preprocessor">#define decodeIA5String(pctxt,pvalue,permCharSet) \</span>
00615 <span class="preprocessor">decodeConstrainedStringEx (pctxt, pvalue, permCharSet, 8, 7, 7)</span>
00616 <span class="preprocessor"></span>
00617 <span class="preprocessor">#define decodeGeneralizedTime   decodeIA5String</span>
00618 <span class="preprocessor"></span>
00619 <span class="comment">/* run-time error and diagnostic functions */</span>
00620
00621 <span class="comment">/* Context management functions */</span>
00622
00655 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cmfun.shtml#ga0">initContextBuffer</a>
00656 (OOCTXT* pctxt, <span class="keyword">const</span> ASN1OCTET* bufaddr, ASN1UINT bufsiz);
00657
00671 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cmfun.shtml#ga1">initContext</a> (OOCTXT* pctxt);
00672
00680 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__cmfun.shtml#ga2">freeContext</a> (OOCTXT* pctxt);
00681
00690 EXTERN OOCTXT* <a class="code" href="group__cmfun.shtml#ga3">newContext</a> (<span class="keywordtype">void</span>);
00691
00692 EXTERN <span class="keywordtype">void</span> copyContext (OOCTXT* pdest, OOCTXT* psrc);
00693 EXTERN <span class="keywordtype">int</span>  initSubContext (OOCTXT* pctxt, OOCTXT* psrc);
00694 EXTERN <span class="keywordtype">void</span> setCtxtFlag (OOCTXT* pctxt, ASN1USINT mask);
00695 EXTERN <span class="keywordtype">void</span> clearCtxtFlag (OOCTXT* pctxt, ASN1USINT mask);
00696
00697 EXTERN <span class="keywordtype">int</span> setPERBuffer
00698 (OOCTXT* pctxt, ASN1OCTET* bufaddr, ASN1UINT bufsiz, ASN1BOOL aligned);
00699
00700 EXTERN <span class="keywordtype">int</span> setPERBufferUsingCtxt (OOCTXT* pTarget, OOCTXT* pSource);
00701
00702 <span class="preprocessor">#define ZEROCONTEXT(pctxt) memset(pctxt,0,sizeof(OOCTXT))</span>
00703 <span class="preprocessor"></span>
00731 EXTERN DListNode* <a class="code" href="group__llfuns.shtml#ga0">dListAppend</a> (OOCTXT* pctxt, DList* pList, <span class="keywordtype">void</span>* pData);
00732
00733 EXTERN DListNode* dListAppendNode (OOCTXT* pctxt, DList* pList, <span class="keywordtype">void</span>* pData);
00734 EXTERN DListNode* dListFindByIndex (DList* pList, <span class="keywordtype">int</span> index);
00750 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga3">dListInit</a> (DList* pList);
00751
00765 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga4">dListFreeNodes</a> (OOCTXT* pctxt, DList* pList);
00766
00780 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga5">dListFreeAll</a> (OOCTXT* pctxt, DList* pList);
00781
00794 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__llfuns.shtml#ga6">dListRemove</a> (DList* pList, DListNode* node);
00795
00796
00803 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga7">sListInit</a> (SList* pList);
00813 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga8">sListInitEx</a> (OOCTXT* pctxt, SList* pList);
00821 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga9">sListFree</a> (SList* pList);
00822
00829 EXTERN SList* <a class="code" href="group__llfuns.shtml#ga10">sListCreate</a> (<span class="keywordtype">void</span>);
00830
00841 EXTERN SList* <a class="code" href="group__llfuns.shtml#ga11">sListCreateEx</a> (OOCTXT* pctxt);
00842
00850 EXTERN SListNode* <a class="code" href="group__llfuns.shtml#ga12">sListAppend</a> (SList* pList, <span class="keywordtype">void</span>* pData);
00851
00859 EXTERN ASN1BOOL <a class="code" href="group__llfuns.shtml#ga13">sListFind</a> (SList* pList, <span class="keywordtype">void</span>* pData);
00860
00869 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__llfuns.shtml#ga14">sListRemove</a> (SList* pList, <span class="keywordtype">void</span>* pData);
00870
00894 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga0">errAddIntParm</a> (ASN1ErrInfo* pErrInfo, <span class="keywordtype">int</span> errParm);
00895
00910 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga1">errAddStrParm</a> (ASN1ErrInfo* pErrInfo,
00911                             <span class="keyword">const</span> <span class="keywordtype">char</span>* errprm_p);
00912
00927 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga2">errAddUIntParm</a> (ASN1ErrInfo* pErrInfo, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> errParm);
00928
00929
00930 EXTERN <span class="keywordtype">int</span> errCopyData (ASN1ErrInfo* pSrcErrInfo,
00931                         ASN1ErrInfo* pDestErrInfo);
00932
00946 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__errfp.shtml#ga4">errFreeParms</a> (ASN1ErrInfo* pErrInfo);
00947
00948
00949 EXTERN <span class="keywordtype">char</span>* errFmtMsg (ASN1ErrInfo* pErrInfo, <span class="keywordtype">char</span>* bufp);
00950
00956 EXTERN <span class="keywordtype">char</span>* <a class="code" href="group__errfp.shtml#ga6">errGetText</a> (OOCTXT* pctxt);
00957
00970 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__errfp.shtml#ga7">errPrint</a> (ASN1ErrInfo* pErrInfo);
00971
00981 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga8">errReset</a> (ASN1ErrInfo* pErrInfo);
00982
01006 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga9">errSetData</a> (ASN1ErrInfo* pErrInfo, <span class="keywordtype">int</span> status,
01007                        <span class="keyword">const</span> <span class="keywordtype">char</span>* module, <span class="keywordtype">int</span> lno);
01008
01009 <span class="preprocessor">#ifndef _COMPACT</span>
01010 <span class="preprocessor"></span><span class="preprocessor">#define LOG_ASN1ERR(ctxt,stat) \</span>
01011 <span class="preprocessor">errSetData(&amp;(ctxt)-&gt;errInfo,stat,__FILE__,__LINE__)</span>
01012 <span class="preprocessor"></span><span class="preprocessor">#else</span>
01013 <span class="preprocessor"></span><span class="preprocessor">#define LOG_ASN1ERR(ctxt,stat) \</span>
01014 <span class="preprocessor">((ctxt)-&gt;errInfo.status = stat, stat)</span>
01015 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
01016 <span class="preprocessor"></span>
01017
01018
01019 <span class="preprocessor">#define LOG_ASN1ERR_AND_FREE(pctxt,stat,lctxt) \</span>
01020 <span class="preprocessor">freeContext ((lctxt)), LOG_ASN1ERR(pctxt, stat)</span>
01021 <span class="preprocessor"></span>
01025 <span class="preprocessor">#define RT_MH_DONTKEEPFREE 0x1</span>
01026 <span class="preprocessor"></span>
01027 <span class="preprocessor">#define OSRTMH_PROPID_DEFBLKSIZE   1</span>
01028 <span class="preprocessor"></span><span class="preprocessor">#define OSRTMH_PROPID_SETFLAGS     2</span>
01029 <span class="preprocessor"></span><span class="preprocessor">#define OSRTMH_PROPID_CLEARFLAGS   3</span>
01030 <span class="preprocessor"></span>
01031 <span class="preprocessor">#define OSRTMH_PROPID_USER         10</span>
01032 <span class="preprocessor"></span>
<a name="l01046"></a><a class="code" href="group__rtmem.shtml#ga79">01046</a> <span class="preprocessor">#define memAlloc(pctxt,nbytes) \</span>
01047 <span class="preprocessor">memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</span>
01048 <span class="preprocessor"></span>
<a name="l01058"></a><a class="code" href="group__rtmem.shtml#ga80">01058</a> <span class="preprocessor">#define memAllocZ(pctxt,nbytes) \</span>
01059 <span class="preprocessor">memHeapAllocZ(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</span>
01060 <span class="preprocessor"></span>
<a name="l01075"></a><a class="code" href="group__rtmem.shtml#ga81">01075</a> <span class="preprocessor">#define memRealloc(pctxt,mem_p,nbytes) \</span>
01076 <span class="preprocessor">memHeapRealloc(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p, nbytes)</span>
01077 <span class="preprocessor"></span>
<a name="l01089"></a><a class="code" href="group__rtmem.shtml#ga82">01089</a> <span class="preprocessor">#define memFreePtr(pctxt,mem_p) \</span>
01090 <span class="preprocessor">if (memHeapCheckPtr (&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p)) \</span>
01091 <span class="preprocessor">memHeapFreePtr(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p)</span>
01092 <span class="preprocessor"></span>
<a name="l01101"></a><a class="code" href="group__rtmem.shtml#ga83">01101</a> <span class="preprocessor">#define memFree(pctxt) \</span>
01102 <span class="preprocessor">memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
01103 <span class="preprocessor"></span>
<a name="l01118"></a><a class="code" href="group__rtmem.shtml#ga84">01118</a> <span class="preprocessor">#define memReset(pctxt) \</span>
01119 <span class="preprocessor">memHeapReset(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
01120 <span class="preprocessor"></span>
01121 <span class="comment">/* Alias for __cdecl modifier; if __cdecl keyword is not supported, </span>
01122 <span class="comment"> * redefine it as empty macro. */</span>
01123
01124 <span class="preprocessor">#if !defined(OSCDECL)</span>
01125 <span class="preprocessor"></span><span class="preprocessor">#if defined(_MSC_VER) || defined(__BORLANDC__)</span>
01126 <span class="preprocessor"></span><span class="preprocessor">#define OSCDECL __cdecl</span>
01127 <span class="preprocessor"></span><span class="preprocessor">#else</span>
01128 <span class="preprocessor"></span><span class="preprocessor">#define OSCDECL</span>
01129 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
01130 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* OSCDECL */</span>
01131
01132 <span class="comment">/* Pointers to C Run-Time memory allocation functions *</span>
01133 <span class="comment"> * (See memSetAllocFuncs)                           */</span>
01134
01135 <span class="keyword">typedef</span> <span class="keywordtype">void</span> *(OSCDECL *OSMallocFunc ) (size_t size);
01136 <span class="keyword">typedef</span> <span class="keywordtype">void</span> *(OSCDECL *OSReallocFunc) (<span class="keywordtype">void</span> *ptr, size_t size);
01137 <span class="keyword">typedef</span> void  (OSCDECL *OSFreeFunc   ) (<span class="keywordtype">void</span> *ptr);
01138
01139 EXTERN <span class="keywordtype">void</span>  memHeapAddRef (<span class="keywordtype">void</span>** ppvMemHeap);
01140 EXTERN <span class="keywordtype">void</span>* memHeapAlloc (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">int</span> nbytes);
01141 EXTERN <span class="keywordtype">void</span>* memHeapAllocZ (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">int</span> nbytes);
01142 EXTERN <span class="keywordtype">int</span>   memHeapCheckPtr (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p);
01143 EXTERN <span class="keywordtype">int</span>   memHeapCreate (<span class="keywordtype">void</span>** ppvMemHeap);
01144 EXTERN <span class="keywordtype">void</span>  memHeapFreeAll (<span class="keywordtype">void</span>** ppvMemHeap);
01145 EXTERN <span class="keywordtype">void</span>  memHeapFreePtr (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p);
01146 EXTERN <span class="keywordtype">void</span>* memHeapRealloc (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p, <span class="keywordtype">int</span> nbytes_);
01147 EXTERN <span class="keywordtype">void</span>  memHeapRelease (<span class="keywordtype">void</span>** ppvMemHeap);
01148 EXTERN <span class="keywordtype">void</span>  memHeapReset (<span class="keywordtype">void</span>** ppvMemHeap);
01149
01150 EXTERN <span class="keywordtype">void</span>* memHeapMarkSaved
01151 (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keyword">const</span> <span class="keywordtype">void</span>* mem_p, ASN1BOOL saved);
01152
01153 EXTERN <span class="keywordtype">void</span>  memHeapSetProperty
01154 (<span class="keywordtype">void</span>** ppvMemHeap, ASN1UINT propId, <span class="keywordtype">void</span>* pProp);
01155
01156
01172 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__rtmem.shtml#ga15">memSetAllocFuncs</a> (OSMallocFunc malloc_func,
01173                                OSReallocFunc realloc_func,
01174                                OSFreeFunc free_func);
01175
01176 EXTERN <span class="keywordtype">void</span>  memFreeOpenSeqExt (OOCTXT* pctxt, DList *pElemList);
01177
01178 <span class="comment">/*</span>
01179 <span class="comment"> * This function sets flags to a heap. May be used to control the heap's</span>
01180 <span class="comment"> * behavior.</span>
01181 <span class="comment"> *</span>
01182 <span class="comment"> * @param pctxt        Pointer to a memory block structure that contains the</span>
01183 <span class="comment"> *                     list of dynamic memory block maintained by these</span>
01184 <span class="comment"> *                     functions.</span>
01185 <span class="comment"> * @param flags        The flags.</span>
01186 <span class="comment"> */</span>
01187 EXTERN <span class="keywordtype">void</span>  memHeapSetFlags (OOCTXT* pctxt, ASN1UINT flags);
01188
01189 <span class="comment">/*</span>
01190 <span class="comment"> * This function clears memory heap flags.</span>
01191 <span class="comment"> *</span>
01192 <span class="comment"> * @param pctxt        Pointer to a memory block structure that contains the</span>
01193 <span class="comment"> *                     list of dynamic memory block maintained by these</span>
01194 <span class="comment"> *                     functions.</span>
01195 <span class="comment"> * @param flags        The flags</span>
01196 <span class="comment"> */</span>
01197 EXTERN <span class="keywordtype">void</span>  memHeapClearFlags (OOCTXT* pctxt, ASN1UINT flags);
01198
01212 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__rtmem.shtml#ga19">memHeapSetDefBlkSize</a> (OOCTXT* pctxt, ASN1UINT blkSize);
01213
01219 EXTERN ASN1UINT <a class="code" href="group__rtmem.shtml#ga20">memHeapGetDefBlkSize</a> (OOCTXT* pctxt);
01220
01221 <span class="preprocessor">#ifdef _STATIC_HEAP</span>
01222 <span class="preprocessor"></span>EXTERN <span class="keywordtype">void</span> memSetStaticBuf (<span class="keywordtype">void</span>* memHeapBuf, ASN1UINT blkSize);
01223 <span class="preprocessor">#endif</span>
01224 <span class="preprocessor"></span>
01225 <span class="comment">/* PER encode/decode related items */</span>
01226
01227 <span class="preprocessor">#define INCRBITIDX(pctxt) \</span>
01228 <span class="preprocessor">((--(pctxt)-&gt;buffer.bitOffset &lt; 0) ? \</span>
01229 <span class="preprocessor">((++(pctxt)-&gt;buffer.byteIndex &gt;= (pctxt)-&gt;buffer.size) ? ASN_E_ENDOFBUF : \</span>
01230 <span class="preprocessor">((pctxt)-&gt;buffer.bitOffset = 7, ASN_OK)) : ASN_OK)</span>
01231 <span class="preprocessor"></span>
01232 <span class="preprocessor">#define DECODEBIT(pctxt,pvalue) \</span>
01233 <span class="preprocessor">((INCRBITIDX (pctxt) != ASN_OK) ? ASN_E_ENDOFBUF : ((pvalue) ? \</span>
01234 <span class="preprocessor">((*(pvalue) = (((pctxt)-&gt;buffer.data[(pctxt)-&gt;buffer.byteIndex]) &amp; \</span>
01235 <span class="preprocessor">(1 &lt;&lt; (pctxt)-&gt;buffer.bitOffset)) != 0), ASN_OK) : ASN_OK ))</span>
01236 <span class="preprocessor"></span>
01237 <span class="comment">/*</span>
01238 <span class="comment">#define SETCHARSET(csetvar, canset, abits, ubits) \</span>
01239 <span class="comment">csetvar.charSet.nchars = 0; \</span>
01240 <span class="comment">csetvar.canonicalSet = canset; \</span>
01241 <span class="comment">csetvar.canonicalSetSize = sizeof(canset)-1; \</span>
01242 <span class="comment">csetvar.canonicalSetBits = getUIntBitCount(csetvar.canonicalSetSize); \</span>
01243 <span class="comment">csetvar.charSetUnalignedBits = ubits; \</span>
01244 <span class="comment">csetvar.charSetAlignedBits = abits;</span>
01245 <span class="comment">*/</span>
01246
01262 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga21">decodeBits</a>
01263 (OOCTXT* pctxt, ASN1UINT* pvalue, ASN1UINT nbits);
01264
01285 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga22">decodeBitString</a>
01286 (OOCTXT* pctxt, ASN1UINT* numbits_p, ASN1OCTET* buffer,
01287  ASN1UINT bufsiz);
01288
01313 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga23">decodeBMPString</a>
01314 (OOCTXT* pctxt, ASN1BMPString* pvalue, Asn116BitCharSet* permCharSet);
01315
01327 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga24">decodeByteAlign</a> (OOCTXT* pctxt);
01328
01341 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga25">decodeConsInteger</a>
01342 (OOCTXT* pctxt, ASN1INT* pvalue, ASN1INT lower, ASN1INT upper);
01343
01357 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga26">decodeConsUnsigned</a>
01358 (OOCTXT* pctxt, ASN1UINT* pvalue, ASN1UINT lower, ASN1UINT upper);
01359
01373 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga27">decodeConsUInt8</a> (OOCTXT* pctxt,
01374                             ASN1UINT8* pvalue, ASN1UINT lower, ASN1UINT upper);
01375
01389 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga28">decodeConsUInt16</a>
01390 (OOCTXT* pctxt, ASN1USINT* pvalue, ASN1UINT lower, ASN1UINT upper);
01391
01409 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga29">decodeConsWholeNumber</a>
01410 (OOCTXT* pctxt, ASN1UINT* padjusted_value, ASN1UINT range_value);
01411
01431 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga30">decodeConstrainedStringEx</a>
01432 (OOCTXT* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>** string, <span class="keyword">const</span> <span class="keywordtype">char</span>* charSet,
01433  ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits);
01434
01457 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga31">decodeDynBitString</a> (OOCTXT* pctxt, ASN1DynBitStr* pBitStr);
01458
01475 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga32">decodeDynOctetString</a>
01476 (OOCTXT* pctxt, ASN1DynOctStr* pOctStr);
01477
01491 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga33">decodeLength</a> (OOCTXT* pctxt, ASN1UINT* pvalue);
01492
01500 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga34">moveBitCursor</a> (OOCTXT* pctxt, <span class="keywordtype">int</span> bitOffset);
01501
01514 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga35">decodeObjectIdentifier</a> (OOCTXT* pctxt, ASN1OBJID* pvalue);
01515
01534 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga36">decodeOctetString</a>
01535 (OOCTXT* pctxt, ASN1UINT* numocts_p, ASN1OCTET* buffer,
01536  ASN1UINT bufsiz);
01537
01555 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga37">decodeOpenType</a>
01556 (OOCTXT* pctxt, <span class="keyword">const</span> ASN1OCTET** object_p2, ASN1UINT* numocts_p);
01557
01573 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga38">decodeSmallNonNegWholeNumber</a>
01574 (OOCTXT* pctxt, ASN1UINT* pvalue);
01575
01587 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga39">decodeSemiConsInteger</a>
01588    (OOCTXT* pctxt, ASN1INT* pvalue, ASN1INT lower);
01589
01602 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga40">decodeSemiConsUnsigned</a>
01603    (OOCTXT* pctxt, ASN1UINT* pvalue, ASN1UINT lower);
01604
<a name="l01614"></a><a class="code" href="group__rtmem.shtml#ga88">01614</a> <span class="preprocessor">#define decodeUnconsInteger(pctxt,pvalue) \</span>
01615 <span class="preprocessor">decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</span>
01616 <span class="preprocessor"></span>
<a name="l01627"></a><a class="code" href="group__rtmem.shtml#ga89">01627</a> <span class="preprocessor">#define decodeUnconsUnsigned(pctxt,pvalue) \</span>
01628 <span class="preprocessor">decodeSemiConsUnsigned(pctxt, pvalue, 0U)</span>
01629 <span class="preprocessor"></span>
01630 EXTERN <span class="keywordtype">int</span> decodeVarWidthCharString (OOCTXT* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>** pvalue);
01631
01641 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga42">encodeBit</a> (OOCTXT* pctxt, ASN1BOOL value);
01642
01653 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga43">encodeBits</a>
01654 (OOCTXT* pctxt, ASN1UINT value, ASN1UINT nbits);
01655
01669 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga44">encodeBitString</a>
01670 (OOCTXT* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
01671
01695 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga45">encodeBMPString</a>
01696 (OOCTXT* pctxt, ASN1BMPString value, Asn116BitCharSet* permCharSet);
01697
01709 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga46">encodeByteAlign</a> (OOCTXT* pctxt);
01710
01726 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga47">encodeCheckBuffer</a> (OOCTXT* pctxt, ASN1UINT nbytes);
01727
01745 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga48">encodeConstrainedStringEx</a>
01746 (OOCTXT* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>* string, <span class="keyword">const</span> <span class="keywordtype">char</span>* charSet,
01747  ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits);
01748
01761 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga49">encodeConsInteger</a>
01762 (OOCTXT* pctxt, ASN1INT value, ASN1INT lower, ASN1INT upper);
01763
01779 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga50">encodeConsUnsigned</a>
01780 (OOCTXT* pctxt, ASN1UINT value, ASN1UINT lower, ASN1UINT upper);
01781
01797 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga51">encodeConsWholeNumber</a>
01798 (OOCTXT* pctxt, ASN1UINT adjusted_value, ASN1UINT range_value);
01799
01813 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga52">encodeExpandBuffer</a> (OOCTXT* pctxt, ASN1UINT nbytes);
01814
01833 EXTERN ASN1OCTET* <a class="code" href="group__rtmem.shtml#ga53">encodeGetMsgPtr</a> (OOCTXT* pctxt, <span class="keywordtype">int</span>* pLength);
01834
01846 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga54">encodeLength</a> (OOCTXT* pctxt, ASN1UINT value);
01847
01860 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga55">encodeObjectIdentifier</a> (OOCTXT* pctxt, ASN1OBJID* pvalue);
01861
01862
01873 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga56">encodebitsFromOctet</a> (OOCTXT* pctxt, ASN1OCTET value, ASN1UINT nbits);
01874
01888 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga57">encodeOctets</a>
01889 (OOCTXT* pctxt, <span class="keyword">const</span> ASN1OCTET* pvalue, ASN1UINT nbits);
01890
01903 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga58">encodeOctetString</a>
01904 (OOCTXT* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
01905
01921 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga59">encodeOpenType</a>
01922 (OOCTXT* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
01923
01942 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga60">encodeOpenTypeExt</a>
01943 (OOCTXT* pctxt, DList* pElemList);
01944
01945 EXTERN <span class="keywordtype">int</span> encodeOpenTypeExtBits
01946 (OOCTXT* pctxt, DList* pElemList);
01947
01962 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga62">encodeSmallNonNegWholeNumber</a> (OOCTXT* pctxt, ASN1UINT value);
01963
01975 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga63">encodeSemiConsInteger</a>
01976    (OOCTXT* pctxt, ASN1INT value, ASN1INT lower);
01977
01989 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__rtmem.shtml#ga64">encodeSemiConsUnsigned</a>
01990    (OOCTXT* pctxt, ASN1UINT value, ASN1UINT lower);
01991
<a name="l02001"></a><a class="code" href="group__rtmem.shtml#ga90">02001</a> <span class="preprocessor">#define encodeUnconsInteger(pctxt,value) \</span>
02002 <span class="preprocessor">encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</span>
02003 <span class="preprocessor"></span>
02004 EXTERN <span class="keywordtype">int</span> encodeVarWidthCharString (OOCTXT* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>* value);
02005
02006 EXTERN <span class="keywordtype">int</span> addSizeConstraint (OOCTXT* pctxt, Asn1SizeCnst* pSize);
02007
02008 EXTERN ASN1BOOL alignCharStr
02009 (OOCTXT* pctxt, ASN1UINT len, ASN1UINT nbits, Asn1SizeCnst* pSize);
02010
02011 EXTERN <span class="keywordtype">int</span> bitAndOctetStringAlignmentTest
02012 (Asn1SizeCnst* pSizeList, ASN1UINT itemCount,
02013  ASN1BOOL bitStrFlag, ASN1BOOL* pAlignFlag);
02014
02015 EXTERN <span class="keywordtype">int</span> getPERMsgLen (OOCTXT* pctxt);
02016
02017 EXTERN <span class="keywordtype">int</span> addSizeConstraint (OOCTXT* pctxt, Asn1SizeCnst* pSize);
02018
02019 EXTERN Asn1SizeCnst* getSizeConstraint (OOCTXT* pctxt, ASN1BOOL extbit);
02020
02021 EXTERN <span class="keywordtype">int</span> checkSizeConstraint(OOCTXT* pctxt, <span class="keywordtype">int</span> size);
02022 EXTERN ASN1UINT getUIntBitCount (ASN1UINT value);
02023
02024 EXTERN Asn1SizeCnst* checkSize
02025 (Asn1SizeCnst* pSizeList, ASN1UINT value, ASN1BOOL* pExtendable);
02026
02027 EXTERN <span class="keywordtype">void</span> init16BitCharSet
02028 (Asn116BitCharSet* pCharSet, ASN116BITCHAR first,
02029  ASN116BITCHAR last, ASN1UINT abits, ASN1UINT ubits);
02030
02031 EXTERN ASN1BOOL isExtendableSize (Asn1SizeCnst* pSizeList);
02032
02033
02034 EXTERN <span class="keywordtype">void</span> set16BitCharSet
02035 (OOCTXT* pctxt, Asn116BitCharSet* pCharSet, Asn116BitCharSet* pAlphabet);
02036
02037 EXTERN <span class="keyword">const</span> <span class="keywordtype">char</span>* rtBitStrToString (ASN1UINT numbits, <span class="keyword">const</span> ASN1OCTET* data,
02038                                    <span class="keywordtype">char</span>* buffer, size_t bufsiz);
02039 EXTERN <span class="keyword">const</span> <span class="keywordtype">char</span>* rtOctStrToString (ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data,
02040                                    <span class="keywordtype">char</span>* buffer, size_t bufsiz);
02041 <span class="preprocessor">#ifdef __cplusplus</span>
02042 <span class="preprocessor"></span>}
02043 <span class="preprocessor">#endif</span>
02044 <span class="preprocessor"></span>
02045 <span class="preprocessor">#endif </span>
</div></pre><!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
         <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
                3 Mar 2005.<BR> H323FrameworkStack, Version 0.5.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
