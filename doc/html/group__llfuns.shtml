<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
         <TITLE>Linked List Utility Functions</TITLE>
         <LINK REL="stylesheet" HREF="http://www.obj-sys.com/stylesheet.css"
          TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
         <CENTER>
                <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
                                SRC="http://www.obj-sys.com/images/Head1.jpg" WIDTH="725" HEIGHT="90"
                                ALT="Objective Systems, Inc."></TD>
                         <TD WIDTH="100%"
                          BACKGROUND="http://www.obj-sys.com/images/Head2.jpg">&nbsp;</TD>
                  </TR>
                </TABLE>
<TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
                <TR VALIGN="TOP">
                  <TD VALIGN="top" BACKGROUND="http://www.obj-sys.com/images/LeftBkd.jpg"
                        WIDTH="129">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0"
                          BACKGROUND="http://www.obj-sys.com/images/NetscapeCorrection.gif">
                                <TR VALIGN="TOP">
                                  <TD BGCOLOR="#D9E4F1" VALIGN="top" ROWSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="96" HEIGHT="1">
                                         <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
                                                
                                                <TR>
                                                  <TD></TD>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">
                                                         <A HREF="http://www.obj-sys.com/index.shtml" CLASS="nav">Home</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutasn1.shtml" CLASS="nav">About
                                                         ASN.1</A><BR> <A HREF="http://www.obj-sys.com/products.shtml"
                                                         CLASS="nav">Products</A><BR>
                                                         <A HREF="http://www.obj-sys.com/freesoftware.shtml" CLASS="nav">Free
                                                         Software</A><BR>
                                                         <A HREF="http://www.obj-sys.com/docs/acv55docs.shtml" CLASS="nav">Documents</A>
                                                         <BR> <A HREF="http://www.obj-sys.com/services.shtml"
                                                         CLASS="nav">Services</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resources.shtml" CLASS="nav">Resources</A><BR>
                                                         <A HREF="http://www.obj-sys.com/resellers.shtml" CLASS="nav">Resellers</A><BR>
<!--      <a href="http://www.obj-sys.com/ordering.shtml" class="nav">Ordering</a><br>  -->
                                                         <A HREF="http://www.obj-sys.com/customers.shtml"
                                                          CLASS="nav">Customers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/careers.shtml" CLASS="nav">Careers</A><BR>
                                                         <A HREF="http://www.obj-sys.com/aboutus.shtml" CLASS="nav">About Us</A><BR>
                                                         <A HREF="http://www.obj-sys.com/contactus.shtml" CLASS="nav">Contact Us</A><BR>
                                                         </TD>
                                                </TR>
                                                <TR>
                                                  <TD NOWRAP="NOWRAP" WIDTH="100%">&nbsp;</TD>
                                                </TR>
                                                <TR>
                                                  <TD> </TD>
                                                  <TD>
                        <!--Google search -->
                                                         <FORM METHOD="GET" ACTION="http://www.google.com/custom">
                                                                
                                                                <P><A HREF="http://www.google.com/search"></A>
                                                                  <IMG SRC="http://www.obj-sys.com/images/google.gif" BORDER="0" ALT="Google"
                                                                        ALIGN="middle"><BR>
                                                                  <INPUT TYPE="text" NAME="q" SIZE="10" MAXLENGTH="255" VALUE=""><BR>
                                                                  <INPUT TYPE="submit" NAME="sa" VALUE="Search">
                                                                  <INPUT TYPE="hidden" NAME="cof"
                                                                        VALUE="AH:center;GL:0;S:http://www.obj-sys.com;AWFID:b38a0de10d0a7b9b;">
                                                                  <INPUT TYPE="hidden" NAME="domains" VALUE="obj-sys.com">
                                                                  <INPUT TYPE="hidden" NAME="sitesearch" VALUE="obj-sys.com"><BR> </P> </FORM>
                        <!--End Google search -->
                                                  </TD>
                                                  <TD><IMG BORDER="0"
                                                         SRC="http://www.obj-sys.com/images/spacer.gif" WIDTH="10" HEIGHT="1"></TD>
                                                </TR>
                                                
                                         </TABLE> </TD>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="top"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftTop.jpg"
                                         WIDTH="33" HEIGHT="114"></TD>
                                </TR>
                                <TR>
                                  <TD BACKGROUND="http://www.obj-sys.com/images/LeftTopbkd.jpg"
                                        VALIGN="bottom"><IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftC.jpg"
                                         WIDTH="33" HEIGHT="16"></TD>
                                </TR>
                                <TR>
                                  <TD WIDTH="100%" COLSPAN="2"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftD.jpg" WIDTH="129" HEIGHT="37"
                                         ALT="Objective Systems, Inc."><BR><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/LeftBottom.jpg" WIDTH="129"><BR>
                                         <IMG BORDER="0" SRC="http://www.obj-sys.com/images/LeftBottombkd.jpg"></TD>
                                </TR>
                         </TABLE> </TD>
                  <TD VALIGN="top" WIDTH="100%">
                         <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                                <TR>
                                  <TD WIDTH="100%"
                                        BACKGROUND="http://www.obj-sys.com/images/Top2bkd.jpg"><IMG BORDER="0"
                                         SRC="http://www.obj-sys.com/images/Top2.jpg" WIDTH="568" HEIGHT="20"></TD>
                                </TR>
                         </TABLE>
                <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
                  <TR>
                         <TD><IMG BORDER="0" SRC="http://www.obj-sys.com/images/Top3.jpg"
                                WIDTH="58" HEIGHT="34"></TD>
                         <TD ALIGN="center" WIDTH="100%"> </TD>
                  </TR>
                  <TR>
                         <TD VALIGN="top" WIDTH="95%">
<!-- Generated by Doxygen 1.3.6-20040413 -->
<div class="qindex"><a class="qindex" href="index.shtml">Main&nbsp;Page</a> | <a class="qindex" href="modules.shtml">Modules</a> | <a class="qindex" href="classes.shtml">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.shtml">Data&nbsp;Structures</a> | <a class="qindex" href="files.shtml">File&nbsp;List</a> | <a class="qindex" href="functions.shtml">Data&nbsp;Fields</a> | <a class="qindex" href="globals.shtml">Globals</a></div>
<h1>Linked List Utility Functions<br>
<small>
[<a class="el" href="group__cruntime.shtml">C Runtime Common Functions</a>]</small>
</h1>Linked list and stack utility functions are used to maintain linked lists and stacks used within the ASN.1 run-time library functions. 
<a href="#_details">More...</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Modules</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>group&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__errfp.shtml">Error Formatting and Print Functions</a></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>group&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__rtmem.shtml">Rtmem</a></td></tr>

<tr><td colspan=2><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga15" doxytag="llfuns::RT_MH_DONTKEEPFREE" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>RT_MH_DONTKEEPFREE</b>&nbsp;&nbsp;&nbsp;0x1</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga16" doxytag="llfuns::OSRTMH_PROPID_DEFBLKSIZE" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>OSRTMH_PROPID_DEFBLKSIZE</b>&nbsp;&nbsp;&nbsp;1</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga17" doxytag="llfuns::OSRTMH_PROPID_SETFLAGS" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>OSRTMH_PROPID_SETFLAGS</b>&nbsp;&nbsp;&nbsp;2</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga18" doxytag="llfuns::OSRTMH_PROPID_CLEARFLAGS" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>OSRTMH_PROPID_CLEARFLAGS</b>&nbsp;&nbsp;&nbsp;3</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga19" doxytag="llfuns::OSRTMH_PROPID_USER" ></a>
#define&nbsp;</td><td class="memItemRight" valign=bottom><b>OSRTMH_PROPID_USER</b>&nbsp;&nbsp;&nbsp;10</td></tr>

<tr><td colspan=2><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN DListNode *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga0">dListAppend</a> (OOCTXT *pctxt, DList *pList, void *pData)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function appends an item to the linked list structure.  <a href="#ga0"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga1" doxytag="llfuns::dListAppendNode" ></a>
EXTERN DListNode *&nbsp;</td><td class="memItemRight" valign=bottom><b>dListAppendNode</b> (OOCTXT *pctxt, DList *pList, void *pData)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="ga2" doxytag="llfuns::dListFindByIndex" ></a>
EXTERN DListNode *&nbsp;</td><td class="memItemRight" valign=bottom><b>dListFindByIndex</b> (DList *pList, int index)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga3">dListInit</a> (DList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function initializes a doubly linked list structure.  <a href="#ga3"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga4">dListFreeNodes</a> (OOCTXT *pctxt, DList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function removes all nodes from the linked list and releases the memory that was allocated for storing the node structures (DListNode).  <a href="#ga4"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga5">dListFreeAll</a> (OOCTXT *pctxt, DList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function removes all nodes from the linked list structure and releases the memory that was allocated for storing the node structures (DListNode) and for data.  <a href="#ga5"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga6">dListRemove</a> (DList *pList, DListNode *node)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function removes a node from the linked list structure.  <a href="#ga6"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga7">sListInit</a> (SList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to initialize a singly-linked list.  <a href="#ga7"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga8">sListInitEx</a> (OOCTXT *pctxt, SList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to initialize a singly-linked list and assigns a context to be used for the list.  <a href="#ga8"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga9">sListFree</a> (SList *pList)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to free-up all the nodes in the singly-linked list.  <a href="#ga9"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN SList *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga10">sListCreate</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to create a new singly-linked list.  <a href="#ga10"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN SList *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga11">sListCreateEx</a> (OOCTXT *pctxt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to create a singly-linked list.  <a href="#ga11"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN SListNode *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga12">sListAppend</a> (SList *pList, void *pData)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to append a new data member to the list.  <a href="#ga12"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN ASN1BOOL&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga13">sListFind</a> (SList *pList, void *pData)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to search for a particular data in the list.  <a href="#ga13"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXTERN void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="group__llfuns.shtml#ga14">sListRemove</a> (SList *pList, void *pData)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to remove a particular data member from the list.  <a href="#ga14"></a><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Linked list and stack utility functions are used to maintain linked lists and stacks used within the ASN.1 run-time library functions.
<p>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="ga0" doxytag="ooasn1.h::dListAppend" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN DListNode* dListAppend           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>DList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pData</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function appends an item to the linked list structure.
<p>
The data item is passed into the function as a void pointer that can point to any object of any type. The memAlloc function is used to allocated the memory for the list node structure; therefore, all internal list memory will be released whenever memFree is called. The pointer to the data item itself is stored in the node structure - a copy is not made.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>A pointer to a linked list structure onto which the data item is to be appended. A pointer to an updated linked list structure. </td></tr>
    <tr><td valign=top><em>pData</em>&nbsp;</td><td>A pointer to a data item to be appended to the list. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>A pointer to an allocated node structure used to link the given data value into the list. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga5" doxytag="ooasn1.h::dListFreeAll" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void dListFreeAll           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>DList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function removes all nodes from the linked list structure and releases the memory that was allocated for storing the node structures (DListNode) and for data.
<p>
The memory for data in each node must have been previously allocated with calls to memAlloc, memAllocZ, or memRealloc functions.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to a linked list structure. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga4" doxytag="ooasn1.h::dListFreeNodes" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void dListFreeNodes           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>DList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function removes all nodes from the linked list and releases the memory that was allocated for storing the node structures (DListNode).
<p>
The data will not be released.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>A pointer to a linked list structure onto which the data item is to be appended. A pointer to an updated linked list structure. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga3" doxytag="ooasn1.h::dListInit" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void dListInit           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">DList *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pList</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function initializes a doubly linked list structure.
<p>
It sets the number of elements to zero and sets al internal pointer values to NULL. A doubly linked-list structure is described by the DList type defined in <a class="el" href="ooasn1_8h.shtml">ooasn1.h</a>. Nodes of the list are of type DListNode.<p>
Memory for the structures is allocated using the memAlloc run-time function and is maintained within the context structure that is a required parameter to all dList functions. This memory is released when memFree is called or the Context is released. Unless otherwise noted, all data passed into the list functions is simply stored on the list by value (i.e. a deep-copy of the data is not done).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>A pointer to a linked list structure to be initialized. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga6" doxytag="ooasn1.h::dListRemove" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void dListRemove           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">DList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>DListNode *&nbsp;</td>
          <td class="mdname" nowrap> <em>node</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function removes a node from the linked list structure.
<p>
The memAlloc function was used to allocate the memory for the list node structure, therefore, all internal list memory will be released whenever memFree or memFreePtr is called.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>A pointer to a linked list structure onto which the data item is to be appended. A pointer to an updated linked list structure. </td></tr>
    <tr><td valign=top><em>node</em>&nbsp;</td><td>A pointer to the node that is to be removed. It should already be in the linked list structure. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga12" doxytag="ooasn1.h::sListAppend" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN SListNode* sListAppend           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">SList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pData</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to append a new data member to the list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the list to which data has to be appended. </td></tr>
    <tr><td valign=top><em>pData</em>&nbsp;</td><td>Pointer to the data to be appended.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Returns pointer to the newly appended list node. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga10" doxytag="ooasn1.h::sListCreate" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN SList* sListCreate           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to create a new singly-linked list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>None</em>&nbsp;</td><td></td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the newly created list. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga11" doxytag="ooasn1.h::sListCreateEx" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN SList* sListCreateEx           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pctxt</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to create a singly-linked list.
<p>
The memory for the list is allocated using the context pointer passed to this function and also the same context will be used for any further memory required by the list. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to the OOCTXT context which will be used for list creation</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the newly created list structure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga13" doxytag="ooasn1.h::sListFind" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN ASN1BOOL sListFind           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">SList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pData</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to search for a particular data in the list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the list in which data has to be searched. </td></tr>
    <tr><td valign=top><em>pData</em>&nbsp;</td><td>Pointer to the data to be searched.</td></tr>
  </table>
</dl>
1 if found, 0 otherwise.     </td>
  </tr>
</table>
<a class="anchor" name="ga9" doxytag="ooasn1.h::sListFree" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void sListFree           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">SList *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pList</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to free-up all the nodes in the singly-linked list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the list to be freed.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga7" doxytag="ooasn1.h::sListInit" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void sListInit           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">SList *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pList</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to initialize a singly-linked list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the SList structure.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga8" doxytag="ooasn1.h::sListInitEx" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void sListInitEx           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">OOCTXT *&nbsp;</td>
          <td class="mdname" nowrap> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>SList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to initialize a singly-linked list and assigns a context to be used for the list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pctxt</em>&nbsp;</td><td>Pointer to the context which will be used for memory allocations related to the list. </td></tr>
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the SList structure to be initialized.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ga14" doxytag="ooasn1.h::sListRemove" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXTERN void sListRemove           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">SList *&nbsp;</td>
          <td class="mdname" nowrap> <em>pList</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pData</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is used to remove a particular data member from the list.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>pList</em>&nbsp;</td><td>Pointer to the list from which the data has to be removed. </td></tr>
    <tr><td valign=top><em>pData</em>&nbsp;</td><td>Pointer to the data to be removed.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None </dd></dl>
    </td>
  </tr>
</table>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
         <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
                21 Nov 2004.<BR> H323FrameworkStack, Version 0.3 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
