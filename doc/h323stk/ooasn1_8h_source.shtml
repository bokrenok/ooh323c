<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
    <TITLE>Objective Open H.323 Stack: ooasn1.h Source File</TITLE>
    <LINK REL="stylesheet" HREF="stylesheet.css" TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
    <CENTER>
      <DIV ID="pageDiv">
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
          <TR>
            <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
             SRC="./images/Head1.jpg" WIDTH="725" HEIGHT="90"
             ALT="Objective Systems, Inc."></TD>
            <TD WIDTH="100%" BACKGROUND="./images/Head2.jpg">&nbsp;</TD>
          </TR>
        </TABLE>
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="10" CELLPADDING="10">
          <TR><TD>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="annotated.shtml"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.shtml"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>ooasn1.h</h1><a href="ooasn1_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1997-2009 by Objective Systems, Inc.</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This software is furnished under an open source license and may be</span>
<a name="l00005"></a>00005 <span class="comment"> * used and copied only in accordance with the terms of this license.</span>
<a name="l00006"></a>00006 <span class="comment"> * The text of the license may generally be found in the root</span>
<a name="l00007"></a>00007 <span class="comment"> * directory of this installation in the COPYING file.  It</span>
<a name="l00008"></a>00008 <span class="comment"> * can also be viewed online at the following URL:</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> *   http://www.obj-sys.com/open/license.html</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * Any redistributions of this file including modified versions must</span>
<a name="l00013"></a>00013 <span class="comment"> * maintain this copyright notice.</span>
<a name="l00014"></a>00014 <span class="comment"> *</span>
<a name="l00015"></a>00015 <span class="comment"> *****************************************************************************/</span>
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef _OOASN1_H_</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define _OOASN1_H_</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;limits.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;stddef.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;dlist.h&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="ootrace_8h.shtml" title="This file defines the trace functionality.">ootrace.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="comment">/* Error Code Constants */</span>
<a name="l00037"></a>00037
<a name="l00038"></a>00038 <span class="preprocessor">#define ASN_OK            0      </span><span class="comment">/* normal completion status             */</span>
<a name="l00039"></a>00039 <span class="preprocessor">#define ASN_OK_FRAG       2      </span><span class="comment">/* message fragment detected            */</span>
<a name="l00040"></a>00040 <span class="preprocessor">#define ASN_E_BUFOVFLW   -1      </span><span class="comment">/* encode buffer overflow               */</span>
<a name="l00041"></a>00041 <span class="preprocessor">#define ASN_E_ENDOFBUF   -2      </span><span class="comment">/* unexpected end of buffer on decode   */</span>
<a name="l00042"></a>00042 <span class="preprocessor">#define ASN_E_IDNOTFOU   -3      </span><span class="comment">/* identifer not found                  */</span>
<a name="l00043"></a>00043 <span class="preprocessor">#define ASN_E_INVOBJID   -4      </span><span class="comment">/* invalid object identifier            */</span>
<a name="l00044"></a>00044 <span class="preprocessor">#define ASN_E_INVLEN     -5      </span><span class="comment">/* invalid field length                 */</span>
<a name="l00045"></a>00045 <span class="preprocessor">#define ASN_E_INVENUM    -6      </span><span class="comment">/* enumerated value not in defined set  */</span>
<a name="l00046"></a>00046 <span class="preprocessor">#define ASN_E_SETDUPL    -7      </span><span class="comment">/* duplicate element in set             */</span>
<a name="l00047"></a>00047 <span class="preprocessor">#define ASN_E_SETMISRQ   -8      </span><span class="comment">/* missing required element in set      */</span>
<a name="l00048"></a>00048 <span class="preprocessor">#define ASN_E_NOTINSET   -9      </span><span class="comment">/* element not part of set              */</span>
<a name="l00049"></a>00049 <span class="preprocessor">#define ASN_E_SEQOVFLW   -10     </span><span class="comment">/* sequence of field overflow           */</span>
<a name="l00050"></a>00050 <span class="preprocessor">#define ASN_E_INVOPT     -11     </span><span class="comment">/* invalid option encountered in choice */</span>
<a name="l00051"></a>00051 <span class="preprocessor">#define ASN_E_NOMEM      -12     </span><span class="comment">/* no dynamic memory available          */</span>
<a name="l00052"></a>00052 <span class="preprocessor">#define ASN_E_INVHEXS    -14     </span><span class="comment">/* invalid hex string                   */</span>
<a name="l00053"></a>00053 <span class="preprocessor">#define ASN_E_INVBINS    -15     </span><span class="comment">/* invalid binary string                */</span>
<a name="l00054"></a>00054 <span class="preprocessor">#define ASN_E_INVREAL    -16     </span><span class="comment">/* invalid real value                   */</span>
<a name="l00055"></a>00055 <span class="preprocessor">#define ASN_E_STROVFLW   -17     </span><span class="comment">/* octet or bit string field overflow   */</span>
<a name="l00056"></a>00056 <span class="preprocessor">#define ASN_E_BADVALUE   -18     </span><span class="comment">/* invalid value specification          */</span>
<a name="l00057"></a>00057 <span class="preprocessor">#define ASN_E_UNDEFVAL   -19     </span><span class="comment">/* no def found for ref&#39;d defined value */</span>
<a name="l00058"></a>00058 <span class="preprocessor">#define ASN_E_UNDEFTYP   -20     </span><span class="comment">/* no def found for ref&#39;d defined type  */</span>
<a name="l00059"></a>00059 <span class="preprocessor">#define ASN_E_BADTAG     -21     </span><span class="comment">/* invalid tag value                    */</span>
<a name="l00060"></a>00060 <span class="preprocessor">#define ASN_E_TOODEEP    -22     </span><span class="comment">/* nesting level is too deep            */</span>
<a name="l00061"></a>00061 <span class="preprocessor">#define ASN_E_CONSVIO    -23     </span><span class="comment">/* value constraint violation           */</span>
<a name="l00062"></a>00062 <span class="preprocessor">#define ASN_E_RANGERR    -24     </span><span class="comment">/* invalid range (lower &gt; upper)        */</span>
<a name="l00063"></a>00063 <span class="preprocessor">#define ASN_E_ENDOFFILE  -25     </span><span class="comment">/* end of file on file decode           */</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define ASN_E_INVUTF8    -26     </span><span class="comment">/* invalid UTF-8 encoding               */</span>
<a name="l00065"></a>00065 <span class="preprocessor">#define ASN_E_CONCMODF   -27     </span><span class="comment">/* Concurrent list modification         */</span>
<a name="l00066"></a>00066 <span class="preprocessor">#define ASN_E_ILLSTATE   -28     </span><span class="comment">/* Illegal state error                  */</span>
<a name="l00067"></a>00067 <span class="preprocessor">#define ASN_E_OUTOFBND   -29     </span><span class="comment">/* out of bounds (of array, etc)        */</span>
<a name="l00068"></a>00068 <span class="preprocessor">#define ASN_E_INVPARAM   -30     </span><span class="comment">/* invalid parameter                    */</span>
<a name="l00069"></a>00069 <span class="preprocessor">#define ASN_E_INVFORMAT  -31     </span><span class="comment">/* invalid time string format           */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#define ASN_E_NOTINIT    -32     </span><span class="comment">/* not initialized                      */</span>
<a name="l00071"></a>00071 <span class="preprocessor">#define ASN_E_TOOBIG     -33     </span><span class="comment">/* value is too big for given data type */</span>
<a name="l00072"></a>00072 <span class="preprocessor">#define ASN_E_INVCHAR    -34     </span><span class="comment">/* invalid character (not in char set)  */</span>
<a name="l00073"></a>00073 <span class="preprocessor">#define ASN_E_XMLSTATE   -35     </span><span class="comment">/* XML state error                      */</span>
<a name="l00074"></a>00074 <span class="preprocessor">#define ASN_E_XMLPARSE   -36     </span><span class="comment">/* XML parse error                      */</span>
<a name="l00075"></a>00075 <span class="preprocessor">#define ASN_E_SEQORDER   -37     </span><span class="comment">/* SEQUENCE elements not in order       */</span>
<a name="l00076"></a>00076 <span class="preprocessor">#define ASN_E_INVINDEX   -38     </span><span class="comment">/* invalid index for TC id              */</span>
<a name="l00077"></a>00077 <span class="preprocessor">#define ASN_E_INVTCVAL   -39     </span><span class="comment">/* invalid value for TC field           */</span>
<a name="l00078"></a>00078 <span class="preprocessor">#define ASN_E_FILNOTFOU  -40     </span><span class="comment">/* file not found                       */</span>
<a name="l00079"></a>00079 <span class="preprocessor">#define ASN_E_FILEREAD   -41     </span><span class="comment">/* error occurred reading file          */</span>
<a name="l00080"></a>00080 <span class="preprocessor">#define ASN_E_FILEWRITE  -42     </span><span class="comment">/* error occurred writing file          */</span>
<a name="l00081"></a>00081 <span class="preprocessor">#define ASN_E_INVBASE64  -43     </span><span class="comment">/* invalid base64 encoding              */</span>
<a name="l00082"></a>00082 <span class="preprocessor">#define ASN_E_INVSOCKET  -44     </span><span class="comment">/* invalid socket operation             */</span>
<a name="l00083"></a>00083 <span class="preprocessor">#define ASN_E_XMLLIBNFOU -45     </span><span class="comment">/* XML library is not found             */</span>
<a name="l00084"></a>00084 <span class="preprocessor">#define ASN_E_XMLLIBINV  -46     </span><span class="comment">/* XML library is invalid               */</span>
<a name="l00085"></a>00085 <span class="preprocessor">#define ASN_E_NOTSUPP    -99     </span><span class="comment">/* non-supported ASN construct          */</span>
<a name="l00086"></a>00086 <span class="preprocessor">#define ASN_K_INDEFLEN   -9999   </span><span class="comment">/* indefinite length message indicator  */</span>
<a name="l00087"></a>00087
<a name="l00088"></a>00088 <span class="comment">/* universal built-in type ID code value constants */</span>
<a name="l00089"></a>00089
<a name="l00090"></a>00090 <span class="preprocessor">#define ASN_ID_EOC      0       </span><span class="comment">/* end of contents              */</span>
<a name="l00091"></a>00091 <span class="preprocessor">#define ASN_ID_BOOL     1       </span><span class="comment">/* boolean                      */</span>
<a name="l00092"></a>00092 <span class="preprocessor">#define ASN_ID_INT      2       </span><span class="comment">/* integer                      */</span>
<a name="l00093"></a>00093 <span class="preprocessor">#define ASN_ID_BITSTR   3       </span><span class="comment">/* bit string                   */</span>
<a name="l00094"></a>00094 <span class="preprocessor">#define ASN_ID_OCTSTR   4       </span><span class="comment">/* byte (octet) string          */</span>
<a name="l00095"></a>00095 <span class="preprocessor">#define ASN_ID_NULL     5       </span><span class="comment">/* null                         */</span>
<a name="l00096"></a>00096 <span class="preprocessor">#define ASN_ID_OBJID    6       </span><span class="comment">/* object ID                    */</span>
<a name="l00097"></a>00097 <span class="preprocessor">#define ASN_ID_OBJDSC   7       </span><span class="comment">/* object descriptor            */</span>
<a name="l00098"></a>00098 <span class="preprocessor">#define ASN_ID_EXTERN   8       </span><span class="comment">/* external type                */</span>
<a name="l00099"></a>00099 <span class="preprocessor">#define ASN_ID_REAL     9       </span><span class="comment">/* real                         */</span>
<a name="l00100"></a>00100 <span class="preprocessor">#define ASN_ID_ENUM     10      </span><span class="comment">/* enumerated value             */</span>
<a name="l00101"></a>00101 <span class="preprocessor">#define ASN_ID_EPDV     11      </span><span class="comment">/* EmbeddedPDV type             */</span>
<a name="l00102"></a>00102 <span class="preprocessor">#define ASN_ID_RELOID   13      </span><span class="comment">/* relative object ID           */</span>
<a name="l00103"></a>00103 <span class="preprocessor">#define ASN_ID_SEQ      16      </span><span class="comment">/* sequence, sequence of        */</span>
<a name="l00104"></a>00104 <span class="preprocessor">#define ASN_ID_SET      17      </span><span class="comment">/* set, set of                  */</span>
<a name="l00105"></a>00105
<a name="l00106"></a>00106 <span class="preprocessor">#define ASN_SEQ_TAG     0x30    </span><span class="comment">/* SEQUENCE universal tag byte  */</span>
<a name="l00107"></a>00107 <span class="preprocessor">#define ASN_SET_TAG     0x31    </span><span class="comment">/* SET universal tag byte       */</span>
<a name="l00108"></a>00108
<a name="l00109"></a>00109 <span class="comment">/* Restricted character string type ID&#39;s */</span>
<a name="l00110"></a>00110
<a name="l00111"></a>00111 <span class="preprocessor">#define ASN_ID_NumericString    18</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_PrintableString  19</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_TeletexString    20</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_T61String        ASN_ID_TeletexString</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_VideotexString   21</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_IA5String        22</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_UTCTime          23</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GeneralTime      24</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GraphicString    25</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_VisibleString    26</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_GeneralString    27</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_UniversalString  28</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">#define ASN_ID_BMPString        30</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>
<a name="l00125"></a>00125 <span class="comment">/* flag mask values */</span>
<a name="l00126"></a>00126
<a name="l00127"></a>00127 <span class="preprocessor">#define XM_SEEK         0x01    </span><span class="comment">/* seek match until found or end-of-buf */</span>
<a name="l00128"></a>00128 <span class="preprocessor">#define XM_ADVANCE      0x02    </span><span class="comment">/* advance pointer to contents on match */</span>
<a name="l00129"></a>00129 <span class="preprocessor">#define XM_DYNAMIC      0x04    </span><span class="comment">/* alloc dyn mem for decoded variable   */</span>
<a name="l00130"></a>00130 <span class="preprocessor">#define XM_SKIP         0x08    </span><span class="comment">/* skip to next field after parsing tag */</span>
<a name="l00131"></a>00131
<a name="l00132"></a>00132 <span class="comment">/* Sizing Constants */</span>
<a name="l00133"></a>00133
<a name="l00134"></a>00134 <span class="preprocessor">#define ASN_K_MAXDEPTH  32      </span><span class="comment">/* maximum nesting depth for messages   */</span>
<a name="l00135"></a>00135 <span class="preprocessor">#define ASN_K_MAXSUBIDS 128     </span><span class="comment">/* maximum sub-id&#39;s in an object ID     */</span>
<a name="l00136"></a>00136 <span class="preprocessor">#define ASN_K_MAXENUM   100     </span><span class="comment">/* maximum enum values in an enum type  */</span>
<a name="l00137"></a>00137 <span class="preprocessor">#define ASN_K_MAXERRP   5       </span><span class="comment">/* maximum error parameters             */</span>
<a name="l00138"></a>00138 <span class="preprocessor">#define ASN_K_MAXERRSTK 8       </span><span class="comment">/* maximum levels on error ctxt stack   */</span>
<a name="l00139"></a>00139 <span class="preprocessor">#define ASN_K_ENCBUFSIZ 2*1024 </span><span class="comment">/* dynamic encode buffer extent size    */</span>
<a name="l00140"></a>00140 <span class="preprocessor">#define ASN_K_MEMBUFSEG 1024    </span><span class="comment">/* memory buffer extent size            */</span>
<a name="l00141"></a>00141
<a name="l00142"></a>00142 <span class="comment">/* Canonical character set definitions */</span>
<a name="l00143"></a>00143
<a name="l00144"></a>00144 <span class="preprocessor">#define NUM_ABITS  4</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#define NUM_UBITS  4</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#define NUM_CANSET \</span>
<a name="l00147"></a>00147 <span class="preprocessor">&quot; 0123456789&quot;</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>
<a name="l00149"></a>00149 <span class="preprocessor">#define PRN_ABITS  8</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span><span class="preprocessor">#define PRN_UBITS  7</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#define PRN_CANSET \</span>
<a name="l00152"></a>00152 <span class="preprocessor">&quot; &#39;()+,-./0123456789:=?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>
<a name="l00154"></a>00154 <span class="preprocessor">#define VIS_ABITS  8</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">#define VIS_UBITS  7</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">#define VIS_CANSET \</span>
<a name="l00157"></a>00157 <span class="preprocessor">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]&quot;\</span>
<a name="l00158"></a>00158 <span class="preprocessor">&quot;^_`abcdefghijklmnopqrstuvwxyz{|}~&quot;</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>
<a name="l00160"></a>00160 <span class="preprocessor">#define T61_ABITS  8</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span><span class="preprocessor">#define T61_UBITS  7</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span><span class="preprocessor">#define T61_CANSET \</span>
<a name="l00163"></a>00163 <span class="preprocessor">&quot; !\&quot;%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]&quot;\</span>
<a name="l00164"></a>00164 <span class="preprocessor">&quot;_abcdefghijklmnopqrstuvwxyz&quot;</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>
<a name="l00166"></a>00166 <span class="preprocessor">#define IA5_ABITS  8</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor">#define IA5_UBITS  7</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span><span class="preprocessor">#define IA5_CANSET \</span>
<a name="l00169"></a>00169 <span class="preprocessor">&quot;\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017&quot;\</span>
<a name="l00170"></a>00170 <span class="preprocessor">&quot;\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037&quot;\</span>
<a name="l00171"></a>00171 <span class="preprocessor">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]&quot;\</span>
<a name="l00172"></a>00172 <span class="preprocessor">&quot;^_`abcdefghijklmnopqrstuvwxyz{|}~&quot;</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>
<a name="l00174"></a>00174 <span class="preprocessor">#define IA5_RANGE1_LOWER 0</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span><span class="preprocessor">#define IA5_RANGE2_LOWER 0x5f</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span>
<a name="l00177"></a>00177 <span class="preprocessor">#define GEN_ABITS  8</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span><span class="preprocessor">#define GEN_UBITS  7</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span><span class="preprocessor">#define GEN_CANSET \</span>
<a name="l00180"></a>00180 <span class="preprocessor">&quot;\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017&quot;\</span>
<a name="l00181"></a>00181 <span class="preprocessor">&quot;\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037&quot;\</span>
<a name="l00182"></a>00182 <span class="preprocessor">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&quot;\</span>
<a name="l00183"></a>00183 <span class="preprocessor">&quot;`abcdefghijklmnopqrstuvwxyz{|}~\177\200\201\202\203\204\205\206\207&quot;\</span>
<a name="l00184"></a>00184 <span class="preprocessor">&quot;\220\221\222\223\224\225\226\227\230\231\232\233\234\235\236\237&quot;\</span>
<a name="l00185"></a>00185 <span class="preprocessor">&quot;\240\241\242\243\244\245\246\247\250\251\252\253\254\255\256\257&quot;\</span>
<a name="l00186"></a>00186 <span class="preprocessor">&quot;\260\261\262\263\264\265\266\267\270\271\272\273\274\275\276\277&quot;\</span>
<a name="l00187"></a>00187 <span class="preprocessor">&quot;\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317&quot;\</span>
<a name="l00188"></a>00188 <span class="preprocessor">&quot;\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337&quot;\</span>
<a name="l00189"></a>00189 <span class="preprocessor">&quot;\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357&quot;\</span>
<a name="l00190"></a>00190 <span class="preprocessor">&quot;\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377&quot;</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>
<a name="l00192"></a>00192 <span class="preprocessor">#define BMP_ABITS  16</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span><span class="preprocessor">#define BMP_UBITS  16</span>
<a name="l00194"></a>00194 <span class="preprocessor"></span><span class="preprocessor">#define BMP_FIRST  0</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">#define BMP_LAST   0xffff</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197 <span class="preprocessor">#define UCS_ABITS  32</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span><span class="preprocessor">#define UCS_UBITS  32</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="preprocessor">#define UCS_FIRST  0</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span><span class="preprocessor">#define UCS_LAST   0xfffffffful</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>
<a name="l00202"></a>00202 <span class="comment">/* ASN.1 Primitive Type Definitions */</span>
<a name="l00203"></a>00203
<a name="l00204"></a>00204 <span class="keyword">typedef</span> <span class="keywordtype">char</span>            ASN1CHAR;
<a name="l00205"></a>00205 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   ASN1OCTET;
<a name="l00206"></a>00206 <span class="keyword">typedef</span> ASN1OCTET       ASN1BOOL;
<a name="l00207"></a>00207 <span class="keyword">typedef</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span>     ASN1INT8;
<a name="l00208"></a>00208 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   ASN1UINT8;
<a name="l00209"></a>00209 <span class="keyword">typedef</span> <span class="keywordtype">int</span>             ASN1INT;
<a name="l00210"></a>00210 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    ASN1UINT;
<a name="l00211"></a>00211 <span class="keyword">typedef</span> ASN1INT         ASN1ENUM;
<a name="l00212"></a>00212 <span class="keyword">typedef</span> <span class="keywordtype">double</span>          ASN1REAL;
<a name="l00213"></a>00213
<a name="l00214"></a>00214 <span class="keyword">typedef</span> <span class="keywordtype">short</span>           ASN1SINT;
<a name="l00215"></a>00215 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>  ASN1USINT;
<a name="l00216"></a>00216 <span class="keyword">typedef</span> ASN1UINT        ASN1TAG;
<a name="l00217"></a>00217 <span class="preprocessor">#define ASN1TAG_LSHIFT  24</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span><span class="keyword">typedef</span> ASN1USINT       ASN116BITCHAR;
<a name="l00219"></a>00219 <span class="keyword">typedef</span> ASN1UINT        ASN132BITCHAR;
<a name="l00220"></a>00220 <span class="keyword">typedef</span> <span class="keywordtype">void</span>*           ASN1ANY;
<a name="l00221"></a>00221
<a name="l00222"></a>00222 <span class="preprocessor">#define ASN1UINT_MAX    4294967295U</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT_MAX     ((ASN1INT)2147483647L)</span>
<a name="l00224"></a>00224 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT_MIN     ((ASN1INT)(-ASN1INT_MAX-1))</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span>
<a name="l00226"></a>00226 <span class="preprocessor">#define ASN1UINTCNT(val) val##u</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>
<a name="l00228"></a>00228
<a name="l00229"></a>00229 <span class="preprocessor">#ifndef ASN1INT64</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>
<a name="l00231"></a>00231 <span class="preprocessor">#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(__WATCOMC__) || \</span>
<a name="l00232"></a>00232 <span class="preprocessor">defined(_WIN32)</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT64 __int64</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>
<a name="l00235"></a>00235 <span class="preprocessor">#elif defined(__IBMC__) || defined(__GNUC__) || defined(__SUNPRO_C) || \</span>
<a name="l00236"></a>00236 <span class="preprocessor">defined(__SUNPRO_CC) || defined(__CC_ARM) || \</span>
<a name="l00237"></a>00237 <span class="preprocessor">defined(__HPUX_CC__) || defined(__HP_aCC)</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INT64 long long</span>
<a name="l00239"></a>00239 <span class="preprocessor"></span>
<a name="l00240"></a>00240 <span class="preprocessor">#else  </span><span class="comment">/* !MSC_VER &amp;&amp; !__IBMC__ etc */</span>
<a name="l00241"></a>00241 <span class="preprocessor">#define ASN1INT64 long</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>
<a name="l00243"></a>00243 <span class="preprocessor">#endif</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* ASN1INT64 */</span>
<a name="l00245"></a>00245
<a name="l00246"></a>00246 <span class="preprocessor">#ifndef FALSE</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span><span class="preprocessor">#define FALSE           0</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span><span class="preprocessor">#define TRUE            1</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span>
<a name="l00251"></a><a class="code" href="structASN1OBJID.shtml">00251</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* object identifier */</span>
<a name="l00252"></a>00252    ASN1UINT     numids;
<a name="l00253"></a>00253    ASN1UINT     subid[ASN_K_MAXSUBIDS];
<a name="l00254"></a>00254 } <a class="code" href="structASN1OBJID.shtml">ASN1OBJID</a>;
<a name="l00255"></a>00255
<a name="l00256"></a><a class="code" href="structASN1OctStr.shtml">00256</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic octet string structure */</span>
<a name="l00257"></a>00257    ASN1UINT     numocts;
<a name="l00258"></a>00258    ASN1OCTET    data[1];
<a name="l00259"></a>00259 } <a class="code" href="structASN1OctStr.shtml">ASN1OctStr</a>;
<a name="l00260"></a>00260
<a name="l00261"></a><a class="code" href="structASN1DynOctStr.shtml">00261</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic octet string structure (dynamic) */</span>
<a name="l00262"></a>00262    ASN1UINT     numocts;
<a name="l00263"></a>00263    <span class="keyword">const</span> ASN1OCTET* data;
<a name="l00264"></a>00264 } <a class="code" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a>;
<a name="l00265"></a>00265
<a name="l00266"></a><a class="code" href="structASN1DynBitStr.shtml">00266</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{        <span class="comment">/* generic bit string structure (dynamic) */</span>
<a name="l00267"></a>00267    ASN1UINT     numbits;
<a name="l00268"></a>00268    <span class="keyword">const</span> ASN1OCTET* data;
<a name="l00269"></a>00269 } <a class="code" href="structASN1DynBitStr.shtml">ASN1DynBitStr</a>;
<a name="l00270"></a>00270
<a name="l00271"></a><a class="code" href="structASN1BitStr32.shtml">00271</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{  <span class="comment">/* fixed-size bit string that can hold up to 32 bits */</span>
<a name="l00272"></a>00272    ASN1UINT     numbits;
<a name="l00273"></a>00273    ASN1OCTET    data[4];
<a name="l00274"></a>00274 } <a class="code" href="structASN1BitStr32.shtml">ASN1BitStr32</a>;
<a name="l00275"></a>00275
<a name="l00276"></a><a class="code" href="structASN1SeqOf.shtml">00276</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* generic sequence of structure        */</span>
<a name="l00277"></a>00277    ASN1UINT     n;
<a name="l00278"></a>00278    <span class="keywordtype">void</span>*        elem;
<a name="l00279"></a>00279 } <a class="code" href="structASN1SeqOf.shtml">ASN1SeqOf</a>;
<a name="l00280"></a>00280
<a name="l00281"></a><a class="code" href="structASN1SeqOfOctStr.shtml">00281</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* sequence of OCTET STRING             */</span>
<a name="l00282"></a>00282    ASN1UINT     n;
<a name="l00283"></a>00283    <a class="code" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a>* elem;
<a name="l00284"></a>00284 } <a class="code" href="structASN1SeqOfOctStr.shtml">ASN1SeqOfOctStr</a>;
<a name="l00285"></a>00285
<a name="l00286"></a><a class="code" href="structASN1OpenType.shtml">00286</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{                <span class="comment">/* generic open type data structure     */</span>
<a name="l00287"></a>00287    ASN1UINT     numocts;
<a name="l00288"></a>00288    <span class="keyword">const</span> ASN1OCTET* data;
<a name="l00289"></a>00289 } <a class="code" href="structASN1OpenType.shtml">ASN1OpenType</a>;
<a name="l00290"></a>00290
<a name="l00291"></a>00291 <span class="comment">/* ASN.1 useful type definitions */</span>
<a name="l00292"></a>00292
<a name="l00293"></a><a class="code" href="structAsn116BitCharString.shtml">00293</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00294"></a>00294    ASN1UINT       nchars;
<a name="l00295"></a>00295    ASN116BITCHAR* data;
<a name="l00296"></a>00296 } <a class="code" href="structAsn116BitCharString.shtml">Asn116BitCharString</a>;
<a name="l00297"></a>00297
<a name="l00298"></a><a class="code" href="structAsn132BitCharString.shtml">00298</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00299"></a>00299    ASN1UINT       nchars;
<a name="l00300"></a>00300    ASN132BITCHAR* data;
<a name="l00301"></a>00301 } <a class="code" href="structAsn132BitCharString.shtml">Asn132BitCharString</a>;
<a name="l00302"></a>00302
<a name="l00303"></a>00303 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GeneralizedTime;
<a name="l00304"></a>00304 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GeneralString;
<a name="l00305"></a>00305 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1GraphicString;
<a name="l00306"></a>00306 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1IA5String;
<a name="l00307"></a>00307 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1ISO646String;
<a name="l00308"></a>00308 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1NumericString;
<a name="l00309"></a>00309 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1ObjectDescriptor;
<a name="l00310"></a>00310 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1PrintableString;
<a name="l00311"></a>00311 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1TeletexString;
<a name="l00312"></a>00312 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1T61String;
<a name="l00313"></a>00313 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1UTCTime;
<a name="l00314"></a>00314 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1UTF8String;
<a name="l00315"></a>00315 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1VideotexString;
<a name="l00316"></a>00316 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*   ASN1VisibleString;
<a name="l00317"></a>00317
<a name="l00318"></a>00318 <span class="keyword">typedef</span> <a class="code" href="structAsn116BitCharString.shtml">Asn116BitCharString</a> <a class="code" href="structAsn116BitCharString.shtml">ASN1BMPString</a>;
<a name="l00319"></a>00319 <span class="keyword">typedef</span> <a class="code" href="structAsn132BitCharString.shtml">Asn132BitCharString</a> <a class="code" href="structAsn132BitCharString.shtml">ASN1UniversalString</a>;
<a name="l00320"></a>00320
<a name="l00321"></a>00321 <span class="comment">/* ASN.1 constrained string structures */</span>
<a name="l00322"></a>00322
<a name="l00323"></a><a class="code" href="structAsn1CharArray.shtml">00323</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00324"></a>00324    <span class="keywordtype">int</span>          nchars;
<a name="l00325"></a>00325    <span class="keywordtype">char</span>         data[255];
<a name="l00326"></a>00326 } <a class="code" href="structAsn1CharArray.shtml">Asn1CharArray</a>;
<a name="l00327"></a>00327
<a name="l00328"></a><a class="code" href="structAsn1CharSet.shtml">00328</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00329"></a>00329    <a class="code" href="structAsn1CharArray.shtml">Asn1CharArray</a> charSet;
<a name="l00330"></a>00330    <span class="keyword">const</span> <span class="keywordtype">char</span>* canonicalSet;
<a name="l00331"></a>00331    <span class="keywordtype">int</span>          canonicalSetSize;
<a name="l00332"></a>00332    <span class="keywordtype">unsigned</span>     canonicalSetBits;
<a name="l00333"></a>00333    <span class="keywordtype">unsigned</span>     charSetUnalignedBits;
<a name="l00334"></a>00334    <span class="keywordtype">unsigned</span>     charSetAlignedBits;
<a name="l00335"></a>00335 } <a class="code" href="structAsn1CharSet.shtml">Asn1CharSet</a>;
<a name="l00336"></a>00336
<a name="l00337"></a><a class="code" href="structAsn116BitCharSet.shtml">00337</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00338"></a>00338    <a class="code" href="structAsn116BitCharString.shtml">Asn116BitCharString</a> charSet;
<a name="l00339"></a>00339    ASN1USINT    firstChar, lastChar;
<a name="l00340"></a>00340    <span class="keywordtype">unsigned</span>     unalignedBits;
<a name="l00341"></a>00341    <span class="keywordtype">unsigned</span>     alignedBits;
<a name="l00342"></a>00342 } <a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>;
<a name="l00343"></a>00343
<a name="l00344"></a>00344 <span class="comment">/* ASN.1 size constraint structure */</span>
<a name="l00345"></a>00345
<a name="l00346"></a><a class="code" href="struct__Asn1SizeCnst.shtml">00346</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct__Asn1SizeCnst.shtml">_Asn1SizeCnst</a> {
<a name="l00347"></a>00347    ASN1BOOL     extended;
<a name="l00348"></a>00348    ASN1UINT     lower;
<a name="l00349"></a>00349    ASN1UINT     upper;
<a name="l00350"></a>00350    <span class="keyword">struct </span><a class="code" href="struct__Asn1SizeCnst.shtml">_Asn1SizeCnst</a>* next;
<a name="l00351"></a>00351 } <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>;
<a name="l00352"></a>00352
<a name="l00353"></a>00353 <span class="comment">/* ASN.1 encode/decode buffer info structure */</span>
<a name="l00354"></a>00354
<a name="l00355"></a><a class="code" href="structASN1BUFFER.shtml">00355</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00356"></a>00356    ASN1OCTET*   data;           <span class="comment">/* pointer to start of data buffer      */</span>
<a name="l00357"></a>00357    ASN1UINT     byteIndex;      <span class="comment">/* byte index                           */</span>
<a name="l00358"></a>00358    ASN1UINT     size;           <span class="comment">/* current buffer size                  */</span>
<a name="l00359"></a>00359    ASN1SINT     bitOffset;      <span class="comment">/* current bit offset (8 - 1)           */</span>
<a name="l00360"></a>00360    ASN1BOOL     dynamic;        <span class="comment">/* is buffer dynamic?                   */</span>
<a name="l00361"></a>00361 } <a class="code" href="structASN1BUFFER.shtml">ASN1BUFFER</a>;
<a name="l00362"></a>00362
<a name="l00363"></a>00363 <span class="comment">/* This structure is used to save the current state of the buffer */</span>
<a name="l00364"></a>00364
<a name="l00365"></a><a class="code" href="structASN1BUFSAVE.shtml">00365</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00366"></a>00366    ASN1UINT     byteIndex;      <span class="comment">/* byte index                           */</span>
<a name="l00367"></a>00367    ASN1SINT     bitOffset;      <span class="comment">/* current bit offset (8 - 1)           */</span>
<a name="l00368"></a>00368    ASN1USINT    flags;          <span class="comment">/* flag bits                            */</span>
<a name="l00369"></a>00369 } <a class="code" href="structASN1BUFSAVE.shtml">ASN1BUFSAVE</a>;
<a name="l00370"></a>00370
<a name="l00371"></a>00371 <span class="comment">/* ASN.1 run-time error info structures */</span>
<a name="l00372"></a>00372
<a name="l00373"></a><a class="code" href="structASN1ErrLocn.shtml">00373</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00374"></a>00374    <span class="keyword">const</span> <span class="keywordtype">char</span>* module;
<a name="l00375"></a>00375    <span class="keywordtype">int</span>          lineno;
<a name="l00376"></a>00376 } <a class="code" href="structASN1ErrLocn.shtml">ASN1ErrLocn</a>;
<a name="l00377"></a>00377
<a name="l00378"></a><a class="code" href="structASN1ErrInfo.shtml">00378</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00379"></a>00379    <a class="code" href="structASN1ErrLocn.shtml">ASN1ErrLocn</a>  stack[ASN_K_MAXERRSTK];
<a name="l00380"></a>00380    <span class="keywordtype">int</span>          stkx;
<a name="l00381"></a>00381    <span class="keywordtype">int</span>          status;
<a name="l00382"></a>00382    <span class="keywordtype">int</span>          parmcnt;
<a name="l00383"></a>00383    <span class="keyword">const</span> <span class="keywordtype">char</span>* parms[ASN_K_MAXERRP];
<a name="l00384"></a>00384 } <a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>;
<a name="l00385"></a>00385
<a name="l00386"></a>00386 <span class="preprocessor">#define XM_K_MEMBLKSIZ  (4*1024)</span>
<a name="l00387"></a>00387 <span class="preprocessor"></span>
<a name="l00388"></a>00388 <span class="comment">/* Flag mask constant values */</span>
<a name="l00389"></a>00389
<a name="l00390"></a>00390 <span class="preprocessor">#define ASN1DYNCTXT     0x8000</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span><span class="preprocessor">#define ASN1INDEFLEN    0x4000</span>
<a name="l00392"></a>00392 <span class="preprocessor"></span><span class="preprocessor">#define ASN1TRACE       0x2000</span>
<a name="l00393"></a>00393 <span class="preprocessor"></span><span class="preprocessor">#define ASN1LASTEOC     0x1000</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span><span class="preprocessor">#define ASN1FASTCOPY    0x0800  </span><span class="comment">/* turns on the &quot;fast copy&quot; mode        */</span>
<a name="l00395"></a>00395 <span class="preprocessor">#define ASN1CONSTAG     0x0400  </span><span class="comment">/* form of last parsed tag              */</span>
<a name="l00396"></a>00396 <span class="preprocessor">#define ASN1CANXER      0x0200  </span><span class="comment">/* canonical XER                        */</span>
<a name="l00397"></a>00397 <span class="preprocessor">#define ASN1SAVEBUF     0x0100  </span><span class="comment">/* do not free dynamic encode buffer    */</span>
<a name="l00398"></a>00398 <span class="preprocessor">#define ASN1OPENTYPE    0x0080  </span><span class="comment">/* item is an open type field           */</span>
<a name="l00399"></a>00399
<a name="l00400"></a>00400 <span class="comment">/* ASN.1 encode/decode context block structure */</span>
<a name="l00401"></a>00401
<a name="l00402"></a>00402 <span class="keyword">struct </span>EventHandler;
<a name="l00403"></a>00403
<a name="l00404"></a><a class="code" href="structOOCTXT.shtml">00404</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structOOCTXT.shtml">OOCTXT</a> {         <span class="comment">/* context block                        */</span>
<a name="l00405"></a>00405    <span class="keywordtype">void</span>*        pMsgMemHeap;    <span class="comment">/* internal message memory heap         */</span>
<a name="l00406"></a>00406    <span class="keywordtype">void</span>*        pTypeMemHeap;   <span class="comment">/* memory heap                          */</span>
<a name="l00407"></a>00407    <a class="code" href="structASN1BUFFER.shtml">ASN1BUFFER</a>   buffer;         <span class="comment">/* data buffer                          */</span>
<a name="l00408"></a>00408    <a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>  errInfo;        <span class="comment">/* run-time error info                  */</span>
<a name="l00409"></a>00409    <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSizeConstraint;  <span class="comment">/* Size constraint list              */</span>
<a name="l00410"></a>00410    <span class="keyword">const</span> <span class="keywordtype">char</span>* pCharSet;        <span class="comment">/* String of permitted characters       */</span>
<a name="l00411"></a>00411    <span class="keyword">struct </span>EventHandler* pEventHandler; <span class="comment">/* event handler object          */</span>
<a name="l00412"></a>00412    ASN1USINT    flags;          <span class="comment">/* flag bits                            */</span>
<a name="l00413"></a>00413    ASN1OCTET    spare[2];
<a name="l00414"></a>00414 } <a class="code" href="structOOCTXT.shtml">OOCTXT</a>;
<a name="l00415"></a>00415
<a name="l00416"></a>00416 <span class="comment">/* macros and function prototypes */</span>
<a name="l00417"></a>00417
<a name="l00418"></a>00418 <span class="preprocessor">#ifndef ASN1MAX</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span><span class="preprocessor">#define ASN1MAX(a,b)        (((a)&gt;(b))?(a):(b))</span>
<a name="l00420"></a>00420 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span>
<a name="l00422"></a>00422 <span class="preprocessor">#ifndef ASN1MIN</span>
<a name="l00423"></a>00423 <span class="preprocessor"></span><span class="preprocessor">#define ASN1MIN(a,b)        (((a)&lt;(b))?(a):(b))</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00425"></a>00425 <span class="preprocessor"></span>
<a name="l00445"></a><a class="code" href="group__mem.shtml#ga906a06d8eb0e5b00f7fcd02f0c622457">00445</a> <span class="preprocessor">#define ALLOC_ASN1ARRAY(pctxt,pseqof,type) do {\</span>
<a name="l00446"></a>00446 <span class="preprocessor">if (sizeof(type)*(pseqof)-&gt;n &lt; (pseqof)-&gt;n) return ASN_E_NOMEM; \</span>
<a name="l00447"></a>00447 <span class="preprocessor">if (((pseqof)-&gt;elem = (type*) memHeapAlloc \</span>
<a name="l00448"></a>00448 <span class="preprocessor">(&amp;(pctxt)-&gt;pTypeMemHeap, sizeof(type)*(pseqof)-&gt;n)) == 0) return ASN_E_NOMEM; \</span>
<a name="l00449"></a>00449 <span class="preprocessor">} while (0)</span>
<a name="l00450"></a>00450 <span class="preprocessor"></span>
<a name="l00458"></a><a class="code" href="group__mem.shtml#ga34cd428201a27b098b0d233578605610">00458</a> <span class="preprocessor">#define ALLOC_ASN1ELEM(pctxt,type) \</span>
<a name="l00459"></a>00459 <span class="preprocessor">(type*) memHeapAllocZ (&amp;(pctxt)-&gt;pTypeMemHeap, sizeof(type))</span>
<a name="l00460"></a>00460 <span class="preprocessor"></span>
<a name="l00471"></a><a class="code" href="group__mem.shtml#ga0cd47b770b5ff5071c1d190268043578">00471</a> <span class="preprocessor">#define ASN1MALLOC(pctxt,nbytes) \</span>
<a name="l00472"></a>00472 <span class="preprocessor">memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap, nbytes)</span>
<a name="l00473"></a>00473 <span class="preprocessor"></span>
<a name="l00482"></a><a class="code" href="group__mem.shtml#ga0b0941fe8715dd66a66f02218e14f4cc">00482</a> <span class="preprocessor">#define ASN1MEMFREE(pctxt) \</span>
<a name="l00483"></a>00483 <span class="preprocessor">memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
<a name="l00484"></a>00484 <span class="preprocessor"></span>
<a name="l00496"></a><a class="code" href="group__mem.shtml#gafc81e107fe3fefdf39a18ccd9dec0e45">00496</a> <span class="preprocessor">#define ASN1MEMFREEPTR(pctxt,pmem)  \</span>
<a name="l00497"></a>00497 <span class="preprocessor">memHeapFreePtr(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)pmem)</span>
<a name="l00498"></a>00498 <span class="preprocessor"></span>
<a name="l00502"></a>00502 <span class="preprocessor">#define ASN1BUFCUR(cp)          (cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</span>
<a name="l00503"></a>00503 <span class="preprocessor"></span><span class="preprocessor">#define ASN1BUFPTR(cp)          &amp;(cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</span>
<a name="l00504"></a>00504 <span class="preprocessor"></span>
<a name="l00505"></a>00505 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00506"></a>00506 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00507"></a>00507 <span class="preprocessor">#endif</span>
<a name="l00508"></a>00508 <span class="preprocessor"></span>
<a name="l00509"></a>00509 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00510"></a>00510 <span class="preprocessor"></span><span class="preprocessor">#ifdef MAKE_DLL</span>
<a name="l00511"></a>00511 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN __declspec(dllexport)</span>
<a name="l00512"></a>00512 <span class="preprocessor"></span><span class="preprocessor">#elif defined (USEASN1DLL)</span>
<a name="l00513"></a>00513 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN __declspec(dllimport)</span>
<a name="l00514"></a>00514 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span><span class="preprocessor">#define EXTERN</span>
<a name="l00516"></a>00516 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* MAKE_DLL */</span>
<a name="l00517"></a>00517 <span class="preprocessor">#endif </span><span class="comment">/* EXTERN */</span>
<a name="l00518"></a>00518
<a name="l00519"></a>00519 <span class="preprocessor">#ifndef _NO_MALLOC</span>
<a name="l00520"></a>00520 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       malloc(nbytes)</span>
<a name="l00521"></a>00521 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            free(ptr)</span>
<a name="l00522"></a>00522 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00523"></a>00523 <span class="preprocessor"></span>
<a name="l00524"></a>00524 <span class="preprocessor">#ifdef _NO_THREADS</span>
<a name="l00525"></a>00525 <span class="preprocessor"></span><span class="keyword">extern</span> EXTERN <a class="code" href="structOOCTXT.shtml">OOCTXT</a> g_ctxt;
<a name="l00526"></a>00526
<a name="l00527"></a>00527 <span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       memAlloc(&amp;g_ctxt,(nbytes))</span>
<a name="l00528"></a>00528 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            memFreePtr(&amp;g_ctxt,(ptr))</span>
<a name="l00529"></a>00529 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00530"></a>00530 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTMALLOC0(nbytes)       (void*)0</span>
<a name="l00531"></a>00531 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE0(ptr)            (void*)0</span>
<a name="l00532"></a>00532 <span class="preprocessor"></span>
<a name="l00533"></a>00533 <span class="preprocessor">#endif </span><span class="comment">/* _NO_THREADS */</span>
<a name="l00534"></a>00534 <span class="preprocessor">#endif </span><span class="comment">/* _NO_MALLOC */</span>
<a name="l00535"></a>00535
<a name="l00536"></a>00536 <span class="preprocessor">#define ASN1CRTMALLOC memHeapAlloc</span>
<a name="l00537"></a>00537 <span class="preprocessor"></span><span class="preprocessor">#define ASN1CRTFREE   ASN1MEMFREEPTR</span>
<a name="l00538"></a>00538 <span class="preprocessor"></span>
<a name="l00539"></a>00539 <span class="comment">/* Function prototypes */</span>
<a name="l00540"></a>00540
<a name="l00541"></a>00541 <span class="preprocessor">#define encodeIA5String(pctxt,value,permCharSet) \</span>
<a name="l00542"></a>00542 <span class="preprocessor">encodeConstrainedStringEx (pctxt, value, permCharSet, 8, 7, 7)</span>
<a name="l00543"></a>00543 <span class="preprocessor"></span>
<a name="l00544"></a>00544 <span class="preprocessor">#define encodeGeneralizedTime   encodeIA5String</span>
<a name="l00545"></a>00545 <span class="preprocessor"></span>
<a name="l00546"></a>00546 <span class="preprocessor">#define decodeIA5String(pctxt,pvalue,permCharSet) \</span>
<a name="l00547"></a>00547 <span class="preprocessor">decodeConstrainedStringEx (pctxt, pvalue, permCharSet, 8, 7, 7)</span>
<a name="l00548"></a>00548 <span class="preprocessor"></span>
<a name="l00549"></a>00549 <span class="preprocessor">#define decodeGeneralizedTime   decodeIA5String</span>
<a name="l00550"></a>00550 <span class="preprocessor"></span>
<a name="l00551"></a>00551 <span class="comment">/* run-time error and diagnostic functions */</span>
<a name="l00552"></a>00552
<a name="l00553"></a>00553 <span class="comment">/* Context management functions */</span>
<a name="l00554"></a>00554
<a name="l00587"></a>00587 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cmfun.shtml#gae3623ea4a7ab9e291b3a96ed534998da" title="This function assigns a buffer to a context block.">initContextBuffer</a>
<a name="l00588"></a>00588 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> ASN1OCTET* bufaddr, ASN1UINT bufsiz);
<a name="l00589"></a>00589
<a name="l00603"></a>00603 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cmfun.shtml#gae26e6fe4d8958532ae1cda5ef9bbb9f2" title="This function initializes a context block.">initContext</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l00604"></a>00604
<a name="l00612"></a>00612 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__cmfun.shtml#ga5dfc65f56f288619b1a4cd911de643de" title="This function frees all dynamic memory associated with a context.">freeContext</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l00613"></a>00613
<a name="l00622"></a>00622 EXTERN <a class="code" href="structOOCTXT.shtml">OOCTXT</a>* <a class="code" href="group__cmfun.shtml#gae61527aaa1233f220728544389f817d6" title="This function allocates a new OOCTXT block and initializes it.">newContext</a> (<span class="keywordtype">void</span>);
<a name="l00623"></a>00623
<a name="l00624"></a>00624 EXTERN <span class="keywordtype">void</span> copyContext (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pdest, <a class="code" href="structOOCTXT.shtml">OOCTXT</a>* psrc);
<a name="l00625"></a>00625 EXTERN <span class="keywordtype">int</span>  initSubContext (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structOOCTXT.shtml">OOCTXT</a>* psrc);
<a name="l00626"></a>00626 EXTERN <span class="keywordtype">void</span> setCtxtFlag (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1USINT mask);
<a name="l00627"></a>00627 EXTERN <span class="keywordtype">void</span> clearCtxtFlag (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1USINT mask);
<a name="l00628"></a>00628
<a name="l00629"></a>00629 EXTERN <span class="keywordtype">int</span> setPERBuffer
<a name="l00630"></a>00630 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1OCTET* bufaddr, ASN1UINT bufsiz, ASN1BOOL aligned);
<a name="l00631"></a>00631
<a name="l00632"></a>00632 EXTERN <span class="keywordtype">int</span> setPERBufferUsingCtxt (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pTarget, <a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pSource);
<a name="l00633"></a>00633
<a name="l00634"></a>00634 <span class="preprocessor">#define ZEROCONTEXT(pctxt) memset(pctxt,0,sizeof(OOCTXT))</span>
<a name="l00635"></a>00635 <span class="preprocessor"></span>
<a name="l00661"></a>00661 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga0c000ff8a477db667ca7b8495cfbd6cd" title="This function adds an integer parameter to an error information structure.">errAddIntParm</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo, <span class="keywordtype">int</span> errParm);
<a name="l00662"></a>00662
<a name="l00677"></a>00677 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#gad305421fe8880a00717c286b16c7a755" title="This function adds an string parameter to an error information structure.">errAddStrParm</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo,
<a name="l00678"></a>00678                             <span class="keyword">const</span> <span class="keywordtype">char</span>* errprm_p);
<a name="l00679"></a>00679
<a name="l00694"></a>00694 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga69d2110465fa515ab99326783a86fd6f" title="This function adds an unsigned integer parameter to an error information structure...">errAddUIntParm</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> errParm);
<a name="l00695"></a>00695
<a name="l00696"></a>00696
<a name="l00697"></a>00697 EXTERN <span class="keywordtype">int</span> errCopyData (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pSrcErrInfo,
<a name="l00698"></a>00698                         <a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pDestErrInfo);
<a name="l00699"></a>00699
<a name="l00713"></a>00713 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__errfp.shtml#gaa12aa5d6dc904fa3f7868138401e3f77" title="This function frees memory associated with the storage of parameters associated with...">errFreeParms</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo);
<a name="l00714"></a>00714
<a name="l00715"></a>00715
<a name="l00716"></a>00716 EXTERN <span class="keywordtype">char</span>* errFmtMsg (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo, <span class="keywordtype">char</span>* bufp);
<a name="l00717"></a>00717
<a name="l00723"></a>00723 EXTERN <span class="keywordtype">char</span>* <a class="code" href="group__errfp.shtml#ga5aa45a513a753ffb3b78d693d3ffa302" title="This function gets the text of the error.">errGetText</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l00724"></a>00724
<a name="l00737"></a>00737 EXTERN <span class="keywordtype">void</span> <a class="code" href="group__errfp.shtml#ga0dca07c145628636d01da14067c0bc9b" title="This function prints error information to the standard output device.">errPrint</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo);
<a name="l00738"></a>00738
<a name="l00748"></a>00748 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#gaf4ebc9c5985418c58d621246a7e2447d" title="This function resets the error information in the error information sturcture.">errReset</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo);
<a name="l00749"></a>00749
<a name="l00773"></a>00773 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__errfp.shtml#ga7d5ae7d3d41200b5540b124ee5cafdda" title="This function sets error information in an error information structure.">errSetData</a> (<a class="code" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>* pErrInfo, <span class="keywordtype">int</span> status,
<a name="l00774"></a>00774                        <span class="keyword">const</span> <span class="keywordtype">char</span>* module, <span class="keywordtype">int</span> lno);
<a name="l00775"></a>00775
<a name="l00776"></a>00776 <span class="preprocessor">#ifndef _COMPACT</span>
<a name="l00777"></a>00777 <span class="preprocessor"></span><span class="preprocessor">#define LOG_ASN1ERR(ctxt,stat) \</span>
<a name="l00778"></a>00778 <span class="preprocessor">errSetData(&amp;(ctxt)-&gt;errInfo,stat,__FILE__,__LINE__)</span>
<a name="l00779"></a>00779 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00780"></a>00780 <span class="preprocessor"></span><span class="preprocessor">#define LOG_ASN1ERR(ctxt,stat) \</span>
<a name="l00781"></a>00781 <span class="preprocessor">((ctxt)-&gt;errInfo.status = stat, stat)</span>
<a name="l00782"></a>00782 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00783"></a>00783 <span class="preprocessor"></span>
<a name="l00784"></a>00784 <span class="preprocessor">#define LOG_ASN1ERR_AND_FREE(pctxt,stat,lctxt) \</span>
<a name="l00785"></a>00785 <span class="preprocessor">freeContext ((lctxt)), LOG_ASN1ERR(pctxt, stat)</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span>
<a name="l00790"></a><a class="code" href="group__cruntime.shtml#ga394cd27b9b36aea4b59f2a7ca012db06">00790</a> <span class="preprocessor">#define RT_MH_DONTKEEPFREE 0x1</span>
<a name="l00791"></a>00791 <span class="preprocessor"></span>
<a name="l00792"></a>00792 <span class="preprocessor">#define OSRTMH_PROPID_DEFBLKSIZE   1</span>
<a name="l00793"></a>00793 <span class="preprocessor"></span><span class="preprocessor">#define OSRTMH_PROPID_SETFLAGS     2</span>
<a name="l00794"></a>00794 <span class="preprocessor"></span><span class="preprocessor">#define OSRTMH_PROPID_CLEARFLAGS   3</span>
<a name="l00795"></a>00795 <span class="preprocessor"></span>
<a name="l00796"></a>00796 <span class="preprocessor">#define OSRTMH_PROPID_USER         10</span>
<a name="l00797"></a>00797 <span class="preprocessor"></span>
<a name="l00811"></a><a class="code" href="group__rtmem.shtml#gadc9184dda7d78edbf402d056094cc539">00811</a> <span class="preprocessor">#define memAlloc(pctxt,nbytes) \</span>
<a name="l00812"></a>00812 <span class="preprocessor">memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</span>
<a name="l00813"></a>00813 <span class="preprocessor"></span>
<a name="l00823"></a><a class="code" href="group__rtmem.shtml#ga1ab2ae49b6ba33c5a6740cb9c79f23ad">00823</a> <span class="preprocessor">#define memAllocZ(pctxt,nbytes) \</span>
<a name="l00824"></a>00824 <span class="preprocessor">memHeapAllocZ(&amp;(pctxt)-&gt;pTypeMemHeap,nbytes)</span>
<a name="l00825"></a>00825 <span class="preprocessor"></span>
<a name="l00835"></a><a class="code" href="group__rtmem.shtml#ga5a0810cd281526083d4e7cf8e801304e">00835</a> <span class="preprocessor">#define memAllocType(pctxt,ctype) \</span>
<a name="l00836"></a>00836 <span class="preprocessor">(ctype*)memHeapAlloc(&amp;(pctxt)-&gt;pTypeMemHeap,sizeof(ctype))</span>
<a name="l00837"></a>00837 <span class="preprocessor"></span>
<a name="l00847"></a><a class="code" href="group__rtmem.shtml#ga771b2a6e3357c5569de3b8bb9fa77374">00847</a> <span class="preprocessor">#define memAllocTypeZ(pctxt,ctype) \</span>
<a name="l00848"></a>00848 <span class="preprocessor">(ctype*)memHeapAllocZ(&amp;(pctxt)-&gt;pTypeMemHeap,sizeof(ctype))</span>
<a name="l00849"></a>00849 <span class="preprocessor"></span>
<a name="l00864"></a><a class="code" href="group__rtmem.shtml#gaa150962db9e4621eab23e31986d0d976">00864</a> <span class="preprocessor">#define memRealloc(pctxt,mem_p,nbytes) \</span>
<a name="l00865"></a>00865 <span class="preprocessor">memHeapRealloc(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p, nbytes)</span>
<a name="l00866"></a>00866 <span class="preprocessor"></span>
<a name="l00878"></a><a class="code" href="group__rtmem.shtml#ga088d3d681c22a0c987d6b6136c5f0263">00878</a> <span class="preprocessor">#define memFreePtr(pctxt,mem_p) \</span>
<a name="l00879"></a>00879 <span class="preprocessor">if (memHeapCheckPtr (&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p)) \</span>
<a name="l00880"></a>00880 <span class="preprocessor">memHeapFreePtr(&amp;(pctxt)-&gt;pTypeMemHeap, (void*)mem_p)</span>
<a name="l00881"></a>00881 <span class="preprocessor"></span>
<a name="l00890"></a><a class="code" href="group__rtmem.shtml#gac49b973c93cc035daa33af99af431df8">00890</a> <span class="preprocessor">#define memFree(pctxt) \</span>
<a name="l00891"></a>00891 <span class="preprocessor">memHeapFreeAll(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
<a name="l00892"></a>00892 <span class="preprocessor"></span>
<a name="l00907"></a><a class="code" href="group__rtmem.shtml#ga1bd754cdd038430ebfd3d8882805ac83">00907</a> <span class="preprocessor">#define memReset(pctxt) \</span>
<a name="l00908"></a>00908 <span class="preprocessor">memHeapReset(&amp;(pctxt)-&gt;pTypeMemHeap)</span>
<a name="l00909"></a>00909 <span class="preprocessor"></span>
<a name="l00910"></a>00910 <span class="comment">/* Alias for __cdecl modifier; if __cdecl keyword is not supported,</span>
<a name="l00911"></a>00911 <span class="comment"> * redefine it as empty macro. */</span>
<a name="l00912"></a>00912
<a name="l00913"></a>00913 <span class="preprocessor">#if !defined(OSCDECL)</span>
<a name="l00914"></a>00914 <span class="preprocessor"></span><span class="preprocessor">#if defined(_MSC_VER) || defined(__BORLANDC__)</span>
<a name="l00915"></a>00915 <span class="preprocessor"></span><span class="preprocessor">#define OSCDECL __cdecl</span>
<a name="l00916"></a>00916 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00917"></a>00917 <span class="preprocessor"></span><span class="preprocessor">#define OSCDECL</span>
<a name="l00918"></a>00918 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00919"></a>00919 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* OSCDECL */</span>
<a name="l00920"></a>00920
<a name="l00921"></a>00921 <span class="comment">/* Pointers to C Run-Time memory allocation functions *</span>
<a name="l00922"></a>00922 <span class="comment"> * (See memSetAllocFuncs)                           */</span>
<a name="l00923"></a>00923
<a name="l00924"></a>00924 <span class="keyword">typedef</span> <span class="keywordtype">void</span> *(OSCDECL *OSMallocFunc ) (<span class="keywordtype">size_t</span> size);
<a name="l00925"></a>00925 <span class="keyword">typedef</span> <span class="keywordtype">void</span> *(OSCDECL *OSReallocFunc) (<span class="keywordtype">void</span> *ptr, <span class="keywordtype">size_t</span> size);
<a name="l00926"></a>00926 <span class="keyword">typedef</span> void  (OSCDECL *OSFreeFunc   ) (<span class="keywordtype">void</span> *ptr);
<a name="l00927"></a>00927
<a name="l00928"></a>00928 EXTERN <span class="keywordtype">void</span>  memHeapAddRef (<span class="keywordtype">void</span>** ppvMemHeap);
<a name="l00929"></a>00929 EXTERN <span class="keywordtype">void</span>* memHeapAlloc (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">int</span> nbytes);
<a name="l00930"></a>00930 EXTERN <span class="keywordtype">void</span>* memHeapAllocZ (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">int</span> nbytes);
<a name="l00931"></a>00931 EXTERN <span class="keywordtype">int</span>   memHeapCheckPtr (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p);
<a name="l00932"></a>00932 EXTERN <span class="keywordtype">int</span>   memHeapCreate (<span class="keywordtype">void</span>** ppvMemHeap);
<a name="l00933"></a>00933 EXTERN <span class="keywordtype">void</span>  memHeapFreeAll (<span class="keywordtype">void</span>** ppvMemHeap);
<a name="l00934"></a>00934 EXTERN <span class="keywordtype">void</span>  memHeapFreePtr (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p);
<a name="l00935"></a>00935 EXTERN <span class="keywordtype">void</span>* memHeapRealloc (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keywordtype">void</span>* mem_p, <span class="keywordtype">int</span> nbytes_);
<a name="l00936"></a>00936 EXTERN <span class="keywordtype">void</span>  memHeapRelease (<span class="keywordtype">void</span>** ppvMemHeap);
<a name="l00937"></a>00937 EXTERN <span class="keywordtype">void</span>  memHeapReset (<span class="keywordtype">void</span>** ppvMemHeap);
<a name="l00938"></a>00938
<a name="l00939"></a>00939 EXTERN <span class="keywordtype">void</span>* memHeapMarkSaved
<a name="l00940"></a>00940 (<span class="keywordtype">void</span>** ppvMemHeap, <span class="keyword">const</span> <span class="keywordtype">void</span>* mem_p, ASN1BOOL saved);
<a name="l00941"></a>00941
<a name="l00942"></a>00942 EXTERN <span class="keywordtype">void</span>  memHeapSetProperty
<a name="l00943"></a>00943 (<span class="keywordtype">void</span>** ppvMemHeap, ASN1UINT propId, <span class="keywordtype">void</span>* pProp);
<a name="l00944"></a>00944
<a name="l00945"></a>00945
<a name="l00961"></a>00961 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__rtmem.shtml#gae5aa2674a0b19177b3fe8ce17b58581a" title="This function sets the pointers to standard allocation functions.">memSetAllocFuncs</a> (OSMallocFunc malloc_func,
<a name="l00962"></a>00962                                OSReallocFunc realloc_func,
<a name="l00963"></a>00963                                OSFreeFunc free_func);
<a name="l00964"></a>00964
<a name="l00965"></a>00965 EXTERN <span class="keywordtype">void</span>  memFreeOpenSeqExt (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, DList *pElemList);
<a name="l00966"></a>00966
<a name="l00967"></a>00967 <span class="comment">/*</span>
<a name="l00968"></a>00968 <span class="comment"> * This function sets flags to a heap. May be used to control the heap&#39;s</span>
<a name="l00969"></a>00969 <span class="comment"> * behavior.</span>
<a name="l00970"></a>00970 <span class="comment"> *</span>
<a name="l00971"></a>00971 <span class="comment"> * @param pctxt        Pointer to a memory block structure that contains the</span>
<a name="l00972"></a>00972 <span class="comment"> *                     list of dynamic memory block maintained by these</span>
<a name="l00973"></a>00973 <span class="comment"> *                     functions.</span>
<a name="l00974"></a>00974 <span class="comment"> * @param flags        The flags.</span>
<a name="l00975"></a>00975 <span class="comment"> */</span>
<a name="l00976"></a>00976 EXTERN <span class="keywordtype">void</span>  memHeapSetFlags (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT flags);
<a name="l00977"></a>00977
<a name="l00978"></a>00978 <span class="comment">/*</span>
<a name="l00979"></a>00979 <span class="comment"> * This function clears memory heap flags.</span>
<a name="l00980"></a>00980 <span class="comment"> *</span>
<a name="l00981"></a>00981 <span class="comment"> * @param pctxt        Pointer to a memory block structure that contains the</span>
<a name="l00982"></a>00982 <span class="comment"> *                     list of dynamic memory block maintained by these</span>
<a name="l00983"></a>00983 <span class="comment"> *                     functions.</span>
<a name="l00984"></a>00984 <span class="comment"> * @param flags        The flags</span>
<a name="l00985"></a>00985 <span class="comment"> */</span>
<a name="l00986"></a>00986 EXTERN <span class="keywordtype">void</span>  memHeapClearFlags (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT flags);
<a name="l00987"></a>00987
<a name="l01001"></a>01001 EXTERN <span class="keywordtype">void</span>  <a class="code" href="group__rtmem.shtml#ga913b4eb119139b70b272f4e4e9c3618d" title="This function sets the pointer to standard allocation functions.">memHeapSetDefBlkSize</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT blkSize);
<a name="l01002"></a>01002
<a name="l01008"></a>01008 EXTERN ASN1UINT <a class="code" href="group__rtmem.shtml#gaef349a1ad2b14fa09d312aad1b1d1fd1" title="This function returns the actual granularity of memory blocks.">memHeapGetDefBlkSize</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l01009"></a>01009
<a name="l01010"></a>01010 <span class="preprocessor">#ifdef _STATIC_HEAP</span>
<a name="l01011"></a>01011 <span class="preprocessor"></span>EXTERN <span class="keywordtype">void</span> memSetStaticBuf (<span class="keywordtype">void</span>* memHeapBuf, ASN1UINT blkSize);
<a name="l01012"></a>01012 <span class="preprocessor">#endif</span>
<a name="l01013"></a>01013 <span class="preprocessor"></span>
<a name="l01017"></a>01017 <span class="comment">/* PER encode/decode related items */</span>
<a name="l01018"></a>01018
<a name="l01019"></a><a class="code" href="group__cruntime.shtml#ga4c82745e7790296963079463cc907d0e">01019</a> <span class="preprocessor">#define INCRBITIDX(pctxt) \</span>
<a name="l01020"></a>01020 <span class="preprocessor">((--(pctxt)-&gt;buffer.bitOffset &lt; 0) ? \</span>
<a name="l01021"></a>01021 <span class="preprocessor">((++(pctxt)-&gt;buffer.byteIndex &gt;= (pctxt)-&gt;buffer.size) ? ASN_E_ENDOFBUF : \</span>
<a name="l01022"></a>01022 <span class="preprocessor">((pctxt)-&gt;buffer.bitOffset = 7, ASN_OK)) : ASN_OK)</span>
<a name="l01023"></a>01023 <span class="preprocessor"></span>
<a name="l01024"></a>01024 <span class="preprocessor">#define DECODEBIT(pctxt,pvalue) \</span>
<a name="l01025"></a>01025 <span class="preprocessor">((INCRBITIDX (pctxt) != ASN_OK) ? ((*(pvalue) = 0), ASN_E_ENDOFBUF) : \</span>
<a name="l01026"></a>01026 <span class="preprocessor">((*(pvalue) = (((pctxt)-&gt;buffer.data[(pctxt)-&gt;buffer.byteIndex]) &amp; \</span>
<a name="l01027"></a>01027 <span class="preprocessor">(1 &lt;&lt; (pctxt)-&gt;buffer.bitOffset)) != 0), ASN_OK))</span>
<a name="l01028"></a>01028 <span class="preprocessor"></span>
<a name="l01029"></a>01029 <span class="comment">/*</span>
<a name="l01030"></a>01030 <span class="comment">#define SETCHARSET(csetvar, canset, abits, ubits) \</span>
<a name="l01031"></a>01031 <span class="comment">csetvar.charSet.nchars = 0; \</span>
<a name="l01032"></a>01032 <span class="comment">csetvar.canonicalSet = canset; \</span>
<a name="l01033"></a>01033 <span class="comment">csetvar.canonicalSetSize = sizeof(canset)-1; \</span>
<a name="l01034"></a>01034 <span class="comment">csetvar.canonicalSetBits = getUIntBitCount(csetvar.canonicalSetSize); \</span>
<a name="l01035"></a>01035 <span class="comment">csetvar.charSetUnalignedBits = ubits; \</span>
<a name="l01036"></a>01036 <span class="comment">csetvar.charSetAlignedBits = abits;</span>
<a name="l01037"></a>01037 <span class="comment">*/</span>
<a name="l01038"></a>01038
<a name="l01054"></a>01054 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga96344a73875215922d907c14dfb6123c" title="This function will decode a series of multiple bits and place the results in an unsigned...">decodeBits</a>
<a name="l01055"></a>01055 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* pvalue, ASN1UINT nbits);
<a name="l01056"></a>01056
<a name="l01077"></a>01077 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga5c8073e904884a4374ae807772373097" title="This function will decode a value of the ASN.1 bit string type whose maximum size...">decodeBitString</a>
<a name="l01078"></a>01078 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* numbits_p, ASN1OCTET* buffer,
<a name="l01079"></a>01079  ASN1UINT bufsiz);
<a name="l01080"></a>01080
<a name="l01081"></a>01081 EXTERN <span class="keywordtype">int</span> decodeBitString32
<a name="l01082"></a>01082 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1BitStr32.shtml">ASN1BitStr32</a>* pvalue, ASN1UINT lower, ASN1UINT upper);
<a name="l01083"></a>01083
<a name="l01108"></a>01108 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga95aa259fd96d9d454481c1d0006e4b3f" title="This function will decode a variable of the ASN.1 BMP character string.">decodeBMPString</a>
<a name="l01109"></a>01109 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structAsn116BitCharString.shtml">ASN1BMPString</a>* pvalue, <a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>* permCharSet);
<a name="l01110"></a>01110
<a name="l01122"></a>01122 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gafe39161ece6a81f89663aa4a64593b91" title="This function will position the decode bit cursor on the next byte boundary.">decodeByteAlign</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l01123"></a>01123
<a name="l01136"></a>01136 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga53bbfd9e90f95b7773639d702beb1584" title="This function will decode an integer constrained either by a value or value range...">decodeConsInteger</a>
<a name="l01137"></a>01137 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1INT* pvalue, ASN1INT lower, ASN1INT upper);
<a name="l01138"></a>01138
<a name="l01152"></a>01152 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gabcb98e470a1b6b935afca7787618f43c" title="This function will decode an unsigned integer constrained either by a value or value...">decodeConsUnsigned</a>
<a name="l01153"></a>01153 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* pvalue, ASN1UINT lower, ASN1UINT upper);
<a name="l01154"></a>01154
<a name="l01168"></a>01168 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga157cf855b45ee8f95f6cb2903a7f65ef" title="This function will decode an 8-bit unsigned integer constrained either by a value...">decodeConsUInt8</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt,
<a name="l01169"></a>01169                             ASN1UINT8* pvalue, ASN1UINT lower, ASN1UINT upper);
<a name="l01170"></a>01170
<a name="l01184"></a>01184 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga8f571ca02f25e368337b57755325fbe8" title="This function will decode a 16-bit unsigned integer constrained either by a value...">decodeConsUInt16</a>
<a name="l01185"></a>01185 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1USINT* pvalue, ASN1UINT lower, ASN1UINT upper);
<a name="l01186"></a>01186
<a name="l01204"></a>01204 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga6b7915e5a39c410458ee6983db58e226" title="This function decodes a constrained whole number as specified in Section 10.5 of...">decodeConsWholeNumber</a>
<a name="l01205"></a>01205 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* padjusted_value, ASN1UINT range_value);
<a name="l01206"></a>01206
<a name="l01226"></a>01226 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga24a77df32b4a3c79798e5edbbcfbc471" title="This function decodes a constrained string value.">decodeConstrainedStringEx</a>
<a name="l01227"></a>01227 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>** <span class="keywordtype">string</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* charSet,
<a name="l01228"></a>01228  ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits);
<a name="l01229"></a>01229
<a name="l01252"></a>01252 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga8701667e5acbc0cae806118f3f3886ab" title="This function will decode a variable of thr ASN.1 BIT STRING type.">decodeDynBitString</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1DynBitStr.shtml">ASN1DynBitStr</a>* pBitStr);
<a name="l01253"></a>01253
<a name="l01270"></a>01270 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga4f4c01acad7de1bf9950f0aa4b2003db" title="This function will decode a value of the ASN.1 octet string type whose maximum size...">decodeDynOctetString</a>
<a name="l01271"></a>01271 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a>* pOctStr);
<a name="l01272"></a>01272
<a name="l01286"></a>01286 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gacfa2234f3a27fcc25a4ca19e343e1a08" title="This function will decode a length determinant value.">decodeLength</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* pvalue);
<a name="l01287"></a>01287
<a name="l01298"></a>01298 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga4f010511dc52c533894b6081991d0bf6">moveBitCursor</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keywordtype">int</span> bitOffset);
<a name="l01299"></a>01299
<a name="l01312"></a>01312 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gab3db59dd302108c23fcf342a04f69d57" title="This function decodes a value of the ASN.1 object identifier type.">decodeObjectIdentifier</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1OBJID.shtml">ASN1OBJID</a>* pvalue);
<a name="l01313"></a>01313
<a name="l01332"></a>01332 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gace4d7906e2376749a60a716310b7720c" title="This function will decode a value of the ASN.1 octet string type whose maximun size...">decodeOctetString</a>
<a name="l01333"></a>01333 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* numocts_p, ASN1OCTET* buffer,
<a name="l01334"></a>01334  ASN1UINT bufsiz);
<a name="l01335"></a>01335
<a name="l01353"></a>01353 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gac99217fa95605befb143c2a17782833c" title="This function will decode an ASN.1 open type.">decodeOpenType</a>
<a name="l01354"></a>01354 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> ASN1OCTET** object_p2, ASN1UINT* numocts_p);
<a name="l01355"></a>01355
<a name="l01371"></a>01371 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga7345e1cfabb92c8b05637dd1bc59f7a0" title="This function will decode a small non-negative whole number as specified in Section...">decodeSmallNonNegWholeNumber</a>
<a name="l01372"></a>01372 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* pvalue);
<a name="l01373"></a>01373
<a name="l01385"></a>01385 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga42476aecdc40c1fa8e5b47b63e78998f" title="This function will decode a semi-constrained integer.">decodeSemiConsInteger</a>
<a name="l01386"></a>01386    (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1INT* pvalue, ASN1INT lower);
<a name="l01387"></a>01387
<a name="l01400"></a>01400 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga77bcc518e627a4b3ddbe22c40ae8c441" title="This function will decode a semi-constrained unsigned integer.">decodeSemiConsUnsigned</a>
<a name="l01401"></a>01401    (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT* pvalue, ASN1UINT lower);
<a name="l01402"></a>01402
<a name="l01412"></a><a class="code" href="group__cruntime.shtml#ga46e661de8f34aa466f301c259e917e12">01412</a> <span class="preprocessor">#define decodeUnconsInteger(pctxt,pvalue) \</span>
<a name="l01413"></a>01413 <span class="preprocessor">decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</span>
<a name="l01414"></a>01414 <span class="preprocessor"></span>
<a name="l01425"></a><a class="code" href="group__cruntime.shtml#ga14e5d02a55fb5aafa710db7696c12d04">01425</a> <span class="preprocessor">#define decodeUnconsUnsigned(pctxt,pvalue) \</span>
<a name="l01426"></a>01426 <span class="preprocessor">decodeSemiConsUnsigned(pctxt, pvalue, 0U)</span>
<a name="l01427"></a>01427 <span class="preprocessor"></span>
<a name="l01428"></a>01428 EXTERN <span class="keywordtype">int</span> decodeVarWidthCharString (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>** pvalue);
<a name="l01429"></a>01429
<a name="l01439"></a>01439 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga4b25e6b6f517194c1cdb54a8fbe7aa7f" title="This function will encode a variable of the ASN.1 BOOLEAN type in a single bit.">encodeBit</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1BOOL value);
<a name="l01440"></a>01440
<a name="l01451"></a>01451 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga47ded4f662599e78065af73529ac5e5a" title="This function encodes multiple bits.">encodeBits</a>
<a name="l01452"></a>01452 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value, ASN1UINT nbits);
<a name="l01453"></a>01453
<a name="l01467"></a>01467 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga45212560fe43a1a4dd1ce1102a2caf9e" title="This function will encode a value of the ASN.1 bit string type.">encodeBitString</a>
<a name="l01468"></a>01468 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
<a name="l01469"></a>01469
<a name="l01470"></a>01470 EXTERN <span class="keywordtype">int</span> encodeBitString32
<a name="l01471"></a>01471 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1BitStr32.shtml">ASN1BitStr32</a>* pvalue, ASN1UINT lower, ASN1UINT upper);
<a name="l01472"></a>01472
<a name="l01496"></a>01496 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gac9f7dcd11523dd6aa51854de62faa9b5" title="This function will encode a variable of the ASN.1 BMP character string.">encodeBMPString</a>
<a name="l01497"></a>01497 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structAsn116BitCharString.shtml">ASN1BMPString</a> value, <a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>* permCharSet);
<a name="l01498"></a>01498
<a name="l01510"></a>01510 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga9dc77383f3d1734a24842811ce956b31" title="This function will position the encode bit cursor on the next byte boundry.">encodeByteAlign</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l01511"></a>01511
<a name="l01527"></a>01527 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga926b4efb8fb897f7e9b785387504c105" title="This function will determine if the given number of bytes will fit in the encode...">encodeCheckBuffer</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT nbytes);
<a name="l01528"></a>01528
<a name="l01546"></a>01546 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga7d15fb6e118e6f5d7831cd6a88e14b01" title="This function encodes a constrained string value.">encodeConstrainedStringEx</a>
<a name="l01547"></a>01547 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keywordtype">string</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* charSet,
<a name="l01548"></a>01548  ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits);
<a name="l01549"></a>01549
<a name="l01562"></a>01562 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga87c543e34141694d1fbbd41261faadcc" title="This function encodes an integer constrained either by a value or value range constraint...">encodeConsInteger</a>
<a name="l01563"></a>01563 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1INT value, ASN1INT lower, ASN1INT upper);
<a name="l01564"></a>01564
<a name="l01580"></a>01580 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga5cfcf8a51f04a62b7f312b1aa994e98e" title="This function encodes an unsigned integer constrained either by a value or value...">encodeConsUnsigned</a>
<a name="l01581"></a>01581 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value, ASN1UINT lower, ASN1UINT upper);
<a name="l01582"></a>01582
<a name="l01598"></a>01598 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga2336b23b4ebc19394e6771d37bd2543d" title="This function encodes a constrained whole number as specified in Section 10.5 of...">encodeConsWholeNumber</a>
<a name="l01599"></a>01599 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT adjusted_value, ASN1UINT range_value);
<a name="l01600"></a>01600
<a name="l01614"></a>01614 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gad7c55a4387e3e72e353e69a7c5e28c73" title="This function will expand the buffer to hold the given number of bytes.">encodeExpandBuffer</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT nbytes);
<a name="l01615"></a>01615
<a name="l01634"></a>01634 EXTERN ASN1OCTET* <a class="code" href="group__cruntime.shtml#ga331ac5998bb1c064216171ea0b458c24" title="This function will return the message pointer and length of an encoded message.">encodeGetMsgPtr</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keywordtype">int</span>* pLength);
<a name="l01635"></a>01635
<a name="l01647"></a>01647 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga78f5ad24f6ba72faa075e7cc084c86ed" title="This function will encode a length determinant value.">encodeLength</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value);
<a name="l01648"></a>01648
<a name="l01661"></a>01661 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga8add3bb77e52f7fb9dd9f9d6e201b37f" title="This function encodes a value of the ASN.1 object identifier type.">encodeObjectIdentifier</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structASN1OBJID.shtml">ASN1OBJID</a>* pvalue);
<a name="l01662"></a>01662
<a name="l01663"></a>01663
<a name="l01674"></a>01674 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga31f81046d111ad6f2b52aaac44708ce8" title="This function encodes bits from a given octet to the output buffer.">encodeBitsFromOctet</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1OCTET value, ASN1UINT nbits);
<a name="l01675"></a>01675
<a name="l01689"></a>01689 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga0a3cd5bc0c968c4579754dc1004138f7" title="This fuction will encode an array of octets.">encodeOctets</a>
<a name="l01690"></a>01690 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> ASN1OCTET* pvalue, ASN1UINT nbits);
<a name="l01691"></a>01691
<a name="l01704"></a>01704 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga0efc31c77ea2b185fb64b59f5e61f8bc" title="This function will encode a value of the ASN.1 octet string type.">encodeOctetString</a>
<a name="l01705"></a>01705 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
<a name="l01706"></a>01706
<a name="l01722"></a>01722 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gaeaadd45fe6caeb749f56e1c346fd665f" title="This function will encode an ASN.1 open type.">encodeOpenType</a>
<a name="l01723"></a>01723 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT numocts, <span class="keyword">const</span> ASN1OCTET* data);
<a name="l01724"></a>01724
<a name="l01743"></a>01743 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gab554080826bfa5b1aae14a32047c54e0" title="This function will encode an ASN.1 open type extension.">encodeOpenTypeExt</a>
<a name="l01744"></a>01744 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, DList* pElemList);
<a name="l01745"></a>01745
<a name="l01746"></a>01746 EXTERN <span class="keywordtype">int</span> encodeOpenTypeExtBits
<a name="l01747"></a>01747 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, DList* pElemList);
<a name="l01748"></a>01748
<a name="l01763"></a>01763 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gaea2c4247ab91cfb132256e5158f85b9b" title="This function will endcode a small, non-negative whole number as specified in Section...">encodeSmallNonNegWholeNumber</a> (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value);
<a name="l01764"></a>01764
<a name="l01776"></a>01776 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#ga1ac9005afae5f9fd6c2c8ff5bd1ab5b8" title="This function encodes a semi-constrained integer.">encodeSemiConsInteger</a>
<a name="l01777"></a>01777    (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1INT value, ASN1INT lower);
<a name="l01778"></a>01778
<a name="l01790"></a>01790 EXTERN <span class="keywordtype">int</span> <a class="code" href="group__cruntime.shtml#gacb312638694fcba29f27d5fde55546e6" title="This function encodes an semi-constrained unsigned integer.">encodeSemiConsUnsigned</a>
<a name="l01791"></a>01791    (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value, ASN1UINT lower);
<a name="l01792"></a>01792
<a name="l01802"></a><a class="code" href="group__cruntime.shtml#gaccc161bfb69d131752e0b86a6c63d0df">01802</a> <span class="preprocessor">#define encodeUnconsInteger(pctxt,value) \</span>
<a name="l01803"></a>01803 <span class="preprocessor">encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</span>
<a name="l01804"></a>01804 <span class="preprocessor"></span>
<a name="l01805"></a>01805 EXTERN <span class="keywordtype">int</span> encodeUnconsUnsigned (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT value);
<a name="l01806"></a>01806
<a name="l01807"></a>01807 EXTERN <span class="keywordtype">int</span> encodeVarWidthCharString (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keyword">const</span> <span class="keywordtype">char</span>* value);
<a name="l01808"></a>01808
<a name="l01809"></a>01809 EXTERN <span class="keywordtype">int</span> addSizeConstraint (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSize);
<a name="l01810"></a>01810
<a name="l01811"></a>01811 EXTERN ASN1BOOL alignCharStr
<a name="l01812"></a>01812 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1UINT len, ASN1UINT nbits, <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSize);
<a name="l01813"></a>01813
<a name="l01814"></a>01814 EXTERN <span class="keywordtype">int</span> bitAndOctetStringAlignmentTest
<a name="l01815"></a>01815 (<a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSizeList, ASN1UINT itemCount,
<a name="l01816"></a>01816  ASN1BOOL bitStrFlag, ASN1BOOL* pAlignFlag);
<a name="l01817"></a>01817
<a name="l01818"></a>01818 EXTERN <span class="keywordtype">int</span> getPERMsgLen (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt);
<a name="l01819"></a>01819
<a name="l01820"></a>01820 EXTERN <span class="keywordtype">int</span> addSizeConstraint (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSize);
<a name="l01821"></a>01821
<a name="l01822"></a>01822 EXTERN <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* getSizeConstraint (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, ASN1BOOL extbit);
<a name="l01823"></a>01823
<a name="l01824"></a>01824 EXTERN <span class="keywordtype">int</span> checkSizeConstraint(<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <span class="keywordtype">int</span> size);
<a name="l01825"></a>01825 EXTERN ASN1UINT getUIntBitCount (ASN1UINT value);
<a name="l01826"></a>01826
<a name="l01827"></a>01827 EXTERN <a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* checkSize
<a name="l01828"></a>01828 (<a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSizeList, ASN1UINT value, ASN1BOOL* pExtendable);
<a name="l01829"></a>01829
<a name="l01830"></a>01830 EXTERN <span class="keywordtype">void</span> init16BitCharSet
<a name="l01831"></a>01831 (<a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>* pCharSet, ASN116BITCHAR first,
<a name="l01832"></a>01832  ASN116BITCHAR last, ASN1UINT abits, ASN1UINT ubits);
<a name="l01833"></a>01833
<a name="l01834"></a>01834 EXTERN ASN1BOOL isExtendableSize (<a class="code" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a>* pSizeList);
<a name="l01835"></a>01835
<a name="l01836"></a>01836 EXTERN <span class="keywordtype">void</span> set16BitCharSet
<a name="l01837"></a>01837 (<a class="code" href="structOOCTXT.shtml">OOCTXT</a>* pctxt, <a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>* pCharSet, <a class="code" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a>* pAlphabet);
<a name="l01838"></a>01838
<a name="l01843"></a>01843 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l01844"></a>01844 <span class="preprocessor"></span>}
<a name="l01845"></a>01845 <span class="preprocessor">#endif</span>
<a name="l01846"></a>01846 <span class="preprocessor"></span>
<a name="l01847"></a>01847 <span class="preprocessor">#endif</span>
</pre></div></div>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
  <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
    10 Dec 2010.<BR> Objective Open H.323 Stack, 0.9.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
