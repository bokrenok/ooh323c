<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
    <TITLE>Objective Open H.323 Stack: H.245 logical channel management</TITLE>
    <LINK REL="stylesheet" HREF="stylesheet.css" TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
    <CENTER>
      <DIV ID="pageDiv">
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
          <TR>
            <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
             SRC="./images/Head1.jpg" WIDTH="725" HEIGHT="90"
             ALT="Objective Systems, Inc."></TD>
            <TD WIDTH="100%" BACKGROUND="./images/Head2.jpg">&nbsp;</TD>
          </TR>
        </TABLE>
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="10" CELLPADDING="10">
          <TR><TD>
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="classes.shtml"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
  </ul></div>
<h1>H.245 logical channel management</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Structure to store information on logical channels for a call.  <a href="structOOLogicalChannel.shtml#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="g8a75a766b0d13c974410ee8d99c50a1a"></a><!-- doxytag: member="logchan::ooLogicalChannel" ref="g8a75a766b0d13c974410ee8d99c50a1a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g8a75a766b0d13c974410ee8d99c50a1a">ooLogicalChannel</a>&nbsp;&nbsp;&nbsp;<a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a></td></tr>

<tr><td colspan="2"><br><h2>Enumerations</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g79896fe4c6725c4ca79ddc06aeb75427">OOLogicalChannelState</a> { <br>
&nbsp;&nbsp;<b>OO_LOGICAL_CHAN_UNKNOWN</b>,
<br>
&nbsp;&nbsp;<b>OO_LOGICALCHAN_IDLE</b>,
<br>
&nbsp;&nbsp;<b>OO_LOGICALCHAN_PROPOSED</b>,
<br>
&nbsp;&nbsp;<b>OO_LOGICALCHAN_ESTABLISHED</b>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical channel states. <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN ooLogicalChannel *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#gf5d0e614ccdd6bf4b61ea5c6c38c5ba8">ooAddNewLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int channelNo, int sessionID, char *dir, <a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *epCap)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to add a new logical channel entry into the list of currently active logical channels.  <a href="#gf5d0e614ccdd6bf4b61ea5c6c38c5ba8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN ooLogicalChannel *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g1e8b17dc93c6869073401e57f296d2e7">ooFindLogicalChannelByLogicalChannelNo</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int channelNo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to find a logical channel using the logical channel number as a key.  <a href="#g1e8b17dc93c6869073401e57f296d2e7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g871fc64e6ba258f0064db4f90c10d0cb">ooOnLogicalChannelEstablished</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a> *pChannel)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is called when a new logical channel is established.  <a href="#g871fc64e6ba258f0064db4f90c10d0cb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN ooLogicalChannel *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g468b1213b488491cfe06218c096fd58e">ooGetLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int sessionID, char *dir)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to retrieve a logical channel with a particular sessionID.  <a href="#g468b1213b488491cfe06218c096fd58e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g1daab4258d43a0a2bc7fed144bb883bb">ooRemoveLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int ChannelNo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to remove a logical channel from the list of channels within the call structure.  <a href="#g1daab4258d43a0a2bc7fed144bb883bb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#gd2891271ddaf7be3b82edb1929e971ae">ooClearLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int channelNo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to cleanup a logical channel.  <a href="#gd2891271ddaf7be3b82edb1929e971ae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g90596b376cdb186d02a6e141573598a9">ooClearAllLogicalChannels</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to cleanup all the logical channels associated with the call.  <a href="#g90596b376cdb186d02a6e141573598a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN <a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#gf862ad4bbce2845cf866e2a61190c089">ooFindLogicalChannelByOLC</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannel *olc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to find a logical channel from a received H.245 Open Logical Channel (OLC) message.  <a href="#gf862ad4bbce2845cf866e2a61190c089"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN <a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__logchan.shtml#g940ce3718192fd3b31a7a2062c232b8d">ooFindLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int sessionID, char *dir, H245DataType *dataType)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to find a logical channel based on session Id, direction of channel and datatype.  <a href="#g940ce3718192fd3b31a7a2062c232b8d"></a><br></td></tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="gf5d0e614ccdd6bf4b61ea5c6c38c5ba8"></a><!-- doxytag: member="ooLogChan.h::ooAddNewLogicalChannel" ref="gf5d0e614ccdd6bf4b61ea5c6c38c5ba8" args="(struct OOH323CallData *call, int channelNo, int sessionID, char *dir, ooH323EpCapability *epCap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN ooLogicalChannel* ooAddNewLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>channelNo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>sessionID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *&nbsp;</td>
          <td class="paramname"> <em>epCap</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to add a new logical channel entry into the list of currently active logical channels.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call for which new logical channel entry has to be created. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channelNo</em>&nbsp;</td><td>Channel number for the new channel entry. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sessionID</em>&nbsp;</td><td>Session identifier for the new channel. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dir</em>&nbsp;</td><td>Direction of the channel(transmit/receive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>epCap</em>&nbsp;</td><td>Capability to be used for the new channel.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Pointer to logical channel, on success. NULL, on failure </dd></dl>

</div>
</div><p>
<a class="anchor" name="g1e8b17dc93c6869073401e57f296d2e7"></a><!-- doxytag: member="ooLogChan.h::ooFindLogicalChannelByLogicalChannelNo" ref="g1e8b17dc93c6869073401e57f296d2e7" args="(struct OOH323CallData *call, int channelNo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN ooLogicalChannel* ooFindLogicalChannelByLogicalChannelNo           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>channelNo</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to find a logical channel using the logical channel number as a key.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call for which logical channel is required. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channelNo</em>&nbsp;</td><td>Forward Logical Channel number for the logical channel</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Pointer to the logical channel if found, NULL otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g871fc64e6ba258f0064db4f90c10d0cb"></a><!-- doxytag: member="ooLogChan.h::ooOnLogicalChannelEstablished" ref="g871fc64e6ba258f0064db4f90c10d0cb" args="(struct OOH323CallData *call, OOLogicalChannel *pChannel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnLogicalChannelEstablished           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a> *&nbsp;</td>
          <td class="paramname"> <em>pChannel</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is called when a new logical channel is established.
<p>
It is particularly useful in case of faststart. When the remote endpoint selects one of the proposed alternatives, other channels for the same session type need to be closed. This function is used for that.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call which owns the logical channel. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pChannel</em>&nbsp;</td><td>Handle to the newly established logical channel. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g468b1213b488491cfe06218c096fd58e"></a><!-- doxytag: member="ooLogChan.h::ooGetLogicalChannel" ref="g468b1213b488491cfe06218c096fd58e" args="(struct OOH323CallData *call, int sessionID, char *dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN ooLogicalChannel* ooGetLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>sessionID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>dir</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to retrieve a logical channel with a particular sessionID.
<p>
Note that there can be two entries of logical channel, one in each direction. This function will return the first channel which has the same session ID. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call which owns the channels to be searched. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sessionID</em>&nbsp;</td><td>Session id of the session which is to be searched for. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dir</em>&nbsp;</td><td>Direction of the channel.(transmit/receive)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Returns a pointer to the logical channel if found, NULL otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g1daab4258d43a0a2bc7fed144bb883bb"></a><!-- doxytag: member="ooLogChan.h::ooRemoveLogicalChannel" ref="g1daab4258d43a0a2bc7fed144bb883bb" args="(struct OOH323CallData *call, int ChannelNo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooRemoveLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>ChannelNo</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to remove a logical channel from the list of channels within the call structure.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call from which logical channel has to be removed. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ChannelNo</em>&nbsp;</td><td>Forward logical channel number of the channel to be removed. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gd2891271ddaf7be3b82edb1929e971ae"></a><!-- doxytag: member="ooLogChan.h::ooClearLogicalChannel" ref="gd2891271ddaf7be3b82edb1929e971ae" args="(struct OOH323CallData *call, int channelNo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooClearLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>channelNo</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to cleanup a logical channel.
<p>
It first stops media if it is still active and then removes the channel from the list, freeing up all the associated memory. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call which owns the logical channel. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channelNo</em>&nbsp;</td><td>Channel number identifying the channel.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g90596b376cdb186d02a6e141573598a9"></a><!-- doxytag: member="ooLogChan.h::ooClearAllLogicalChannels" ref="g90596b376cdb186d02a6e141573598a9" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooClearAllLogicalChannels           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to cleanup all the logical channels associated with the call.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call which owns the channels.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gf862ad4bbce2845cf866e2a61190c089"></a><!-- doxytag: member="ooLogChan.h::ooFindLogicalChannelByOLC" ref="gf862ad4bbce2845cf866e2a61190c089" args="(struct OOH323CallData *call, H245OpenLogicalChannel *olc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN <a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a>* ooFindLogicalChannelByOLC           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>olc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to find a logical channel from a received H.245 Open Logical Channel (OLC) message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the related call. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olc</em>&nbsp;</td><td>Handle to the received OLC.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Returns the corresponding logical channel if found, else returns NULL. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g940ce3718192fd3b31a7a2062c232b8d"></a><!-- doxytag: member="ooLogChan.h::ooFindLogicalChannel" ref="g940ce3718192fd3b31a7a2062c232b8d" args="(struct OOH323CallData *call, int sessionID, char *dir, H245DataType *dataType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN <a class="el" href="structOOLogicalChannel.shtml">OOLogicalChannel</a>* ooFindLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>sessionID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245DataType *&nbsp;</td>
          <td class="paramname"> <em>dataType</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to find a logical channel based on session Id, direction of channel and datatype.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sessionID</em>&nbsp;</td><td>Session ID for the channel to be searched. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dir</em>&nbsp;</td><td>Direction of the channel wrt local endpoint. (transmit/receive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dataType</em>&nbsp;</td><td>Handle to the data type for the channel.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Logical channel, if found, NULL otherwise. </dd></dl>

</div>
</div><p>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
  <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
    10 Mar 2010.<BR> Objective Open H.323 Stack, 0.9.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
