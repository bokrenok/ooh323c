<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
    <TITLE>Objective Open H.323 Stack: H.245 Message Handling</TITLE>
    <LINK REL="stylesheet" HREF="stylesheet.css" TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
    <CENTER>
      <DIV ID="pageDiv">
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
          <TR>
            <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
             SRC="./images/Head1.jpg" WIDTH="725" HEIGHT="90"
             ALT="Objective Systems, Inc."></TD>
            <TD WIDTH="100%" BACKGROUND="./images/Head2.jpg">&nbsp;</TD>
          </TR>
        </TABLE>
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="10" CELLPADDING="10">
          <TR><TD>
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="classes.shtml"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
  </ul></div>
<h1>H.245 Message Handling</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structH245Message.shtml">H245Message</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines the H.245 message structure.  <a href="structH245Message.shtml#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gf6a2668dc9c8747e40d41edc913bb443">ooCreateH245Message</a> (<a class="el" href="structH245Message.shtml">H245Message</a> **msg, int type)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates an outgoing H245 message of the type specified by the type argument for the Application context.  <a href="#gf6a2668dc9c8747e40d41edc913bb443"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#ge5f2c6bdd2b443c74c5cb528b44ff940">ooFreeH245Message</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structH245Message.shtml">H245Message</a> *pmsg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Frees up the memory used by the H245 message.  <a href="#ge5f2c6bdd2b443c74c5cb528b44ff940"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#ge1ea7270744d33b95104b288e6925179">ooSendH245Msg</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structH245Message.shtml">H245Message</a> *msg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to enqueue an H.245 message into an outgoing queue for the call.  <a href="#ge1ea7270744d33b95104b288e6925179"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#ga6d484193e32ac43fa3a9cd23dc918d6">ooGetOutgoingH245Msgbuf</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="group__cruntime.shtml#gd45df98231e0a493f3ff759d6d435e5c">ASN1OCTET</a> *msgbuf, int *len, int *msgType)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to retrieve an H.245 message enqueued in the outgoing queue.  <a href="#ga6d484193e32ac43fa3a9cd23dc918d6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gf5ba559f1688a78e3ddbcff2d57e3297">ooSendTermCapMsg</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send out a terminal capability set message.  <a href="#gf5ba559f1688a78e3ddbcff2d57e3297"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN <a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gaf11116434ac57b08fe4a6ae0d880e89">ooGenerateStatusDeterminationNumber</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to generate a random status determination number for MSD procedure.  <a href="#gaf11116434ac57b08fe4a6ae0d880e89"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gec048be48c0099bb3ac4670f6136755c">ooHandleMasterSlave</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, void *pmsg, int msgType)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This fuction is used to handle received MasterSlaveDetermination procedure messages.  <a href="#gec048be48c0099bb3ac4670f6136755c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gdb69837940dcd091e58847152436a3a0">ooSendMasterSlaveDetermination</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send MSD message.  <a href="#gdb69837940dcd091e58847152436a3a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gaf3e02e91a0b43728ecb2d8ebeba496b">ooSendMasterSlaveDeterminationAck</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, char *status)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a MasterSlaveDeterminationAck message.  <a href="#gaf3e02e91a0b43728ecb2d8ebeba496b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g0452bf3391742a64b78e53d154e1e1a9">ooSendMasterSlaveDeterminationReject</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a MasterSlaveDeterminationReject message.  <a href="#g0452bf3391742a64b78e53d154e1e1a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gb56f3e5e1f5330a36bc8a1117d3ec84d">ooHandleMasterSlaveReject</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245MasterSlaveDeterminationReject *reject)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle MasterSlaveReject message.  <a href="#gb56f3e5e1f5330a36bc8a1117d3ec84d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g2626327084d3c24249ec56a2c3d7eb83">ooHandleOpenLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannel *olc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle received OpenLogicalChannel message.  <a href="#g2626327084d3c24249ec56a2c3d7eb83"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g8ce3866719cde6e356020898325b0c76">ooHandleOpenLogicalChannel_helper</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannel *olc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a helper function used to handle a received OpenLogicalChannel message.  <a href="#g8ce3866719cde6e356020898325b0c76"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gb14318364c49956aa889aeda4d738fcc">ooSendOpenLogicalChannelReject</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a> channelNum, <a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a> cause)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to build and send OpenLogicalChannelReject message.  <a href="#gb14318364c49956aa889aeda4d738fcc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g36fc270e5af0bc3d540f9adeb9528efb">ooOnReceivedOpenLogicalChannelAck</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannelAck *olcAck)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle a received OpenLogicalChannelAck message.  <a href="#g36fc270e5af0bc3d540f9adeb9528efb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g1da1206f957a2adaf4af591e9d8b8665">ooOnReceivedOpenLogicalChannelRejected</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannelReject *olcRejected)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle the received OpenLogicalChannelReject message.  <a href="#g1da1206f957a2adaf4af591e9d8b8665"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g78ed48806788a1fa199fc7e7a5c8497e">ooSendEndSessionCommand</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This message is used to send an EndSession command.  <a href="#g78ed48806788a1fa199fc7e7a5c8497e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g140660cf9fa88d1a396e04848442dbc7">ooHandleH245Command</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245CommandMessage *command)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle a received H245Command message.  <a href="#g140660cf9fa88d1a396e04848442dbc7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g9279e11479fbd09cf8f2effb5aac1d37">ooOnReceivedUserInputIndication</a> (<a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245UserInputIndication *indication)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle a received UserInput Indication message.  <a href="#g9279e11479fbd09cf8f2effb5aac1d37"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g826d8eeebad3521ee4fd5dbd8ee4c68c">ooOnReceivedTerminalCapabilitySetAck</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is called on receiving a TreminalCapabilitySetAck message.  <a href="#g826d8eeebad3521ee4fd5dbd8ee4c68c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g2f36cb33f1b2d17e3bf3f60905bb4a54">ooCloseAllLogicalChannels</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is called to close all the open logical channels.  <a href="#g2f36cb33f1b2d17e3bf3f60905bb4a54"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gf0c0284faf9ae71249e2c589fb16dccc">ooSendCloseLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, ooLogicalChannel *logicalChan)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send out a CloseLogicalChannel message for a particular logical channel.  <a href="#gf0c0284faf9ae71249e2c589fb16dccc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gd5be9cb7925e315b90c5dabcaf96b2a2">ooOnReceivedCloseLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245CloseLogicalChannel *clc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to process a received closeLogicalChannel request.  <a href="#gd5be9cb7925e315b90c5dabcaf96b2a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g57b00d3baa03b7ea78831cec9ac85ede">ooOnReceivedCloseChannelAck</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245CloseLogicalChannelAck *clcAck)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to process a received CloseLogicalChannelAck message.  <a href="#g57b00d3baa03b7ea78831cec9ac85ede"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g6ef78037c39fb12ec0f4f0cd8027ca51">ooHandleH245Message</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structH245Message.shtml">H245Message</a> *pmsg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle received H245 message.  <a href="#g6ef78037c39fb12ec0f4f0cd8027ca51"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g81bf90d2c6cd89ea04c407a20d75e80f">ooOnReceivedTerminalCapabilitySet</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structH245Message.shtml">H245Message</a> *pmsg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to process received TCS message.  <a href="#g81bf90d2c6cd89ea04c407a20d75e80f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g97acebc8228d2b813f3351198ea78267">ooH245AcknowledgeTerminalCapabilitySet</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a TCSAck message to remote endpoint.  <a href="#g97acebc8228d2b813f3351198ea78267"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g10924f4c7046b57c23a8c17cb971f73a">ooOpenLogicalChannels</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to start OpenLogicalChannel procedure for all the channels to be opened for the call.  <a href="#g10924f4c7046b57c23a8c17cb971f73a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#ge92bfa2d0d481241096ea0977e28ded5">ooOpenLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, enum <a class="el" href="ooCapability_8h.shtml#d07fd3f1cc0c93d97dfdef3585cb5237">OOCapType</a> capType)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send OpenLogicalChannel message for audio/video channel.  <a href="#ge92bfa2d0d481241096ea0977e28ded5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g03fce2047d03b2f7d542f000cb6d58d6">ooOpenChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *epCap)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to build and send OpenLogicalChannel message using capability passed as parameter.  <a href="#g03fce2047d03b2f7d542f000cb6d58d6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g644713bb462cbe4f076222a54fe4fa86">ooSendH245UserInputIndication_alphanumeric</a> (<a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, const char *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send dtmf digits as user input indication message contating alphanumeric string.  <a href="#g644713bb462cbe4f076222a54fe4fa86"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g424968e103b592d6435c529f5838f39f">ooSendH245UserInputIndication_signal</a> (<a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, const char *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send dtmf digits as user input indication message contating dtmf signal type.  <a href="#g424968e103b592d6435c529f5838f39f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gaf5645510a323b827036e1e0eddd198f">ooSendRequestCloseLogicalChannel</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, ooLogicalChannel *logicalChan)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to request a remote end point to close a logical channel.  <a href="#gaf5645510a323b827036e1e0eddd198f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g6d26b969054c0e09a9d694eb492ef1d6">ooSendRequestChannelCloseRelease</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int channelNum)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a RequestChannelCloseRelease message when the corresponding timer has expired.  <a href="#g6d26b969054c0e09a9d694eb492ef1d6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g185080fa9d72888964611ae55d3a321e">ooOnReceivedRequestChannelClose</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245RequestChannelClose *rclc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function handles the received RequestChannelClose message, verifies that the requested channel is forward channel.  <a href="#g185080fa9d72888964611ae55d3a321e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g7d71796df9882e389bcdd58018f5b6c8">ooOnReceivedRequestChannelCloseReject</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245RequestChannelCloseReject *rccReject)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle a received RequestChannelCloseReject response message.  <a href="#g7d71796df9882e389bcdd58018f5b6c8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g8094e3a70292139bae5fd831757f65f5">ooOnReceivedRequestChannelCloseAck</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245RequestChannelCloseAck *rccAck)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to handle a received RequestChannelCloseAck response message.  <a href="#g8094e3a70292139bae5fd831757f65f5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g2871a71cdca4168aaa5317460773d29b">ooBuildFastStartOLC</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannel *olc, <a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *epCap, <a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, int dir)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Builds an OLC for faststart with an audio/video capability passed as parameter.  <a href="#g2871a71cdca4168aaa5317460773d29b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gdab98e24b13523934452f87095b228ba">ooPrepareFastStartResponseOLC</a> (<a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245OpenLogicalChannel *olc, <a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *epCap, <a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, int dir)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Prepares a faststart response olc from the olc received in SETUP message.  <a href="#gdab98e24b13523934452f87095b228ba"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g6b9b929f8dca22d850911d4aad3654f2">ooEncodeH245Message</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, <a class="el" href="structH245Message.shtml">H245Message</a> *ph245Msg, <a class="el" href="group__cruntime.shtml#gd45df98231e0a493f3ff759d6d435e5c">ASN1OCTET</a> *msgbuf, size_t size)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to encode an H245 message and return encoded data into the buffer passed as a parameter to the function.  <a href="#g6b9b929f8dca22d850911d4aad3654f2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g69c3fc20bff59e0138d8cfa983e334d1">ooSendMasterSlaveDeterminationRelease</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a master-slave determination release message.  <a href="#g69c3fc20bff59e0138d8cfa983e334d1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g9a76540c3740531216187ece11ba10f2">ooSendTerminalCapabilitySetReject</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, int seqNo, <a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a> cause)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a terminal capability set reject message to the remote endpoint.  <a href="#g9a76540c3740531216187ece11ba10f2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g641a3b313194f5906dc141846d0b8062">ooSendTerminalCapabilitySetRelease</a> (struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function is used to send a TerminalCapabilitySetRelease message after capability exchange timer has expired.  <a href="#g641a3b313194f5906dc141846d0b8062"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g8fbe9dd0880a523e49e4940e5f0d5e3a">ooGetIpPortFromH245TransportAddress</a> (<a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *call, H245TransportAddress *h245Address, char *ip, int *port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is an helper function used to extract ip address and port info from H245TransportAddress structure.  <a href="#g8fbe9dd0880a523e49e4940e5f0d5e3a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g417ada547f2756bbdeae3c56e5114ced">ooMSDTimerExpired</a> (void *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired master-slave determination timer.  <a href="#g417ada547f2756bbdeae3c56e5114ced"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gcd430eedc22022a0ed5317753972032d">ooTCSTimerExpired</a> (void *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired capability exchange timer.  <a href="#gcd430eedc22022a0ed5317753972032d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gc1c560ef02cbafab3013a14d1020b7b2">ooOpenLogicalChannelTimerExpired</a> (void *pdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired OpenLogicalChannel timer.  <a href="#gc1c560ef02cbafab3013a14d1020b7b2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gb1254567d5c59621b1a6053b178a3764">ooCloseLogicalChannelTimerExpired</a> (void *pdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired CloseLogicalChannel timer.  <a href="#gb1254567d5c59621b1a6053b178a3764"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#g7f64a7e063f18a168d6df576af2eff7a">ooRequestChannelCloseTimerExpired</a> (void *pdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired RequestChannelClose timer.  <a href="#g7f64a7e063f18a168d6df576af2eff7a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__h245.shtml#gc8d4b175f06fb09412e699ee11779254">ooSessionTimerExpired</a> (void *pdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This is a callback function for handling an expired EndSession timer.  <a href="#gc8d4b175f06fb09412e699ee11779254"></a><br></td></tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="gf6a2668dc9c8747e40d41edc913bb443"></a><!-- doxytag: member="ooh245.h::ooCreateH245Message" ref="gf6a2668dc9c8747e40d41edc913bb443" args="(H245Message **msg, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooCreateH245Message           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> **&nbsp;</td>
          <td class="paramname"> <em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates an outgoing H245 message of the type specified by the type argument for the Application context.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msg</em>&nbsp;</td><td>A pointer to pointer to message which will be assigned to allocated memory. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>Type of the message to be created. (Request/Response/Command/Indication)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Completion status of operation: 0 (OO_OK) = success, negative return value is error. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ge5f2c6bdd2b443c74c5cb528b44ff940"></a><!-- doxytag: member="ooh245.h::ooFreeH245Message" ref="ge5f2c6bdd2b443c74c5cb528b44ff940" args="(struct OOH323CallData *call, H245Message *pmsg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooFreeH245Message           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> *&nbsp;</td>
          <td class="paramname"> <em>pmsg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Frees up the memory used by the H245 message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pmsg</em>&nbsp;</td><td>Pointer to an H245 message structure.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure </dd></dl>

</div>
</div><p>
<a class="anchor" name="ge1ea7270744d33b95104b288e6925179"></a><!-- doxytag: member="ooh245.h::ooSendH245Msg" ref="ge1ea7270744d33b95104b288e6925179" args="(struct OOH323CallData *call, H245Message *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendH245Msg           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> *&nbsp;</td>
          <td class="paramname"> <em>msg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to enqueue an H.245 message into an outgoing queue for the call.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which message has to be enqueued. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msg</em>&nbsp;</td><td>Pointer to the H.245 message to be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ga6d484193e32ac43fa3a9cd23dc918d6"></a><!-- doxytag: member="ooh245.h::ooGetOutgoingH245Msgbuf" ref="ga6d484193e32ac43fa3a9cd23dc918d6" args="(struct OOH323CallData *call, ASN1OCTET *msgbuf, int *len, int *msgType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooGetOutgoingH245Msgbuf           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cruntime.shtml#gd45df98231e0a493f3ff759d6d435e5c">ASN1OCTET</a> *&nbsp;</td>
          <td class="paramname"> <em>msgbuf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>msgType</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to retrieve an H.245 message enqueued in the outgoing queue.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call for which message has to be retrieved. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgbuf</em>&nbsp;</td><td>Pointer to a buffer in which the message will be returned. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>Pointer to an int variable which will contain length of the message data after returning. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgType</em>&nbsp;</td><td>Pointer to an int variable, which will contain message type on return from the function.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gf5ba559f1688a78e3ddbcff2d57e3297"></a><!-- doxytag: member="ooh245.h::ooSendTermCapMsg" ref="gf5ba559f1688a78e3ddbcff2d57e3297" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendTermCapMsg           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send out a terminal capability set message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to a call for which TerminalCapabilitySet message will be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gaf11116434ac57b08fe4a6ae0d880e89"></a><!-- doxytag: member="ooh245.h::ooGenerateStatusDeterminationNumber" ref="gaf11116434ac57b08fe4a6ae0d880e89" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN <a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a> ooGenerateStatusDeterminationNumber           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to generate a random status determination number for MSD procedure.
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Generated status determination number. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gec048be48c0099bb3ac4670f6136755c"></a><!-- doxytag: member="ooh245.h::ooHandleMasterSlave" ref="gec048be48c0099bb3ac4670f6136755c" args="(struct OOH323CallData *call, void *pmsg, int msgType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleMasterSlave           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pmsg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>msgType</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This fuction is used to handle received MasterSlaveDetermination procedure messages.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call for which a message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pmsg</em>&nbsp;</td><td>Pointer to MSD message </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgType</em>&nbsp;</td><td>Message type indicating whether received message is MSD, MSDAck, MSDReject etc...</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gdb69837940dcd091e58847152436a3a0"></a><!-- doxytag: member="ooh245.h::ooSendMasterSlaveDetermination" ref="gdb69837940dcd091e58847152436a3a0" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendMasterSlaveDetermination           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send MSD message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which MasterSlaveDetermination has to be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gaf3e02e91a0b43728ecb2d8ebeba496b"></a><!-- doxytag: member="ooh245.h::ooSendMasterSlaveDeterminationAck" ref="gaf3e02e91a0b43728ecb2d8ebeba496b" args="(struct OOH323CallData *call, char *status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendMasterSlaveDeterminationAck           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>status</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a MasterSlaveDeterminationAck message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which MasterSlaveDeterminationAck has to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td>Result of the determination process(Master/Slave as it applies to remote endpoint)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g0452bf3391742a64b78e53d154e1e1a9"></a><!-- doxytag: member="ooh245.h::ooSendMasterSlaveDeterminationReject" ref="g0452bf3391742a64b78e53d154e1e1a9" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendMasterSlaveDeterminationReject           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a MasterSlaveDeterminationReject message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which message is to be sent. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gb56f3e5e1f5330a36bc8a1117d3ec84d"></a><!-- doxytag: member="ooh245.h::ooHandleMasterSlaveReject" ref="gb56f3e5e1f5330a36bc8a1117d3ec84d" args="(struct OOH323CallData *call, H245MasterSlaveDeterminationReject *reject)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleMasterSlaveReject           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245MasterSlaveDeterminationReject *&nbsp;</td>
          <td class="paramname"> <em>reject</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle MasterSlaveReject message.
<p>
If number of retries is less than max allowed, then it restarts the MasterSlaveDetermination procedure. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which MasterSlaveReject is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>reject</em>&nbsp;</td><td>Poinetr to the received reject message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g2626327084d3c24249ec56a2c3d7eb83"></a><!-- doxytag: member="ooh245.h::ooHandleOpenLogicalChannel" ref="g2626327084d3c24249ec56a2c3d7eb83" args="(struct OOH323CallData *call, H245OpenLogicalChannel *olc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleOpenLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>olc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle received OpenLogicalChannel message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which OpenLogicalChannel message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olc</em>&nbsp;</td><td>Pointer to the received OpenLogicalChannel message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g8ce3866719cde6e356020898325b0c76"></a><!-- doxytag: member="ooh245.h::ooHandleOpenLogicalChannel_helper" ref="g8ce3866719cde6e356020898325b0c76" args="(struct OOH323CallData *call, H245OpenLogicalChannel *olc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleOpenLogicalChannel_helper           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>olc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a helper function used to handle a received OpenLogicalChannel message.
<p>
It builds an OpenLogicalChannelAck message and sends it.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to cll for which OLC was received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olc</em>&nbsp;</td><td>The received OpenLogicalChannel message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gb14318364c49956aa889aeda4d738fcc"></a><!-- doxytag: member="ooh245.h::ooSendOpenLogicalChannelReject" ref="gb14318364c49956aa889aeda4d738fcc" args="(struct OOH323CallData *call, ASN1UINT channelNum, ASN1UINT cause)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSendOpenLogicalChannelReject           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a>&nbsp;</td>
          <td class="paramname"> <em>channelNum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a>&nbsp;</td>
          <td class="paramname"> <em>cause</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to build and send OpenLogicalChannelReject message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which OLCReject has to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channelNum</em>&nbsp;</td><td>LogicalChannelNumber to be rejected. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cause</em>&nbsp;</td><td>Cause of rejection.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g36fc270e5af0bc3d540f9adeb9528efb"></a><!-- doxytag: member="ooh245.h::ooOnReceivedOpenLogicalChannelAck" ref="g36fc270e5af0bc3d540f9adeb9528efb" args="(struct OOH323CallData *call, H245OpenLogicalChannelAck *olcAck)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedOpenLogicalChannelAck           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannelAck *&nbsp;</td>
          <td class="paramname"> <em>olcAck</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle a received OpenLogicalChannelAck message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which OLCAck is received </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olcAck</em>&nbsp;</td><td>Pointer to received olcAck message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g1da1206f957a2adaf4af591e9d8b8665"></a><!-- doxytag: member="ooh245.h::ooOnReceivedOpenLogicalChannelRejected" ref="g1da1206f957a2adaf4af591e9d8b8665" args="(struct OOH323CallData *call, H245OpenLogicalChannelReject *olcRejected)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooOnReceivedOpenLogicalChannelRejected           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannelReject *&nbsp;</td>
          <td class="paramname"> <em>olcRejected</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle the received OpenLogicalChannelReject message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which the message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olcRejected</em>&nbsp;</td><td>Pointer to received OpenLogicalChannelReject message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g78ed48806788a1fa199fc7e7a5c8497e"></a><!-- doxytag: member="ooh245.h::ooSendEndSessionCommand" ref="g78ed48806788a1fa199fc7e7a5c8497e" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendEndSessionCommand           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This message is used to send an EndSession command.
<p>
It builds a EndSession command message and queues it into the calls outgoing queue. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which EndSession command has to be sent. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g140660cf9fa88d1a396e04848442dbc7"></a><!-- doxytag: member="ooh245.h::ooHandleH245Command" ref="g140660cf9fa88d1a396e04848442dbc7" args="(struct OOH323CallData *call, H245CommandMessage *command)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleH245Command           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245CommandMessage *&nbsp;</td>
          <td class="paramname"> <em>command</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle a received H245Command message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which an H245Command is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>command</em>&nbsp;</td><td>Pointer to a command message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure </dd></dl>

</div>
</div><p>
<a class="anchor" name="g9279e11479fbd09cf8f2effb5aac1d37"></a><!-- doxytag: member="ooh245.h::ooOnReceivedUserInputIndication" ref="g9279e11479fbd09cf8f2effb5aac1d37" args="(OOH323CallData *call, H245UserInputIndication *indication)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedUserInputIndication           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245UserInputIndication *&nbsp;</td>
          <td class="paramname"> <em>indication</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle a received UserInput Indication message.
<p>
It extracts the dtmf received through user-input message and calls endpoints onReceivedDTMF callback function, if such a function is registered by the endpoint. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which user-input indication message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indication</em>&nbsp;</td><td>Handle to the received user-input indication message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success; OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g826d8eeebad3521ee4fd5dbd8ee4c68c"></a><!-- doxytag: member="ooh245.h::ooOnReceivedTerminalCapabilitySetAck" ref="g826d8eeebad3521ee4fd5dbd8ee4c68c" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedTerminalCapabilitySetAck           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is called on receiving a TreminalCapabilitySetAck message.
<p>
If the MasterSlaveDetermination process is also over, this function initiates the process of opening logical channels. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which TCSAck is received.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g2f36cb33f1b2d17e3bf3f60905bb4a54"></a><!-- doxytag: member="ooh245.h::ooCloseAllLogicalChannels" ref="g2f36cb33f1b2d17e3bf3f60905bb4a54" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooCloseAllLogicalChannels           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is called to close all the open logical channels.
<p>
It sends CloseLogicalChannel message for all the forward channels and sends RequestCloseLogicalChannel message for all the reverse channels. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which logical channels have to be closed.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gf0c0284faf9ae71249e2c589fb16dccc"></a><!-- doxytag: member="ooh245.h::ooSendCloseLogicalChannel" ref="gf0c0284faf9ae71249e2c589fb16dccc" args="(struct OOH323CallData *call, ooLogicalChannel *logicalChan)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendCloseLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ooLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>logicalChan</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send out a CloseLogicalChannel message for a particular logical channel.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to a call, to which logical channel to be closed belongs. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>logicalChan</em>&nbsp;</td><td>Pointer to the logical channel to be closed.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gd5be9cb7925e315b90c5dabcaf96b2a2"></a><!-- doxytag: member="ooh245.h::ooOnReceivedCloseLogicalChannel" ref="gd5be9cb7925e315b90c5dabcaf96b2a2" args="(struct OOH323CallData *call, H245CloseLogicalChannel *clc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedCloseLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245CloseLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>clc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to process a received closeLogicalChannel request.
<p>
It closes the logical channel and removes the logical channel entry from the list. It also, sends closeLogicalChannelAck message to the remote endpoint. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which CloseLogicalChannel message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>clc</em>&nbsp;</td><td>Pointer to received CloseLogicalChannel message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g57b00d3baa03b7ea78831cec9ac85ede"></a><!-- doxytag: member="ooh245.h::ooOnReceivedCloseChannelAck" ref="g57b00d3baa03b7ea78831cec9ac85ede" args="(struct OOH323CallData *call, H245CloseLogicalChannelAck *clcAck)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedCloseChannelAck           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245CloseLogicalChannelAck *&nbsp;</td>
          <td class="paramname"> <em>clcAck</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to process a received CloseLogicalChannelAck message.
<p>
It closes the channel and removes it from the list of active logical channels. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which CLCAck message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>clcAck</em>&nbsp;</td><td>Pointer to the received CloseLogicalChannelAck message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure </dd></dl>

</div>
</div><p>
<a class="anchor" name="g6ef78037c39fb12ec0f4f0cd8027ca51"></a><!-- doxytag: member="ooh245.h::ooHandleH245Message" ref="g6ef78037c39fb12ec0f4f0cd8027ca51" args="(struct OOH323CallData *call, H245Message *pmsg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooHandleH245Message           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> *&nbsp;</td>
          <td class="paramname"> <em>pmsg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle received H245 message.
<p>
Based on the type of message received, it calls helper functions to process those messages. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which a message is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pmsg</em>&nbsp;</td><td>Pointer to the received H245 message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g81bf90d2c6cd89ea04c407a20d75e80f"></a><!-- doxytag: member="ooh245.h::ooOnReceivedTerminalCapabilitySet" ref="g81bf90d2c6cd89ea04c407a20d75e80f" args="(struct OOH323CallData *call, H245Message *pmsg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedTerminalCapabilitySet           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> *&nbsp;</td>
          <td class="paramname"> <em>pmsg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to process received TCS message.
<p>
It builds TCSAck message and queues it into the calls outgoing queue. Also, starts Logical channel opening procedure if TCS and MSD procedures have finished. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which TCS is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pmsg</em>&nbsp;</td><td>Pointer to the received message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g97acebc8228d2b813f3351198ea78267"></a><!-- doxytag: member="ooh245.h::ooH245AcknowledgeTerminalCapabilitySet" ref="g97acebc8228d2b813f3351198ea78267" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooH245AcknowledgeTerminalCapabilitySet           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a TCSAck message to remote endpoint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call on which TCSAck has to be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g10924f4c7046b57c23a8c17cb971f73a"></a><!-- doxytag: member="ooh245.h::ooOpenLogicalChannels" ref="g10924f4c7046b57c23a8c17cb971f73a" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOpenLogicalChannels           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to start OpenLogicalChannel procedure for all the channels to be opened for the call.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which logical channels have to be opened.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ge92bfa2d0d481241096ea0977e28ded5"></a><!-- doxytag: member="ooh245.h::ooOpenLogicalChannel" ref="ge92bfa2d0d481241096ea0977e28ded5" args="(struct OOH323CallData *call, enum OOCapType capType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOpenLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="ooCapability_8h.shtml#d07fd3f1cc0c93d97dfdef3585cb5237">OOCapType</a>&nbsp;</td>
          <td class="paramname"> <em>capType</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send OpenLogicalChannel message for audio/video channel.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which channel has to be opened. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>capType</em>&nbsp;</td><td>Type of media channel.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g03fce2047d03b2f7d542f000cb6d58d6"></a><!-- doxytag: member="ooh245.h::ooOpenChannel" ref="g03fce2047d03b2f7d542f000cb6d58d6" args="(struct OOH323CallData *call, ooH323EpCapability *epCap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOpenChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *&nbsp;</td>
          <td class="paramname"> <em>epCap</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to build and send OpenLogicalChannel message using capability passed as parameter.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which OpenLogicalChannel message has to be built. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>epCap</em>&nbsp;</td><td>Pointer to capability</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g644713bb462cbe4f076222a54fe4fa86"></a><!-- doxytag: member="ooh245.h::ooSendH245UserInputIndication_alphanumeric" ref="g644713bb462cbe4f076222a54fe4fa86" args="(OOH323CallData *call, const char *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendH245UserInputIndication_alphanumeric           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send dtmf digits as user input indication message contating alphanumeric string.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which dtmf has to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>DTMF data</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success; OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g424968e103b592d6435c529f5838f39f"></a><!-- doxytag: member="ooh245.h::ooSendH245UserInputIndication_signal" ref="g424968e103b592d6435c529f5838f39f" args="(OOH323CallData *call, const char *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendH245UserInputIndication_signal           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send dtmf digits as user input indication message contating dtmf signal type.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which dtmf has to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>DTMF data</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success; OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gaf5645510a323b827036e1e0eddd198f"></a><!-- doxytag: member="ooh245.h::ooSendRequestCloseLogicalChannel" ref="gaf5645510a323b827036e1e0eddd198f" args="(struct OOH323CallData *call, ooLogicalChannel *logicalChan)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooSendRequestCloseLogicalChannel           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ooLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>logicalChan</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to request a remote end point to close a logical channel.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to call for which the logical channel has to be closed. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>logicalChan</em>&nbsp;</td><td>Pointer to the logical channel structure which needs to be closed.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g6d26b969054c0e09a9d694eb492ef1d6"></a><!-- doxytag: member="ooh245.h::ooSendRequestChannelCloseRelease" ref="g6d26b969054c0e09a9d694eb492ef1d6" args="(struct OOH323CallData *call, int channelNum)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSendRequestChannelCloseRelease           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>channelNum</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a RequestChannelCloseRelease message when the corresponding timer has expired.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channelNum</em>&nbsp;</td><td>Channel number.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g185080fa9d72888964611ae55d3a321e"></a><!-- doxytag: member="ooh245.h::ooOnReceivedRequestChannelClose" ref="g185080fa9d72888964611ae55d3a321e" args="(struct OOH323CallData *call, H245RequestChannelClose *rclc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooOnReceivedRequestChannelClose           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245RequestChannelClose *&nbsp;</td>
          <td class="paramname"> <em>rclc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function handles the received RequestChannelClose message, verifies that the requested channel is forward channel.
<p>
It sends an acknowledgement for the message followed by CloseLogicalChannel message. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Pointer to the call for which RequestChannelClose is received. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rclc</em>&nbsp;</td><td>Pointer to the received message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g7d71796df9882e389bcdd58018f5b6c8"></a><!-- doxytag: member="ooh245.h::ooOnReceivedRequestChannelCloseReject" ref="g7d71796df9882e389bcdd58018f5b6c8" args="(struct OOH323CallData *call, H245RequestChannelCloseReject *rccReject)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooOnReceivedRequestChannelCloseReject           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245RequestChannelCloseReject *&nbsp;</td>
          <td class="paramname"> <em>rccReject</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle a received RequestChannelCloseReject response message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rccReject</em>&nbsp;</td><td>Pointer to the received reject response message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g8094e3a70292139bae5fd831757f65f5"></a><!-- doxytag: member="ooh245.h::ooOnReceivedRequestChannelCloseAck" ref="g8094e3a70292139bae5fd831757f65f5" args="(struct OOH323CallData *call, H245RequestChannelCloseAck *rccAck)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooOnReceivedRequestChannelCloseAck           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245RequestChannelCloseAck *&nbsp;</td>
          <td class="paramname"> <em>rccAck</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to handle a received RequestChannelCloseAck response message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rccAck</em>&nbsp;</td><td>Pointer to the received ack response message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g2871a71cdca4168aaa5317460773d29b"></a><!-- doxytag: member="ooh245.h::ooBuildFastStartOLC" ref="g2871a71cdca4168aaa5317460773d29b" args="(struct OOH323CallData *call, H245OpenLogicalChannel *olc, ooH323EpCapability *epCap, OOCTXT *pctxt, int dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooBuildFastStartOLC           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>olc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *&nbsp;</td>
          <td class="paramname"> <em>epCap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>dir</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Builds an OLC for faststart with an audio/video capability passed as parameter.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to call for which OLC has to be built. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olc</em>&nbsp;</td><td>Pointer to an OLC structure which will be populated. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>epCap</em>&nbsp;</td><td>Pointer to the capability which will be used to build OLC. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to an <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure which will be used to allocate additional memory for OLC. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dir</em>&nbsp;</td><td>Direction of OLC</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gdab98e24b13523934452f87095b228ba"></a><!-- doxytag: member="ooh245.h::ooPrepareFastStartResponseOLC" ref="gdab98e24b13523934452f87095b228ba" args="(OOH323CallData *call, H245OpenLogicalChannel *olc, ooH323EpCapability *epCap, OOCTXT *pctxt, int dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooPrepareFastStartResponseOLC           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245OpenLogicalChannel *&nbsp;</td>
          <td class="paramname"> <em>olc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structooH323EpCapability.shtml">ooH323EpCapability</a> *&nbsp;</td>
          <td class="paramname"> <em>epCap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>dir</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prepares a faststart response olc from the olc received in SETUP message.
<p>
This function just changes the mediaChannel and mediaControl channel part of the olc received in SETUP. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to call for which OLC has to be built. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>olc</em>&nbsp;</td><td>Pointer to an received OLC structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>epCap</em>&nbsp;</td><td>Pointer to the capability which will be used for this channel. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to an <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure which will be used to allocate additional memory for OLC. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dir</em>&nbsp;</td><td>Direction of channel OORX, OOTX etc.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g6b9b929f8dca22d850911d4aad3654f2"></a><!-- doxytag: member="ooh245.h::ooEncodeH245Message" ref="g6b9b929f8dca22d850911d4aad3654f2" args="(struct OOH323CallData *call, H245Message *ph245Msg, ASN1OCTET *msgbuf, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int ooEncodeH245Message           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structH245Message.shtml">H245Message</a> *&nbsp;</td>
          <td class="paramname"> <em>ph245Msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cruntime.shtml#gd45df98231e0a493f3ff759d6d435e5c">ASN1OCTET</a> *&nbsp;</td>
          <td class="paramname"> <em>msgbuf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to encode an H245 message and return encoded data into the buffer passed as a parameter to the function.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ph245Msg</em>&nbsp;</td><td>Handle to the message to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgbuf</em>&nbsp;</td><td>buffer in which encoded message will be returned. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Size of the buffer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure </dd></dl>

</div>
</div><p>
<a class="anchor" name="g69c3fc20bff59e0138d8cfa983e334d1"></a><!-- doxytag: member="ooh245.h::ooSendMasterSlaveDeterminationRelease" ref="g69c3fc20bff59e0138d8cfa983e334d1" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSendMasterSlaveDeterminationRelease           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a master-slave determination release message.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to call, for which MSDRelease message has to be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g9a76540c3740531216187ece11ba10f2"></a><!-- doxytag: member="ooh245.h::ooSendTerminalCapabilitySetReject" ref="g9a76540c3740531216187ece11ba10f2" args="(struct OOH323CallData *call, int seqNo, ASN1UINT cause)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSendTerminalCapabilitySetReject           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>seqNo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cruntime.shtml#g4f87fdfc7cb076157d6efd758b056c4f">ASN1UINT</a>&nbsp;</td>
          <td class="paramname"> <em>cause</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a terminal capability set reject message to the remote endpoint.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to the call for which reject message has to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>seqNo</em>&nbsp;</td><td>Sequence number of the TCS message to be rejected. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cause</em>&nbsp;</td><td>Cause for rejecting a TCS message.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success; OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g641a3b313194f5906dc141846d0b8062"></a><!-- doxytag: member="ooh245.h::ooSendTerminalCapabilitySetRelease" ref="g641a3b313194f5906dc141846d0b8062" args="(struct OOH323CallData *call)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSendTerminalCapabilitySetRelease           </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is used to send a TerminalCapabilitySetRelease message after capability exchange timer has expired.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to call for which release message has to be sent.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success; OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g8fbe9dd0880a523e49e4940e5f0d5e3a"></a><!-- doxytag: member="ooh245.h::ooGetIpPortFromH245TransportAddress" ref="g8fbe9dd0880a523e49e4940e5f0d5e3a" args="(OOH323CallData *call, H245TransportAddress *h245Address, char *ip, int *port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooGetIpPortFromH245TransportAddress           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOH323CallData.shtml">OOH323CallData</a> *&nbsp;</td>
          <td class="paramname"> <em>call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">H245TransportAddress *&nbsp;</td>
          <td class="paramname"> <em>h245Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>ip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is an helper function used to extract ip address and port info from H245TransportAddress structure.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>call</em>&nbsp;</td><td>Handle to associated call. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>h245Address</em>&nbsp;</td><td>Handle to H245TransportAddress structure from which information has to be extracted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ip</em>&nbsp;</td><td>Pointer to buffer in which ip address will be returned. Make sure that buffer has sufficient length. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>Pointer to integer in which port number will be returned.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, on failure. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g417ada547f2756bbdeae3c56e5114ced"></a><!-- doxytag: member="ooh245.h::ooMSDTimerExpired" ref="g417ada547f2756bbdeae3c56e5114ced" args="(void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooMSDTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired master-slave determination timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gcd430eedc22022a0ed5317753972032d"></a><!-- doxytag: member="ooh245.h::ooTCSTimerExpired" ref="gcd430eedc22022a0ed5317753972032d" args="(void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooTCSTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired capability exchange timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gc1c560ef02cbafab3013a14d1020b7b2"></a><!-- doxytag: member="ooh245.h::ooOpenLogicalChannelTimerExpired" ref="gc1c560ef02cbafab3013a14d1020b7b2" args="(void *pdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooOpenLogicalChannelTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pdata</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired OpenLogicalChannel timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pdata</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gb1254567d5c59621b1a6053b178a3764"></a><!-- doxytag: member="ooh245.h::ooCloseLogicalChannelTimerExpired" ref="gb1254567d5c59621b1a6053b178a3764" args="(void *pdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooCloseLogicalChannelTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pdata</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired CloseLogicalChannel timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pdata</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g7f64a7e063f18a168d6df576af2eff7a"></a><!-- doxytag: member="ooh245.h::ooRequestChannelCloseTimerExpired" ref="g7f64a7e063f18a168d6df576af2eff7a" args="(void *pdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooRequestChannelCloseTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pdata</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired RequestChannelClose timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pdata</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gc8d4b175f06fb09412e699ee11779254"></a><!-- doxytag: member="ooh245.h::ooSessionTimerExpired" ref="gc8d4b175f06fb09412e699ee11779254" args="(void *pdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ooSessionTimerExpired           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>pdata</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a callback function for handling an expired EndSession timer.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pdata</em>&nbsp;</td><td>Callback data registered at the time of creation of the timer.</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>OO_OK, on success. OO_FAILED, otherwise. </dd></dl>

</div>
</div><p>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
  <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
    10 Mar 2010.<BR> Objective Open H.323 Stack, 0.9.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
