<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
    <TITLE>Objective Open H.323 Stack: C Runtime Common Functions</TITLE>
    <LINK REL="stylesheet" HREF="stylesheet.css" TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
    <CENTER>
      <DIV ID="pageDiv">
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
          <TR>
            <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
             SRC="./images/Head1.jpg" WIDTH="725" HEIGHT="90"
             ALT="Objective Systems, Inc."></TD>
            <TD WIDTH="100%" BACKGROUND="./images/Head2.jpg">&nbsp;</TD>
          </TR>
        </TABLE>
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="10" CELLPADDING="10">
          <TR><TD>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="annotated.shtml"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>C Runtime Common Functions</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1OctStr.shtml">ASN1OctStr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1DynBitStr.shtml">ASN1DynBitStr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1BitStr32.shtml">ASN1BitStr32</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1SeqOf.shtml">ASN1SeqOf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1SeqOfOctStr.shtml">ASN1SeqOfOctStr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1OpenType.shtml">ASN1OpenType</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structAsn116BitCharString.shtml">Asn116BitCharString</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structAsn132BitCharString.shtml">Asn132BitCharString</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structAsn1CharArray.shtml">Asn1CharArray</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structAsn1CharSet.shtml">Asn1CharSet</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct__Asn1SizeCnst.shtml">_Asn1SizeCnst</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1BUFFER.shtml">ASN1BUFFER</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1BUFSAVE.shtml">ASN1BUFSAVE</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1ErrLocn.shtml">ASN1ErrLocn</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOOCTXT.shtml">OOCTXT</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct__OOMsgBuf.shtml">_OOMsgBuf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOOEnumItem.shtml">OOEnumItem</a></td></tr>
<tr><td colspan="2"><h2>Modules</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mem.shtml">Memory Allocation Macros and Functions</a></td></tr>

<p><tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><p>Memory allocation functions and macros handle memory management for the ASN1C run-time. </p>
<br/></td></tr>
</p>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cmfun.shtml">Context Management Functions</a></td></tr>

<p><tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><p>Context initialization functions handle the allocation, initialization, and destruction of ASN.1 context variables (variables of type <a class="el" href="structOOCTXT.shtml">OOCTXT</a>). </p>
<br/></td></tr>
</p>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml">Error Formatting and Print Functions</a></td></tr>

<p><tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><p>cmfun </p>
<br/></td></tr>
</p>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rtmem.shtml">Rtmem</a></td></tr>
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8f4bd7613f84c734a1e31386949e7190"></a><!-- doxytag: member="cruntime::ASN_OK" ref="ga8f4bd7613f84c734a1e31386949e7190" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_OK</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf5ea57a2197f926a402c01e6e08e3809"></a><!-- doxytag: member="cruntime::ASN_OK_FRAG" ref="gaf5ea57a2197f926a402c01e6e08e3809" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_OK_FRAG</b>&nbsp;&nbsp;&nbsp;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacdd670ba30b4ba294a851fa4a21b54dd"></a><!-- doxytag: member="cruntime::ASN_E_BUFOVFLW" ref="gacdd670ba30b4ba294a851fa4a21b54dd" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_BUFOVFLW</b>&nbsp;&nbsp;&nbsp;-1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga604d679e937ad0c66410929572b6c87a"></a><!-- doxytag: member="cruntime::ASN_E_ENDOFBUF" ref="ga604d679e937ad0c66410929572b6c87a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_ENDOFBUF</b>&nbsp;&nbsp;&nbsp;-2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga74d505a0ad04260f831b3fb38d595f10"></a><!-- doxytag: member="cruntime::ASN_E_IDNOTFOU" ref="ga74d505a0ad04260f831b3fb38d595f10" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_IDNOTFOU</b>&nbsp;&nbsp;&nbsp;-3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab461673e42479de788a8274c62700ef6"></a><!-- doxytag: member="cruntime::ASN_E_INVOBJID" ref="gab461673e42479de788a8274c62700ef6" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVOBJID</b>&nbsp;&nbsp;&nbsp;-4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga955acd1be8c23191facfcd7650be253e"></a><!-- doxytag: member="cruntime::ASN_E_INVLEN" ref="ga955acd1be8c23191facfcd7650be253e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVLEN</b>&nbsp;&nbsp;&nbsp;-5</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaffef2c59d5bd210fd130b560082c78e1"></a><!-- doxytag: member="cruntime::ASN_E_INVENUM" ref="gaffef2c59d5bd210fd130b560082c78e1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVENUM</b>&nbsp;&nbsp;&nbsp;-6</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga630a8c3229c570a63c74e25c9c73865e"></a><!-- doxytag: member="cruntime::ASN_E_SETDUPL" ref="ga630a8c3229c570a63c74e25c9c73865e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_SETDUPL</b>&nbsp;&nbsp;&nbsp;-7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2576a847877e2805f3af7fca3a6ed4fc"></a><!-- doxytag: member="cruntime::ASN_E_SETMISRQ" ref="ga2576a847877e2805f3af7fca3a6ed4fc" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_SETMISRQ</b>&nbsp;&nbsp;&nbsp;-8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga915a847fd0d8eaa7c0ededae559822ae"></a><!-- doxytag: member="cruntime::ASN_E_NOTINSET" ref="ga915a847fd0d8eaa7c0ededae559822ae" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_NOTINSET</b>&nbsp;&nbsp;&nbsp;-9</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga58d77cd8f1b79e9230810f86e0e130ed"></a><!-- doxytag: member="cruntime::ASN_E_SEQOVFLW" ref="ga58d77cd8f1b79e9230810f86e0e130ed" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_SEQOVFLW</b>&nbsp;&nbsp;&nbsp;-10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacc4c98b6aa66d3d661f4db04e31ec4f6"></a><!-- doxytag: member="cruntime::ASN_E_INVOPT" ref="gacc4c98b6aa66d3d661f4db04e31ec4f6" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVOPT</b>&nbsp;&nbsp;&nbsp;-11</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa710be6a102aa95be6d76b38e9fec4cf"></a><!-- doxytag: member="cruntime::ASN_E_NOMEM" ref="gaa710be6a102aa95be6d76b38e9fec4cf" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_NOMEM</b>&nbsp;&nbsp;&nbsp;-12</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gace7ebc2b86a521de2d44fe5940c5cec9"></a><!-- doxytag: member="cruntime::ASN_E_INVHEXS" ref="gace7ebc2b86a521de2d44fe5940c5cec9" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVHEXS</b>&nbsp;&nbsp;&nbsp;-14</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga23dfa1958d7e16200eabdd69bceb8d14"></a><!-- doxytag: member="cruntime::ASN_E_INVBINS" ref="ga23dfa1958d7e16200eabdd69bceb8d14" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVBINS</b>&nbsp;&nbsp;&nbsp;-15</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga81f7edb9bb36844a6d37c4875b6f06ac"></a><!-- doxytag: member="cruntime::ASN_E_INVREAL" ref="ga81f7edb9bb36844a6d37c4875b6f06ac" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVREAL</b>&nbsp;&nbsp;&nbsp;-16</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga18b7f9609c836e498ff1fc8528d74485"></a><!-- doxytag: member="cruntime::ASN_E_STROVFLW" ref="ga18b7f9609c836e498ff1fc8528d74485" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_STROVFLW</b>&nbsp;&nbsp;&nbsp;-17</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga14e978c250e374c7ab0880b10ef8772d"></a><!-- doxytag: member="cruntime::ASN_E_BADVALUE" ref="ga14e978c250e374c7ab0880b10ef8772d" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_BADVALUE</b>&nbsp;&nbsp;&nbsp;-18</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7c3afdfe2b5a9d9d4588011786b42839"></a><!-- doxytag: member="cruntime::ASN_E_UNDEFVAL" ref="ga7c3afdfe2b5a9d9d4588011786b42839" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_UNDEFVAL</b>&nbsp;&nbsp;&nbsp;-19</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga69cb98ff895b6ddd4eb104a7a3759d15"></a><!-- doxytag: member="cruntime::ASN_E_UNDEFTYP" ref="ga69cb98ff895b6ddd4eb104a7a3759d15" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_UNDEFTYP</b>&nbsp;&nbsp;&nbsp;-20</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0db579be13a32590271daf1c2e1671a0"></a><!-- doxytag: member="cruntime::ASN_E_BADTAG" ref="ga0db579be13a32590271daf1c2e1671a0" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_BADTAG</b>&nbsp;&nbsp;&nbsp;-21</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafb0cd04d382ae733b6f48a6c9720b1a6"></a><!-- doxytag: member="cruntime::ASN_E_TOODEEP" ref="gafb0cd04d382ae733b6f48a6c9720b1a6" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_TOODEEP</b>&nbsp;&nbsp;&nbsp;-22</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab2edb95da301b0e564bf0fabbbd6b760"></a><!-- doxytag: member="cruntime::ASN_E_CONSVIO" ref="gab2edb95da301b0e564bf0fabbbd6b760" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_CONSVIO</b>&nbsp;&nbsp;&nbsp;-23</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga74bafc6261c9a8c849b56f214304e929"></a><!-- doxytag: member="cruntime::ASN_E_RANGERR" ref="ga74bafc6261c9a8c849b56f214304e929" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_RANGERR</b>&nbsp;&nbsp;&nbsp;-24</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga54efd600576db8b43681f37af6fbafee"></a><!-- doxytag: member="cruntime::ASN_E_ENDOFFILE" ref="ga54efd600576db8b43681f37af6fbafee" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_ENDOFFILE</b>&nbsp;&nbsp;&nbsp;-25</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6d3c66e116da27824059ae2023d0e17c"></a><!-- doxytag: member="cruntime::ASN_E_INVUTF8" ref="ga6d3c66e116da27824059ae2023d0e17c" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVUTF8</b>&nbsp;&nbsp;&nbsp;-26</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gace0dbea4f62a73d7db686807ed730cd4"></a><!-- doxytag: member="cruntime::ASN_E_CONCMODF" ref="gace0dbea4f62a73d7db686807ed730cd4" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_CONCMODF</b>&nbsp;&nbsp;&nbsp;-27</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9c545b9679d6b77b9179bb70503cc9fd"></a><!-- doxytag: member="cruntime::ASN_E_ILLSTATE" ref="ga9c545b9679d6b77b9179bb70503cc9fd" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_ILLSTATE</b>&nbsp;&nbsp;&nbsp;-28</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga132ec629d46ce19ca4ee220f4e5c32b2"></a><!-- doxytag: member="cruntime::ASN_E_OUTOFBND" ref="ga132ec629d46ce19ca4ee220f4e5c32b2" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_OUTOFBND</b>&nbsp;&nbsp;&nbsp;-29</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3ec0c93938394a8686efcdfa898d1098"></a><!-- doxytag: member="cruntime::ASN_E_INVPARAM" ref="ga3ec0c93938394a8686efcdfa898d1098" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVPARAM</b>&nbsp;&nbsp;&nbsp;-30</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa98ac04e6f9378b1166ba7272f635434"></a><!-- doxytag: member="cruntime::ASN_E_INVFORMAT" ref="gaa98ac04e6f9378b1166ba7272f635434" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVFORMAT</b>&nbsp;&nbsp;&nbsp;-31</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7bcd167583fe9ab22fac33c2ff5048b3"></a><!-- doxytag: member="cruntime::ASN_E_NOTINIT" ref="ga7bcd167583fe9ab22fac33c2ff5048b3" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_NOTINIT</b>&nbsp;&nbsp;&nbsp;-32</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga41ba706f9ca6297621f99062cbaabe67"></a><!-- doxytag: member="cruntime::ASN_E_TOOBIG" ref="ga41ba706f9ca6297621f99062cbaabe67" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_TOOBIG</b>&nbsp;&nbsp;&nbsp;-33</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7f08bb26fd0c6bd9ee3a7ac538f167ed"></a><!-- doxytag: member="cruntime::ASN_E_INVCHAR" ref="ga7f08bb26fd0c6bd9ee3a7ac538f167ed" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVCHAR</b>&nbsp;&nbsp;&nbsp;-34</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4078b4f63c822d99d5f494cfa3b5ecea"></a><!-- doxytag: member="cruntime::ASN_E_XMLSTATE" ref="ga4078b4f63c822d99d5f494cfa3b5ecea" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_XMLSTATE</b>&nbsp;&nbsp;&nbsp;-35</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4e6c3c2286b318c726118141dadbb566"></a><!-- doxytag: member="cruntime::ASN_E_XMLPARSE" ref="ga4e6c3c2286b318c726118141dadbb566" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_XMLPARSE</b>&nbsp;&nbsp;&nbsp;-36</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5951cd81d449ed27aac5035e763d8e92"></a><!-- doxytag: member="cruntime::ASN_E_SEQORDER" ref="ga5951cd81d449ed27aac5035e763d8e92" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_SEQORDER</b>&nbsp;&nbsp;&nbsp;-37</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae1797c71b855528dbe1ef853b871808a"></a><!-- doxytag: member="cruntime::ASN_E_INVINDEX" ref="gae1797c71b855528dbe1ef853b871808a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVINDEX</b>&nbsp;&nbsp;&nbsp;-38</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8080160e2806b6b3932374f3f54b74a7"></a><!-- doxytag: member="cruntime::ASN_E_INVTCVAL" ref="ga8080160e2806b6b3932374f3f54b74a7" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVTCVAL</b>&nbsp;&nbsp;&nbsp;-39</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7ff5416f7fa09b83ff67bbce64998674"></a><!-- doxytag: member="cruntime::ASN_E_FILNOTFOU" ref="ga7ff5416f7fa09b83ff67bbce64998674" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_FILNOTFOU</b>&nbsp;&nbsp;&nbsp;-40</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gabb21bfaf6f3df3011d81693ee6ce1e4a"></a><!-- doxytag: member="cruntime::ASN_E_FILEREAD" ref="gabb21bfaf6f3df3011d81693ee6ce1e4a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_FILEREAD</b>&nbsp;&nbsp;&nbsp;-41</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaafdd7ea65b56857504a76d3a0211bc4b"></a><!-- doxytag: member="cruntime::ASN_E_FILEWRITE" ref="gaafdd7ea65b56857504a76d3a0211bc4b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_FILEWRITE</b>&nbsp;&nbsp;&nbsp;-42</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaede8cc5dc6e8d5443af5ce93e76d0dad"></a><!-- doxytag: member="cruntime::ASN_E_INVBASE64" ref="gaede8cc5dc6e8d5443af5ce93e76d0dad" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVBASE64</b>&nbsp;&nbsp;&nbsp;-43</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga430e58bbfd2345a05947b6b762e1f465"></a><!-- doxytag: member="cruntime::ASN_E_INVSOCKET" ref="ga430e58bbfd2345a05947b6b762e1f465" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_INVSOCKET</b>&nbsp;&nbsp;&nbsp;-44</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga13ac40c738f0c09f3ae9708c90236eb9"></a><!-- doxytag: member="cruntime::ASN_E_XMLLIBNFOU" ref="ga13ac40c738f0c09f3ae9708c90236eb9" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_XMLLIBNFOU</b>&nbsp;&nbsp;&nbsp;-45</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3a6d9b861a1eba340a82c7403ec7bc32"></a><!-- doxytag: member="cruntime::ASN_E_XMLLIBINV" ref="ga3a6d9b861a1eba340a82c7403ec7bc32" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_XMLLIBINV</b>&nbsp;&nbsp;&nbsp;-46</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacc97806e11a8297e01a325a0bbde0ae0"></a><!-- doxytag: member="cruntime::ASN_E_NOTSUPP" ref="gacc97806e11a8297e01a325a0bbde0ae0" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_E_NOTSUPP</b>&nbsp;&nbsp;&nbsp;-99</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga52d86c629498b8f96949a6dc18ddaf78"></a><!-- doxytag: member="cruntime::ASN_K_INDEFLEN" ref="ga52d86c629498b8f96949a6dc18ddaf78" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_INDEFLEN</b>&nbsp;&nbsp;&nbsp;-9999</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1f3826f827cbfa6a410951d3f239f574"></a><!-- doxytag: member="cruntime::ASN_ID_EOC" ref="ga1f3826f827cbfa6a410951d3f239f574" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_EOC</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa2599c585f7530a55d8cd1a8330376a1"></a><!-- doxytag: member="cruntime::ASN_ID_BOOL" ref="gaa2599c585f7530a55d8cd1a8330376a1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_BOOL</b>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga32fab1cc8dfcae9152414646d3cacd29"></a><!-- doxytag: member="cruntime::ASN_ID_INT" ref="ga32fab1cc8dfcae9152414646d3cacd29" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_INT</b>&nbsp;&nbsp;&nbsp;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga147127aa13510eab0dde07f556437bbd"></a><!-- doxytag: member="cruntime::ASN_ID_BITSTR" ref="ga147127aa13510eab0dde07f556437bbd" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_BITSTR</b>&nbsp;&nbsp;&nbsp;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa18cdd242bdd1c60b109331f8c5b710a"></a><!-- doxytag: member="cruntime::ASN_ID_OCTSTR" ref="gaa18cdd242bdd1c60b109331f8c5b710a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_OCTSTR</b>&nbsp;&nbsp;&nbsp;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga04c7dae7c098891ebffaacad1e98c054"></a><!-- doxytag: member="cruntime::ASN_ID_NULL" ref="ga04c7dae7c098891ebffaacad1e98c054" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_NULL</b>&nbsp;&nbsp;&nbsp;5</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga52176844d830334dab6478a458a95f8e"></a><!-- doxytag: member="cruntime::ASN_ID_OBJID" ref="ga52176844d830334dab6478a458a95f8e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_OBJID</b>&nbsp;&nbsp;&nbsp;6</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafc0c8fb39552d8862f902891a2099384"></a><!-- doxytag: member="cruntime::ASN_ID_OBJDSC" ref="gafc0c8fb39552d8862f902891a2099384" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_OBJDSC</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga78ee1e60ff1f3b8173a1dd5163f04e76"></a><!-- doxytag: member="cruntime::ASN_ID_EXTERN" ref="ga78ee1e60ff1f3b8173a1dd5163f04e76" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_EXTERN</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafca480cca7a46f0fa984583018a135e2"></a><!-- doxytag: member="cruntime::ASN_ID_REAL" ref="gafca480cca7a46f0fa984583018a135e2" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_REAL</b>&nbsp;&nbsp;&nbsp;9</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga05fce71b254ce7d6c025e416a0884fee"></a><!-- doxytag: member="cruntime::ASN_ID_ENUM" ref="ga05fce71b254ce7d6c025e416a0884fee" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_ENUM</b>&nbsp;&nbsp;&nbsp;10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf7db19008e595a1cdf9e36db2aee7c59"></a><!-- doxytag: member="cruntime::ASN_ID_EPDV" ref="gaf7db19008e595a1cdf9e36db2aee7c59" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_EPDV</b>&nbsp;&nbsp;&nbsp;11</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga38b59a1ee9e88cb59da3686745e2790c"></a><!-- doxytag: member="cruntime::ASN_ID_RELOID" ref="ga38b59a1ee9e88cb59da3686745e2790c" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_RELOID</b>&nbsp;&nbsp;&nbsp;13</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae3b7e19a558ca5778c7ded4ff0a31e9b"></a><!-- doxytag: member="cruntime::ASN_ID_SEQ" ref="gae3b7e19a558ca5778c7ded4ff0a31e9b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_SEQ</b>&nbsp;&nbsp;&nbsp;16</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad105d6211e671ba20b834123f636b3d1"></a><!-- doxytag: member="cruntime::ASN_ID_SET" ref="gad105d6211e671ba20b834123f636b3d1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_SET</b>&nbsp;&nbsp;&nbsp;17</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga459adce99d44ef4289ec85de8d83903b"></a><!-- doxytag: member="cruntime::ASN_SEQ_TAG" ref="ga459adce99d44ef4289ec85de8d83903b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_SEQ_TAG</b>&nbsp;&nbsp;&nbsp;0x30</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga20bd74371aee3d9af983bfd0e408e129"></a><!-- doxytag: member="cruntime::ASN_SET_TAG" ref="ga20bd74371aee3d9af983bfd0e408e129" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_SET_TAG</b>&nbsp;&nbsp;&nbsp;0x31</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga88468f4fff78f445d9f4d103d990fa74"></a><!-- doxytag: member="cruntime::ASN_ID_NumericString" ref="ga88468f4fff78f445d9f4d103d990fa74" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_NumericString</b>&nbsp;&nbsp;&nbsp;18</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafc3dcc84abe210f28ccf3980beaf6235"></a><!-- doxytag: member="cruntime::ASN_ID_PrintableString" ref="gafc3dcc84abe210f28ccf3980beaf6235" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_PrintableString</b>&nbsp;&nbsp;&nbsp;19</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga12dbb54bf515cd64c08983d7b7c8d32e"></a><!-- doxytag: member="cruntime::ASN_ID_TeletexString" ref="ga12dbb54bf515cd64c08983d7b7c8d32e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_TeletexString</b>&nbsp;&nbsp;&nbsp;20</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gade51560cc53516e09645c532882e9f4b"></a><!-- doxytag: member="cruntime::ASN_ID_T61String" ref="gade51560cc53516e09645c532882e9f4b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_T61String</b>&nbsp;&nbsp;&nbsp;ASN_ID_TeletexString</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1ba52b85df9ceb4f3c3f21f2a9096079"></a><!-- doxytag: member="cruntime::ASN_ID_VideotexString" ref="ga1ba52b85df9ceb4f3c3f21f2a9096079" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_VideotexString</b>&nbsp;&nbsp;&nbsp;21</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae528f55f6f351190344a589b689f9cad"></a><!-- doxytag: member="cruntime::ASN_ID_IA5String" ref="gae528f55f6f351190344a589b689f9cad" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_IA5String</b>&nbsp;&nbsp;&nbsp;22</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6e44f0b090d27c444eae689ed94775b6"></a><!-- doxytag: member="cruntime::ASN_ID_UTCTime" ref="ga6e44f0b090d27c444eae689ed94775b6" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_UTCTime</b>&nbsp;&nbsp;&nbsp;23</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7de02f9ec82336075f5066ed0384e25a"></a><!-- doxytag: member="cruntime::ASN_ID_GeneralTime" ref="ga7de02f9ec82336075f5066ed0384e25a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_GeneralTime</b>&nbsp;&nbsp;&nbsp;24</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0859ef221e68e05edfcea9208164219f"></a><!-- doxytag: member="cruntime::ASN_ID_GraphicString" ref="ga0859ef221e68e05edfcea9208164219f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_GraphicString</b>&nbsp;&nbsp;&nbsp;25</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf4e3667c6d353f2f7c26d938645a2555"></a><!-- doxytag: member="cruntime::ASN_ID_VisibleString" ref="gaf4e3667c6d353f2f7c26d938645a2555" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_VisibleString</b>&nbsp;&nbsp;&nbsp;26</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf9a0d44b7785c27303bbf1d6d0f9ee6b"></a><!-- doxytag: member="cruntime::ASN_ID_GeneralString" ref="gaf9a0d44b7785c27303bbf1d6d0f9ee6b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_GeneralString</b>&nbsp;&nbsp;&nbsp;27</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2daf169af01a89121c741e60c4d6b6c3"></a><!-- doxytag: member="cruntime::ASN_ID_UniversalString" ref="ga2daf169af01a89121c741e60c4d6b6c3" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_UniversalString</b>&nbsp;&nbsp;&nbsp;28</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab03c99226d2e249e841ec69b291ad242"></a><!-- doxytag: member="cruntime::ASN_ID_BMPString" ref="gab03c99226d2e249e841ec69b291ad242" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_ID_BMPString</b>&nbsp;&nbsp;&nbsp;30</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga46677ca73cfc31753964534c31d634f5"></a><!-- doxytag: member="cruntime::XM_SEEK" ref="ga46677ca73cfc31753964534c31d634f5" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>XM_SEEK</b>&nbsp;&nbsp;&nbsp;0x01</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf3eb0868e7493a09af890c3f0aa8419b"></a><!-- doxytag: member="cruntime::XM_ADVANCE" ref="gaf3eb0868e7493a09af890c3f0aa8419b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>XM_ADVANCE</b>&nbsp;&nbsp;&nbsp;0x02</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab31e4d1c43feeea4cc0be3831ca8c5b9"></a><!-- doxytag: member="cruntime::XM_DYNAMIC" ref="gab31e4d1c43feeea4cc0be3831ca8c5b9" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>XM_DYNAMIC</b>&nbsp;&nbsp;&nbsp;0x04</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga11de53e22e3f6f3c4c05b84da5598ffd"></a><!-- doxytag: member="cruntime::XM_SKIP" ref="ga11de53e22e3f6f3c4c05b84da5598ffd" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>XM_SKIP</b>&nbsp;&nbsp;&nbsp;0x08</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6546e7380f047b44331ed275dc190c58"></a><!-- doxytag: member="cruntime::ASN_K_MAXDEPTH" ref="ga6546e7380f047b44331ed275dc190c58" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MAXDEPTH</b>&nbsp;&nbsp;&nbsp;32</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3628dbe6261bbc0d47b77307664001f5"></a><!-- doxytag: member="cruntime::ASN_K_MAXSUBIDS" ref="ga3628dbe6261bbc0d47b77307664001f5" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MAXSUBIDS</b>&nbsp;&nbsp;&nbsp;128</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga08e5927526895468eb39a7c6cb60670d"></a><!-- doxytag: member="cruntime::ASN_K_MAXENUM" ref="ga08e5927526895468eb39a7c6cb60670d" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MAXENUM</b>&nbsp;&nbsp;&nbsp;100</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga73e4348330e6fd759819dd84c843592f"></a><!-- doxytag: member="cruntime::ASN_K_MAXERRP" ref="ga73e4348330e6fd759819dd84c843592f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MAXERRP</b>&nbsp;&nbsp;&nbsp;5</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga83dff37388f40120a278644c4ca7397b"></a><!-- doxytag: member="cruntime::ASN_K_MAXERRSTK" ref="ga83dff37388f40120a278644c4ca7397b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MAXERRSTK</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8860758cd7d62c6615dd5f6d8366da1e"></a><!-- doxytag: member="cruntime::ASN_K_ENCBUFSIZ" ref="ga8860758cd7d62c6615dd5f6d8366da1e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_ENCBUFSIZ</b>&nbsp;&nbsp;&nbsp;2*1024</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga35a47afbb9281b55c1441a25db1a70fb"></a><!-- doxytag: member="cruntime::ASN_K_MEMBUFSEG" ref="ga35a47afbb9281b55c1441a25db1a70fb" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN_K_MEMBUFSEG</b>&nbsp;&nbsp;&nbsp;1024</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae65e97087c250ceaa465b65664bca88f"></a><!-- doxytag: member="cruntime::NUM_ABITS" ref="gae65e97087c250ceaa465b65664bca88f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>NUM_ABITS</b>&nbsp;&nbsp;&nbsp;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaae4eb6b3e8b33f82af036c973cff3cfe"></a><!-- doxytag: member="cruntime::NUM_UBITS" ref="gaae4eb6b3e8b33f82af036c973cff3cfe" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>NUM_UBITS</b>&nbsp;&nbsp;&nbsp;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad03892b6c2110067f7fb3740b65906b9"></a><!-- doxytag: member="cruntime::NUM_CANSET" ref="gad03892b6c2110067f7fb3740b65906b9" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>NUM_CANSET</b>&nbsp;&nbsp;&nbsp;&quot; 0123456789&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa06ed7d4ad35f2631bd53572bf8159d1"></a><!-- doxytag: member="cruntime::PRN_ABITS" ref="gaa06ed7d4ad35f2631bd53572bf8159d1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>PRN_ABITS</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad92a9b830e3b1a5fa3de5dded9891a44"></a><!-- doxytag: member="cruntime::PRN_UBITS" ref="gad92a9b830e3b1a5fa3de5dded9891a44" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>PRN_UBITS</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4447bca84424e197430a644196a90f91"></a><!-- doxytag: member="cruntime::PRN_CANSET" ref="ga4447bca84424e197430a644196a90f91" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>PRN_CANSET</b>&nbsp;&nbsp;&nbsp;&quot; '()+,-./0123456789:=?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacfac4d426a14926f406e91b720bc5035"></a><!-- doxytag: member="cruntime::VIS_ABITS" ref="gacfac4d426a14926f406e91b720bc5035" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>VIS_ABITS</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gabc9f485afefd92dfeed7f676246b6f3b"></a><!-- doxytag: member="cruntime::VIS_UBITS" ref="gabc9f485afefd92dfeed7f676246b6f3b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>VIS_UBITS</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>VIS_CANSET</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5fca8bbdcad6a8b38438f47cca2f936f"></a><!-- doxytag: member="cruntime::T61_ABITS" ref="ga5fca8bbdcad6a8b38438f47cca2f936f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>T61_ABITS</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf030f889c3e2ed17ce068da093cd1b78"></a><!-- doxytag: member="cruntime::T61_UBITS" ref="gaf030f889c3e2ed17ce068da093cd1b78" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>T61_UBITS</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>T61_CANSET</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga30a3458c501b1e3e9e10e97a5d5b43a0"></a><!-- doxytag: member="cruntime::IA5_ABITS" ref="ga30a3458c501b1e3e9e10e97a5d5b43a0" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>IA5_ABITS</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad6c291b8a1de9319bf1944d6b7c24072"></a><!-- doxytag: member="cruntime::IA5_UBITS" ref="gad6c291b8a1de9319bf1944d6b7c24072" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>IA5_UBITS</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>IA5_CANSET</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaac5fee4ce622c876208753769b121656"></a><!-- doxytag: member="cruntime::IA5_RANGE1_LOWER" ref="gaac5fee4ce622c876208753769b121656" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>IA5_RANGE1_LOWER</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadc4104d6752c0112e91fe88fb301827e"></a><!-- doxytag: member="cruntime::IA5_RANGE2_LOWER" ref="gadc4104d6752c0112e91fe88fb301827e" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>IA5_RANGE2_LOWER</b>&nbsp;&nbsp;&nbsp;0x5f</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf21208510edf3eb8859af11ebfd11f49"></a><!-- doxytag: member="cruntime::GEN_ABITS" ref="gaf21208510edf3eb8859af11ebfd11f49" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>GEN_ABITS</b>&nbsp;&nbsp;&nbsp;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae8f123f11c0918fcd27feb1b303d9ca2"></a><!-- doxytag: member="cruntime::GEN_UBITS" ref="gae8f123f11c0918fcd27feb1b303d9ca2" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>GEN_UBITS</b>&nbsp;&nbsp;&nbsp;7</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>GEN_CANSET</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafb0af5128a0d8a4c55dd20716b4cbc0b"></a><!-- doxytag: member="cruntime::BMP_ABITS" ref="gafb0af5128a0d8a4c55dd20716b4cbc0b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>BMP_ABITS</b>&nbsp;&nbsp;&nbsp;16</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae40949d0a399b8b18b5761f0abe48265"></a><!-- doxytag: member="cruntime::BMP_UBITS" ref="gae40949d0a399b8b18b5761f0abe48265" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>BMP_UBITS</b>&nbsp;&nbsp;&nbsp;16</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad9f91aaa1ee0fb092386c8385ace2418"></a><!-- doxytag: member="cruntime::BMP_FIRST" ref="gad9f91aaa1ee0fb092386c8385ace2418" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>BMP_FIRST</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1cde8f6889cc9b984a480caa95c326d7"></a><!-- doxytag: member="cruntime::BMP_LAST" ref="ga1cde8f6889cc9b984a480caa95c326d7" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>BMP_LAST</b>&nbsp;&nbsp;&nbsp;0xffff</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga321290e46f56d43c88c67491b3379e5a"></a><!-- doxytag: member="cruntime::UCS_ABITS" ref="ga321290e46f56d43c88c67491b3379e5a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>UCS_ABITS</b>&nbsp;&nbsp;&nbsp;32</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gabe1caca9410788eb3fd362d3c20220df"></a><!-- doxytag: member="cruntime::UCS_UBITS" ref="gabe1caca9410788eb3fd362d3c20220df" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>UCS_UBITS</b>&nbsp;&nbsp;&nbsp;32</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga454ceb1f2e77789cf62f8aa8055a12f8"></a><!-- doxytag: member="cruntime::UCS_FIRST" ref="ga454ceb1f2e77789cf62f8aa8055a12f8" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>UCS_FIRST</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6f400621021953423cfbd1bb9feef140"></a><!-- doxytag: member="cruntime::UCS_LAST" ref="ga6f400621021953423cfbd1bb9feef140" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>UCS_LAST</b>&nbsp;&nbsp;&nbsp;0xfffffffful</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga74bedac9c91ebc5b8696c9f939bddb2f"></a><!-- doxytag: member="cruntime::ASN1TAG_LSHIFT" ref="ga74bedac9c91ebc5b8696c9f939bddb2f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1TAG_LSHIFT</b>&nbsp;&nbsp;&nbsp;24</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7226b4cc76129b1173aa83dc5a4bfd99"></a><!-- doxytag: member="cruntime::ASN1UINT_MAX" ref="ga7226b4cc76129b1173aa83dc5a4bfd99" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UINT_MAX</b>&nbsp;&nbsp;&nbsp;4294967295U</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4fd62686ad3a6c5a2c8ad34464b1ee66"></a><!-- doxytag: member="cruntime::ASN1INT_MAX" ref="ga4fd62686ad3a6c5a2c8ad34464b1ee66" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INT_MAX</b>&nbsp;&nbsp;&nbsp;((ASN1INT)2147483647L)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga56df137f7de62c57858391e09055bd33"></a><!-- doxytag: member="cruntime::ASN1INT_MIN" ref="ga56df137f7de62c57858391e09055bd33" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INT_MIN</b>&nbsp;&nbsp;&nbsp;((ASN1INT)(-ASN1INT_MAX-1))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadb4be0b6d220c5c1dc001573132b2ce1"></a><!-- doxytag: member="cruntime::ASN1UINTCNT" ref="gadb4be0b6d220c5c1dc001573132b2ce1" args="(val)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UINTCNT</b>(val)&nbsp;&nbsp;&nbsp;val##u</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab6b4a943f2be3692767608a31cf306cb"></a><!-- doxytag: member="cruntime::ASN1INT64" ref="gab6b4a943f2be3692767608a31cf306cb" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INT64</b>&nbsp;&nbsp;&nbsp;long</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa93f0eb578d23995850d61f7d61c55c1"></a><!-- doxytag: member="cruntime::FALSE" ref="gaa93f0eb578d23995850d61f7d61c55c1" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>FALSE</b>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa8cecfc5c5c054d2875c03e77b7be15d"></a><!-- doxytag: member="cruntime::TRUE" ref="gaa8cecfc5c5c054d2875c03e77b7be15d" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>TRUE</b>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad45edf989c805f199b78502183ee955c"></a><!-- doxytag: member="cruntime::XM_K_MEMBLKSIZ" ref="gad45edf989c805f199b78502183ee955c" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>XM_K_MEMBLKSIZ</b>&nbsp;&nbsp;&nbsp;(4*1024)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7e0959378af1c541c82fcd85ac8648e3"></a><!-- doxytag: member="cruntime::ASN1DYNCTXT" ref="ga7e0959378af1c541c82fcd85ac8648e3" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1DYNCTXT</b>&nbsp;&nbsp;&nbsp;0x8000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadfd05507323722492c18c28d89e764f0"></a><!-- doxytag: member="cruntime::ASN1INDEFLEN" ref="gadfd05507323722492c18c28d89e764f0" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INDEFLEN</b>&nbsp;&nbsp;&nbsp;0x4000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gadc42297435d897e6ae48ea89329c37e5"></a><!-- doxytag: member="cruntime::ASN1TRACE" ref="gadc42297435d897e6ae48ea89329c37e5" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1TRACE</b>&nbsp;&nbsp;&nbsp;0x2000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0a86a55143a20a744a23063e1fde1641"></a><!-- doxytag: member="cruntime::ASN1LASTEOC" ref="ga0a86a55143a20a744a23063e1fde1641" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1LASTEOC</b>&nbsp;&nbsp;&nbsp;0x1000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gada88b0fa6b8bacae8f477601ec4be102"></a><!-- doxytag: member="cruntime::ASN1FASTCOPY" ref="gada88b0fa6b8bacae8f477601ec4be102" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1FASTCOPY</b>&nbsp;&nbsp;&nbsp;0x0800</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5972f2905804c2720c9f097343d75ee2"></a><!-- doxytag: member="cruntime::ASN1CONSTAG" ref="ga5972f2905804c2720c9f097343d75ee2" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CONSTAG</b>&nbsp;&nbsp;&nbsp;0x0400</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad6c702a92a8a847bd7fad374c4910e67"></a><!-- doxytag: member="cruntime::ASN1CANXER" ref="gad6c702a92a8a847bd7fad374c4910e67" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CANXER</b>&nbsp;&nbsp;&nbsp;0x0200</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf8eaf0cd0f77b728f641ff2f40c9eee9"></a><!-- doxytag: member="cruntime::ASN1SAVEBUF" ref="gaf8eaf0cd0f77b728f641ff2f40c9eee9" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1SAVEBUF</b>&nbsp;&nbsp;&nbsp;0x0100</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9ab407467ffc47bff77a4afdcef80819"></a><!-- doxytag: member="cruntime::ASN1OPENTYPE" ref="ga9ab407467ffc47bff77a4afdcef80819" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1OPENTYPE</b>&nbsp;&nbsp;&nbsp;0x0080</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0d7d0e6b693cabe3d30b867f24c30e7b"></a><!-- doxytag: member="cruntime::ASN1MAX" ref="ga0d7d0e6b693cabe3d30b867f24c30e7b" args="(a, b)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1MAX</b>(a, b)&nbsp;&nbsp;&nbsp;(((a)&gt;(b))?(a):(b))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaaa4ce50c7895900e1585d6ce85f363e3"></a><!-- doxytag: member="cruntime::ASN1MIN" ref="gaaa4ce50c7895900e1585d6ce85f363e3" args="(a, b)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1MIN</b>(a, b)&nbsp;&nbsp;&nbsp;(((a)&lt;(b))?(a):(b))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae643ca3b985bc2317bb3d31b72ec834f"></a><!-- doxytag: member="cruntime::ASN1BUFCUR" ref="gae643ca3b985bc2317bb3d31b72ec834f" args="(cp)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1BUFCUR</b>(cp)&nbsp;&nbsp;&nbsp;(cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae5a3862f56e1b145e90709a70c5daf6c"></a><!-- doxytag: member="cruntime::ASN1BUFPTR" ref="gae5a3862f56e1b145e90709a70c5daf6c" args="(cp)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1BUFPTR</b>(cp)&nbsp;&nbsp;&nbsp;&amp;(cp)-&gt;buffer.data[(cp)-&gt;buffer.byteIndex]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8b91480d342464d5701a165d03f482b6"></a><!-- doxytag: member="cruntime::ASN1CRTMALLOC0" ref="ga8b91480d342464d5701a165d03f482b6" args="(nbytes)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CRTMALLOC0</b>(nbytes)&nbsp;&nbsp;&nbsp;malloc(nbytes)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2193dfa169c08045a42fa6d0ccf5995b"></a><!-- doxytag: member="cruntime::ASN1CRTFREE0" ref="ga2193dfa169c08045a42fa6d0ccf5995b" args="(ptr)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CRTFREE0</b>(ptr)&nbsp;&nbsp;&nbsp;free(ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaed1d7a4b380089a96de8658cb8174183"></a><!-- doxytag: member="cruntime::ASN1CRTMALLOC" ref="gaed1d7a4b380089a96de8658cb8174183" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CRTMALLOC</b>&nbsp;&nbsp;&nbsp;memHeapAlloc</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae42d2fd8f0daa8d195459a4b1721e83a"></a><!-- doxytag: member="cruntime::ASN1CRTFREE" ref="gae42d2fd8f0daa8d195459a4b1721e83a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CRTFREE</b>&nbsp;&nbsp;&nbsp;ASN1MEMFREEPTR</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga57123b2c4444c42d57742e8f11d55044"></a><!-- doxytag: member="cruntime::encodeIA5String" ref="ga57123b2c4444c42d57742e8f11d55044" args="(pctxt, value, permCharSet)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeIA5String</b>(pctxt, value, permCharSet)&nbsp;&nbsp;&nbsp;encodeConstrainedStringEx (pctxt, value, permCharSet, 8, 7, 7)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae93186d07b0d6a9d35df46a2af381c69"></a><!-- doxytag: member="cruntime::encodeGeneralizedTime" ref="gae93186d07b0d6a9d35df46a2af381c69" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeGeneralizedTime</b>&nbsp;&nbsp;&nbsp;encodeIA5String</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad848a36573183be937e4833a7f9d3f34"></a><!-- doxytag: member="cruntime::decodeIA5String" ref="gad848a36573183be937e4833a7f9d3f34" args="(pctxt, pvalue, permCharSet)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>decodeIA5String</b>(pctxt, pvalue, permCharSet)&nbsp;&nbsp;&nbsp;decodeConstrainedStringEx (pctxt, pvalue, permCharSet, 8, 7, 7)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6555a709aa0e3e3f86bfc9735492194a"></a><!-- doxytag: member="cruntime::decodeGeneralizedTime" ref="ga6555a709aa0e3e3f86bfc9735492194a" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>decodeGeneralizedTime</b>&nbsp;&nbsp;&nbsp;decodeIA5String</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga394cd27b9b36aea4b59f2a7ca012db06"></a><!-- doxytag: member="cruntime::RT_MH_DONTKEEPFREE" ref="ga394cd27b9b36aea4b59f2a7ca012db06" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga394cd27b9b36aea4b59f2a7ca012db06">RT_MH_DONTKEEPFREE</a>&nbsp;&nbsp;&nbsp;0x1</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">errfp <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga81c851cd96500e8f5183cfb0f29cf893"></a><!-- doxytag: member="cruntime::OSRTMH_PROPID_DEFBLKSIZE" ref="ga81c851cd96500e8f5183cfb0f29cf893" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OSRTMH_PROPID_DEFBLKSIZE</b>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga371840240bf5a0df451c341945c93ba8"></a><!-- doxytag: member="cruntime::OSRTMH_PROPID_SETFLAGS" ref="ga371840240bf5a0df451c341945c93ba8" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OSRTMH_PROPID_SETFLAGS</b>&nbsp;&nbsp;&nbsp;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf7e58cbe0b7372c2684c0ed2eae169bb"></a><!-- doxytag: member="cruntime::OSRTMH_PROPID_CLEARFLAGS" ref="gaf7e58cbe0b7372c2684c0ed2eae169bb" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OSRTMH_PROPID_CLEARFLAGS</b>&nbsp;&nbsp;&nbsp;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga707cf0684f2b18c391ada009e8d54f70"></a><!-- doxytag: member="cruntime::OSRTMH_PROPID_USER" ref="ga707cf0684f2b18c391ada009e8d54f70" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OSRTMH_PROPID_USER</b>&nbsp;&nbsp;&nbsp;10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga4c82745e7790296963079463cc907d0e">INCRBITIDX</a>(pctxt)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">rtmem  <a href="#ga4c82745e7790296963079463cc907d0e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>DECODEBIT</b>(pctxt, pvalue)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga46e661de8f34aa466f301c259e917e12">decodeUnconsInteger</a>(pctxt, pvalue)&nbsp;&nbsp;&nbsp;decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unconstrained integer.  <a href="#ga46e661de8f34aa466f301c259e917e12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga14e5d02a55fb5aafa710db7696c12d04">decodeUnconsUnsigned</a>(pctxt, pvalue)&nbsp;&nbsp;&nbsp;decodeSemiConsUnsigned(pctxt, pvalue, 0U)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unconstrained unsigned integer.  <a href="#ga14e5d02a55fb5aafa710db7696c12d04"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gaccc161bfb69d131752e0b86a6c63d0df">encodeUnconsInteger</a>(pctxt, value)&nbsp;&nbsp;&nbsp;encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an unconstrained integer.  <a href="#gaccc161bfb69d131752e0b86a6c63d0df"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga003befa8fed2de054497150f504cb842"></a><!-- doxytag: member="cruntime::OOUINT32_MAX" ref="ga003befa8fed2de054497150f504cb842" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOUINT32_MAX</b>&nbsp;&nbsp;&nbsp;4294967295U</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa3177caf5248d36f2296ed9fcca99d44"></a><!-- doxytag: member="cruntime::OOINT32_MAX" ref="gaa3177caf5248d36f2296ed9fcca99d44" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOINT32_MAX</b>&nbsp;&nbsp;&nbsp;((OOINT32)2147483647L)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab5071ab944725148f569dedd2e1a7455"></a><!-- doxytag: member="cruntime::OOINT32_MIN" ref="gab5071ab944725148f569dedd2e1a7455" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOINT32_MIN</b>&nbsp;&nbsp;&nbsp;((OOINT32)(-OOINT32_MAX-1))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa8cecfc5c5c054d2875c03e77b7be15d"></a><!-- doxytag: member="cruntime::TRUE" ref="gaa8cecfc5c5c054d2875c03e77b7be15d" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>TRUE</b>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9885a598039aeeb60495faa5e629a96f"></a><!-- doxytag: member="cruntime::OOERRINVPARAM" ref="ga9885a598039aeeb60495faa5e629a96f" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOERRINVPARAM</b>&nbsp;&nbsp;&nbsp;(-50)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0653dd23d83c38bc1ea9aed3aff9416b"></a><!-- doxytag: member="cruntime::OOERRBUFOVFLW" ref="ga0653dd23d83c38bc1ea9aed3aff9416b" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOERRBUFOVFLW</b>&nbsp;&nbsp;&nbsp;(-51)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2d358b3e13f622972866903f6b49e331"></a><!-- doxytag: member="cruntime::OOERRNOMEM" ref="ga2d358b3e13f622972866903f6b49e331" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOERRNOMEM</b>&nbsp;&nbsp;&nbsp;(-52)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae5bd40f609f08efb2aee5f722e6dc580"></a><!-- doxytag: member="cruntime::OOMEMALLOC" ref="gae5bd40f609f08efb2aee5f722e6dc580" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOMEMALLOC</b>&nbsp;&nbsp;&nbsp;malloc</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab395392a7593d326ddc701eb483f911d"></a><!-- doxytag: member="cruntime::OOMEMFREE" ref="gab395392a7593d326ddc701eb483f911d" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOMEMFREE</b>&nbsp;&nbsp;&nbsp;free</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac07b712b148c86127e34e892ea7756e7"></a><!-- doxytag: member="cruntime::OOMAX" ref="gac07b712b148c86127e34e892ea7756e7" args="(a, b)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOMAX</b>(a, b)&nbsp;&nbsp;&nbsp;(((a)&gt;(b))?(a):(b))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga648888e341dba6a0096fde00c0d251ad"></a><!-- doxytag: member="cruntime::OOMIN" ref="ga648888e341dba6a0096fde00c0d251ad" args="(a, b)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOMIN</b>(a, b)&nbsp;&nbsp;&nbsp;(((a)&lt;(b))?(a):(b))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf015149751ae631fc6a12e2be6db87c9"></a><!-- doxytag: member="cruntime::OONUMBEROF" ref="gaf015149751ae631fc6a12e2be6db87c9" args="(items)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>OONUMBEROF</b>(items)&nbsp;&nbsp;&nbsp;(sizeof(items)/sizeof(items[0]))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga77366c1bd428629dc898e188bfd182a3"></a><!-- doxytag: member="cruntime::EXTERN" ref="ga77366c1bd428629dc898e188bfd182a3" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>EXTERN</b></td></tr>
<tr><td colspan="2"><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9fbeda2dfca3a369ac5094c48549b99d"></a><!-- doxytag: member="cruntime::ASN1CHAR" ref="ga9fbeda2dfca3a369ac5094c48549b99d" args="" -->
typedef char&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1CHAR</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad45df98231e0a493f3ff759d6d435e5c"></a><!-- doxytag: member="cruntime::ASN1OCTET" ref="gad45df98231e0a493f3ff759d6d435e5c" args="" -->
typedef unsigned char&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1OCTET</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad5942cacdd859b0c59ec779e6e4dc466"></a><!-- doxytag: member="cruntime::ASN1BOOL" ref="gad5942cacdd859b0c59ec779e6e4dc466" args="" -->
typedef ASN1OCTET&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1BOOL</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga389996b8614fec7592a0f320cd2cef4f"></a><!-- doxytag: member="cruntime::ASN1INT8" ref="ga389996b8614fec7592a0f320cd2cef4f" args="" -->
typedef signed char&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INT8</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae57247f09d2f23ffc993b72ce3513309"></a><!-- doxytag: member="cruntime::ASN1UINT8" ref="gae57247f09d2f23ffc993b72ce3513309" args="" -->
typedef unsigned char&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UINT8</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac63d5c22a9cf99cb8e6fc62432dcb9a2"></a><!-- doxytag: member="cruntime::ASN1INT" ref="gac63d5c22a9cf99cb8e6fc62432dcb9a2" args="" -->
typedef int&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1INT</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4f87fdfc7cb076157d6efd758b056c4f"></a><!-- doxytag: member="cruntime::ASN1UINT" ref="ga4f87fdfc7cb076157d6efd758b056c4f" args="" -->
typedef unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UINT</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaabbb6e8e1d306728b62be6d5d45adb56"></a><!-- doxytag: member="cruntime::ASN1ENUM" ref="gaabbb6e8e1d306728b62be6d5d45adb56" args="" -->
typedef ASN1INT&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1ENUM</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae78293694618f9c03ed2af1b7bb8db58"></a><!-- doxytag: member="cruntime::ASN1REAL" ref="gae78293694618f9c03ed2af1b7bb8db58" args="" -->
typedef double&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1REAL</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac498cbabb6f34fdb447d5e02c5c7ab82"></a><!-- doxytag: member="cruntime::ASN1SINT" ref="gac498cbabb6f34fdb447d5e02c5c7ab82" args="" -->
typedef short&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1SINT</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga750fa6ea4197d481d6ce00cf805c1506"></a><!-- doxytag: member="cruntime::ASN1USINT" ref="ga750fa6ea4197d481d6ce00cf805c1506" args="" -->
typedef unsigned short&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1USINT</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2d8e0f5b43e8dcc7f1e37a649bb7e750"></a><!-- doxytag: member="cruntime::ASN1TAG" ref="ga2d8e0f5b43e8dcc7f1e37a649bb7e750" args="" -->
typedef ASN1UINT&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1TAG</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga96058589ddceeb38ad9166000b378618"></a><!-- doxytag: member="cruntime::ASN116BITCHAR" ref="ga96058589ddceeb38ad9166000b378618" args="" -->
typedef ASN1USINT&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN116BITCHAR</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga082754093d58eede858e2b740fcafeb4"></a><!-- doxytag: member="cruntime::ASN132BITCHAR" ref="ga082754093d58eede858e2b740fcafeb4" args="" -->
typedef ASN1UINT&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN132BITCHAR</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga15f448ea82e15e458f2ef12ce10f2703"></a><!-- doxytag: member="cruntime::ASN1ANY" ref="ga15f448ea82e15e458f2ef12ce10f2703" args="" -->
typedef void *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1ANY</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafaad28b94266cc355fc627e0448c644e"></a><!-- doxytag: member="cruntime::ASN1GeneralizedTime" ref="gafaad28b94266cc355fc627e0448c644e" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1GeneralizedTime</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga898b877913be77011db39f853c395ed1"></a><!-- doxytag: member="cruntime::ASN1GeneralString" ref="ga898b877913be77011db39f853c395ed1" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1GeneralString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad10b5801f84da9a1cdca72359fc749c8"></a><!-- doxytag: member="cruntime::ASN1GraphicString" ref="gad10b5801f84da9a1cdca72359fc749c8" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1GraphicString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9e633848443f4552a951f76ae354a4ff"></a><!-- doxytag: member="cruntime::ASN1IA5String" ref="ga9e633848443f4552a951f76ae354a4ff" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1IA5String</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6767d332082ac8f91ff412d5835a4e5e"></a><!-- doxytag: member="cruntime::ASN1ISO646String" ref="ga6767d332082ac8f91ff412d5835a4e5e" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1ISO646String</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga5772d90f4c582116bc237432f11a2084"></a><!-- doxytag: member="cruntime::ASN1NumericString" ref="ga5772d90f4c582116bc237432f11a2084" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1NumericString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab3f2afa81c98faf419c1ecf2ba398490"></a><!-- doxytag: member="cruntime::ASN1ObjectDescriptor" ref="gab3f2afa81c98faf419c1ecf2ba398490" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1ObjectDescriptor</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga05c29dcd734e545f830dda9b4940ff88"></a><!-- doxytag: member="cruntime::ASN1PrintableString" ref="ga05c29dcd734e545f830dda9b4940ff88" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1PrintableString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae1f8bba2681a949ecaca260bad5cb00d"></a><!-- doxytag: member="cruntime::ASN1TeletexString" ref="gae1f8bba2681a949ecaca260bad5cb00d" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1TeletexString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4d0c8c719f6cbbbd43522876df88e033"></a><!-- doxytag: member="cruntime::ASN1T61String" ref="ga4d0c8c719f6cbbbd43522876df88e033" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1T61String</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gab3d5039c51cb5d0efca58dd265a2fe63"></a><!-- doxytag: member="cruntime::ASN1UTCTime" ref="gab3d5039c51cb5d0efca58dd265a2fe63" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UTCTime</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga00c083e8e3be98d57eb3f0c4a3bc70d5"></a><!-- doxytag: member="cruntime::ASN1UTF8String" ref="ga00c083e8e3be98d57eb3f0c4a3bc70d5" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UTF8String</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8a2456fffdd5cec436e10f2c2d069ac3"></a><!-- doxytag: member="cruntime::ASN1VideotexString" ref="ga8a2456fffdd5cec436e10f2c2d069ac3" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1VideotexString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaad630958c8fc6030292d9204631a23bb"></a><!-- doxytag: member="cruntime::ASN1VisibleString" ref="gaad630958c8fc6030292d9204631a23bb" args="" -->
typedef const char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1VisibleString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga41a9c9f2e643c540aa4df8fbc0654d3c"></a><!-- doxytag: member="cruntime::ASN1BMPString" ref="ga41a9c9f2e643c540aa4df8fbc0654d3c" args="" -->
typedef <a class="el" href="structAsn116BitCharString.shtml">Asn116BitCharString</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1BMPString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8a9be3bb6c2761e251dc62e53e7f5b78"></a><!-- doxytag: member="cruntime::ASN1UniversalString" ref="ga8a9be3bb6c2761e251dc62e53e7f5b78" args="" -->
typedef <a class="el" href="structAsn132BitCharString.shtml">Asn132BitCharString</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>ASN1UniversalString</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga81373b9aa0c63bb48aa6939024face85"></a><!-- doxytag: member="cruntime::Asn1SizeCnst" ref="ga81373b9aa0c63bb48aa6939024face85" args="" -->
typedef struct <a class="el" href="struct__Asn1SizeCnst.shtml">_Asn1SizeCnst</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>Asn1SizeCnst</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf7c2431b20655832b61b414e0e03ae93"></a><!-- doxytag: member="cruntime::OOCTXT" ref="gaf7c2431b20655832b61b414e0e03ae93" args="" -->
typedef struct <a class="el" href="structOOCTXT.shtml">OOCTXT</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOCTXT</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga94a7f72e8e507a79786b349694b1818c"></a><!-- doxytag: member="cruntime::OOCHAR" ref="ga94a7f72e8e507a79786b349694b1818c" args="" -->
typedef char&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOCHAR</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0ff9bb296c6e6667c9e03d9cc7d37a1a"></a><!-- doxytag: member="cruntime::OOUCHAR" ref="ga0ff9bb296c6e6667c9e03d9cc7d37a1a" args="" -->
typedef unsigned char&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOUCHAR</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac266ed8491cad2b098c1695ec2adbf05"></a><!-- doxytag: member="cruntime::OOINT8" ref="gac266ed8491cad2b098c1695ec2adbf05" args="" -->
typedef signed char&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOINT8</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1fa62c076f49506499ea013ca5540741"></a><!-- doxytag: member="cruntime::OOUINT8" ref="ga1fa62c076f49506499ea013ca5540741" args="" -->
typedef unsigned char&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOUINT8</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4876ca9150df98eebe47d0df43b44314"></a><!-- doxytag: member="cruntime::OOINT16" ref="ga4876ca9150df98eebe47d0df43b44314" args="" -->
typedef short&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOINT16</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf1df4cbc0e2cacdd95314be23ef045b4"></a><!-- doxytag: member="cruntime::OOUINT16" ref="gaf1df4cbc0e2cacdd95314be23ef045b4" args="" -->
typedef unsigned short&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOUINT16</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafcc7a472939cadc22f67d470a071774e"></a><!-- doxytag: member="cruntime::OOINT32" ref="gafcc7a472939cadc22f67d470a071774e" args="" -->
typedef int&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOINT32</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga929d152869a7fc3a63ebf2495c0fa7b7"></a><!-- doxytag: member="cruntime::OOUINT32" ref="ga929d152869a7fc3a63ebf2495c0fa7b7" args="" -->
typedef unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOUINT32</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad31556a43467443733eebb2e2b802c30"></a><!-- doxytag: member="cruntime::OOBOOL" ref="gad31556a43467443733eebb2e2b802c30" args="" -->
typedef OOUINT8&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOBOOL</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacfb9cd337de53cfb69709b7e3e921ef0"></a><!-- doxytag: member="cruntime::OOMsgBuf" ref="gacfb9cd337de53cfb69709b7e3e921ef0" args="" -->
typedef struct <a class="el" href="struct__OOMsgBuf.shtml">_OOMsgBuf</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOMsgBuf</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3d604321e450318d73df2e5d6f0ac785"></a><!-- doxytag: member="cruntime::OOEnumItem" ref="ga3d604321e450318d73df2e5d6f0ac785" args="" -->
typedef struct <a class="el" href="structOOEnumItem.shtml">OOEnumItem</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>OOEnumItem</b></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga96344a73875215922d907c14dfb6123c">decodeBits</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *pvalue, ASN1UINT nbits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a series of multiple bits and place the results in an unsigned integer variable.  <a href="#ga96344a73875215922d907c14dfb6123c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga5c8073e904884a4374ae807772373097">decodeBitString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *numbits_p, ASN1OCTET *buffer, ASN1UINT bufsiz)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 bit string type whose maximum size is is known in advance.  <a href="#ga5c8073e904884a4374ae807772373097"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf36ce5c09c4c962e61e8d4e7a5d80b61"></a><!-- doxytag: member="cruntime::decodeBitString32" ref="gaf36ce5c09c4c962e61e8d4e7a5d80b61" args="(OOCTXT *pctxt, ASN1BitStr32 *pvalue, ASN1UINT lower, ASN1UINT upper)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>decodeBitString32</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1BitStr32.shtml">ASN1BitStr32</a> *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga95aa259fd96d9d454481c1d0006e4b3f">decodeBMPString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structAsn116BitCharString.shtml">ASN1BMPString</a> *pvalue, <a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *permCharSet)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a variable of the ASN.1 BMP character string.  <a href="#ga95aa259fd96d9d454481c1d0006e4b3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gafe39161ece6a81f89663aa4a64593b91">decodeByteAlign</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will position the decode bit cursor on the next byte boundary.  <a href="#gafe39161ece6a81f89663aa4a64593b91"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga53bbfd9e90f95b7773639d702beb1584">decodeConsInteger</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1INT *pvalue, ASN1INT lower, ASN1INT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an integer constrained either by a value or value range constraint.  <a href="#ga53bbfd9e90f95b7773639d702beb1584"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gabcb98e470a1b6b935afca7787618f43c">decodeConsUnsigned</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an unsigned integer constrained either by a value or value range constraint.  <a href="#gabcb98e470a1b6b935afca7787618f43c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga157cf855b45ee8f95f6cb2903a7f65ef">decodeConsUInt8</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT8 *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an 8-bit unsigned integer constrained either by a value or value range constraint.  <a href="#ga157cf855b45ee8f95f6cb2903a7f65ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga8f571ca02f25e368337b57755325fbe8">decodeConsUInt16</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1USINT *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a 16-bit unsigned integer constrained either by a value or value range constraint.  <a href="#ga8f571ca02f25e368337b57755325fbe8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga6b7915e5a39c410458ee6983db58e226">decodeConsWholeNumber</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *padjusted_value, ASN1UINT range_value)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a constrained whole number as specified in Section 10.5 of the X.691 standard.  <a href="#ga6b7915e5a39c410458ee6983db58e226"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga24a77df32b4a3c79798e5edbbcfbc471">decodeConstrainedStringEx</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const char **string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a constrained string value.  <a href="#ga24a77df32b4a3c79798e5edbbcfbc471"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga8701667e5acbc0cae806118f3f3886ab">decodeDynBitString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1DynBitStr.shtml">ASN1DynBitStr</a> *pBitStr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a variable of thr ASN.1 BIT STRING type.  <a href="#ga8701667e5acbc0cae806118f3f3886ab"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga4f4c01acad7de1bf9950f0aa4b2003db">decodeDynOctetString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a> *pOctStr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 octet string type whose maximum size is known in advance.  <a href="#ga4f4c01acad7de1bf9950f0aa4b2003db"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gacfa2234f3a27fcc25a4ca19e343e1a08">decodeLength</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *pvalue)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a length determinant value.  <a href="#gacfa2234f3a27fcc25a4ca19e343e1a08"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga4f010511dc52c533894b6081991d0bf6">moveBitCursor</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, int bitOffset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gab3db59dd302108c23fcf342a04f69d57">decodeObjectIdentifier</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> *pvalue)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function decodes a value of the ASN.1 object identifier type.  <a href="#gab3db59dd302108c23fcf342a04f69d57"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gace4d7906e2376749a60a716310b7720c">decodeOctetString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *numocts_p, ASN1OCTET *buffer, ASN1UINT bufsiz)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a value of the ASN.1 octet string type whose maximun size is known in advance.  <a href="#gace4d7906e2376749a60a716310b7720c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gac99217fa95605befb143c2a17782833c">decodeOpenType</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const ASN1OCTET **object_p2, ASN1UINT *numocts_p)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode an ASN.1 open type.  <a href="#gac99217fa95605befb143c2a17782833c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga7345e1cfabb92c8b05637dd1bc59f7a0">decodeSmallNonNegWholeNumber</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *pvalue)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a small non-negative whole number as specified in Section 10.6 of the X.691 standard.  <a href="#ga7345e1cfabb92c8b05637dd1bc59f7a0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga42476aecdc40c1fa8e5b47b63e78998f">decodeSemiConsInteger</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1INT *pvalue, ASN1INT lower)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a semi-constrained integer.  <a href="#ga42476aecdc40c1fa8e5b47b63e78998f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga77bcc518e627a4b3ddbe22c40ae8c441">decodeSemiConsUnsigned</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT *pvalue, ASN1UINT lower)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will decode a semi-constrained unsigned integer.  <a href="#ga77bcc518e627a4b3ddbe22c40ae8c441"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7035bc72a3356a3c9b0efe35aa8f114a"></a><!-- doxytag: member="cruntime::decodeVarWidthCharString" ref="ga7035bc72a3356a3c9b0efe35aa8f114a" args="(OOCTXT *pctxt, const char **pvalue)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>decodeVarWidthCharString</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const char **pvalue)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga4b25e6b6f517194c1cdb54a8fbe7aa7f">encodeBit</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1BOOL value)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a variable of the ASN.1 BOOLEAN type in a single bit.  <a href="#ga4b25e6b6f517194c1cdb54a8fbe7aa7f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga47ded4f662599e78065af73529ac5e5a">encodeBits</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value, ASN1UINT nbits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes multiple bits.  <a href="#ga47ded4f662599e78065af73529ac5e5a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga45212560fe43a1a4dd1ce1102a2caf9e">encodeBitString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a value of the ASN.1 bit string type.  <a href="#ga45212560fe43a1a4dd1ce1102a2caf9e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga87c409dd4fc1fbdfb1d9cd7bd4dcdcae"></a><!-- doxytag: member="cruntime::encodeBitString32" ref="ga87c409dd4fc1fbdfb1d9cd7bd4dcdcae" args="(OOCTXT *pctxt, ASN1BitStr32 *pvalue, ASN1UINT lower, ASN1UINT upper)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeBitString32</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1BitStr32.shtml">ASN1BitStr32</a> *pvalue, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gac9f7dcd11523dd6aa51854de62faa9b5">encodeBMPString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structAsn116BitCharString.shtml">ASN1BMPString</a> value, <a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *permCharSet)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a variable of the ASN.1 BMP character string.  <a href="#gac9f7dcd11523dd6aa51854de62faa9b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga9dc77383f3d1734a24842811ce956b31">encodeByteAlign</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will position the encode bit cursor on the next byte boundry.  <a href="#ga9dc77383f3d1734a24842811ce956b31"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga926b4efb8fb897f7e9b785387504c105">encodeCheckBuffer</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT nbytes)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will determine if the given number of bytes will fit in the encode buffer.  <a href="#ga926b4efb8fb897f7e9b785387504c105"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga7d15fb6e118e6f5d7831cd6a88e14b01">encodeConstrainedStringEx</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const char *string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a constrained string value.  <a href="#ga7d15fb6e118e6f5d7831cd6a88e14b01"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga87c543e34141694d1fbbd41261faadcc">encodeConsInteger</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1INT value, ASN1INT lower, ASN1INT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an integer constrained either by a value or value range constraint.  <a href="#ga87c543e34141694d1fbbd41261faadcc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga5cfcf8a51f04a62b7f312b1aa994e98e">encodeConsUnsigned</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value, ASN1UINT lower, ASN1UINT upper)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an unsigned integer constrained either by a value or value range constraint.  <a href="#ga5cfcf8a51f04a62b7f312b1aa994e98e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga2336b23b4ebc19394e6771d37bd2543d">encodeConsWholeNumber</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT adjusted_value, ASN1UINT range_value)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a constrained whole number as specified in Section 10.5 of the X.691 standard.  <a href="#ga2336b23b4ebc19394e6771d37bd2543d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gad7c55a4387e3e72e353e69a7c5e28c73">encodeExpandBuffer</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT nbytes)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will expand the buffer to hold the given number of bytes.  <a href="#gad7c55a4387e3e72e353e69a7c5e28c73"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN ASN1OCTET *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga331ac5998bb1c064216171ea0b458c24">encodeGetMsgPtr</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, int *pLength)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will return the message pointer and length of an encoded message.  <a href="#ga331ac5998bb1c064216171ea0b458c24"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga78f5ad24f6ba72faa075e7cc084c86ed">encodeLength</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a length determinant value.  <a href="#ga78f5ad24f6ba72faa075e7cc084c86ed"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga8add3bb77e52f7fb9dd9f9d6e201b37f">encodeObjectIdentifier</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> *pvalue)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a value of the ASN.1 object identifier type.  <a href="#ga8add3bb77e52f7fb9dd9f9d6e201b37f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga31f81046d111ad6f2b52aaac44708ce8">encodeBitsFromOctet</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1OCTET value, ASN1UINT nbits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes bits from a given octet to the output buffer.  <a href="#ga31f81046d111ad6f2b52aaac44708ce8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga0a3cd5bc0c968c4579754dc1004138f7">encodeOctets</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const ASN1OCTET *pvalue, ASN1UINT nbits)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This fuction will encode an array of octets.  <a href="#ga0a3cd5bc0c968c4579754dc1004138f7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga0efc31c77ea2b185fb64b59f5e61f8bc">encodeOctetString</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode a value of the ASN.1 octet string type.  <a href="#ga0efc31c77ea2b185fb64b59f5e61f8bc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gaeaadd45fe6caeb749f56e1c346fd665f">encodeOpenType</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT numocts, const ASN1OCTET *data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode an ASN.1 open type.  <a href="#gaeaadd45fe6caeb749f56e1c346fd665f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gab554080826bfa5b1aae14a32047c54e0">encodeOpenTypeExt</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, DList *pElemList)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will encode an ASN.1 open type extension.  <a href="#gab554080826bfa5b1aae14a32047c54e0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaeb9e7da6279a83e45b3cf7d35118b104"></a><!-- doxytag: member="cruntime::encodeOpenTypeExtBits" ref="gaeb9e7da6279a83e45b3cf7d35118b104" args="(OOCTXT *pctxt, DList *pElemList)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeOpenTypeExtBits</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, DList *pElemList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gaea2c4247ab91cfb132256e5158f85b9b">encodeSmallNonNegWholeNumber</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function will endcode a small, non-negative whole number as specified in Section 10.6 of teh X.691 standard.  <a href="#gaea2c4247ab91cfb132256e5158f85b9b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#ga1ac9005afae5f9fd6c2c8ff5bd1ab5b8">encodeSemiConsInteger</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1INT value, ASN1INT lower)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes a semi-constrained integer.  <a href="#ga1ac9005afae5f9fd6c2c8ff5bd1ab5b8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cruntime.shtml#gacb312638694fcba29f27d5fde55546e6">encodeSemiConsUnsigned</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value, ASN1UINT lower)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function encodes an semi-constrained unsigned integer.  <a href="#gacb312638694fcba29f27d5fde55546e6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaeda1bd43a17441c1bb6eb7eab5a28837"></a><!-- doxytag: member="cruntime::encodeUnconsUnsigned" ref="gaeda1bd43a17441c1bb6eb7eab5a28837" args="(OOCTXT *pctxt, ASN1UINT value)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeUnconsUnsigned</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafef2e767ccdd988217daf01c5b7c3178"></a><!-- doxytag: member="cruntime::encodeVarWidthCharString" ref="gafef2e767ccdd988217daf01c5b7c3178" args="(OOCTXT *pctxt, const char *value)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>encodeVarWidthCharString</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, const char *value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga16b4d21a2b022bef49827ce4f877adb9"></a><!-- doxytag: member="cruntime::addSizeConstraint" ref="ga16b4d21a2b022bef49827ce4f877adb9" args="(OOCTXT *pctxt, Asn1SizeCnst *pSize)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>addSizeConstraint</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *pSize)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac69868272e2636ba53879e7f5d448c8e"></a><!-- doxytag: member="cruntime::alignCharStr" ref="gac69868272e2636ba53879e7f5d448c8e" args="(OOCTXT *pctxt, ASN1UINT len, ASN1UINT nbits, Asn1SizeCnst *pSize)" -->
EXTERN ASN1BOOL&nbsp;</td><td class="memItemRight" valign="bottom"><b>alignCharStr</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1UINT len, ASN1UINT nbits, <a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *pSize)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf3c47b3fac0da75f3883e87db921fb07"></a><!-- doxytag: member="cruntime::bitAndOctetStringAlignmentTest" ref="gaf3c47b3fac0da75f3883e87db921fb07" args="(Asn1SizeCnst *pSizeList, ASN1UINT itemCount, ASN1BOOL bitStrFlag, ASN1BOOL *pAlignFlag)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>bitAndOctetStringAlignmentTest</b> (<a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *pSizeList, ASN1UINT itemCount, ASN1BOOL bitStrFlag, ASN1BOOL *pAlignFlag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7f1748398d016b25d5a491ed67bc927e"></a><!-- doxytag: member="cruntime::getPERMsgLen" ref="ga7f1748398d016b25d5a491ed67bc927e" args="(OOCTXT *pctxt)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>getPERMsgLen</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga877223a55e0c918b3b9389abb30c2284"></a><!-- doxytag: member="cruntime::getSizeConstraint" ref="ga877223a55e0c918b3b9389abb30c2284" args="(OOCTXT *pctxt, ASN1BOOL extbit)" -->
EXTERN <a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><b>getSizeConstraint</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, ASN1BOOL extbit)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf1cc2ca5e4356beee2baa1f5ca167a8f"></a><!-- doxytag: member="cruntime::checkSizeConstraint" ref="gaf1cc2ca5e4356beee2baa1f5ca167a8f" args="(OOCTXT *pctxt, int size)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>checkSizeConstraint</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, int size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga322fa181cc15adb488350b5a0096dd07"></a><!-- doxytag: member="cruntime::getUIntBitCount" ref="ga322fa181cc15adb488350b5a0096dd07" args="(ASN1UINT value)" -->
EXTERN ASN1UINT&nbsp;</td><td class="memItemRight" valign="bottom"><b>getUIntBitCount</b> (ASN1UINT value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac1fa7c76014fec047d3cd1f75c9d1107"></a><!-- doxytag: member="cruntime::checkSize" ref="gac1fa7c76014fec047d3cd1f75c9d1107" args="(Asn1SizeCnst *pSizeList, ASN1UINT value, ASN1BOOL *pExtendable)" -->
EXTERN <a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><b>checkSize</b> (<a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *pSizeList, ASN1UINT value, ASN1BOOL *pExtendable)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2e681d3f3503597bf6c58d7390f106f7"></a><!-- doxytag: member="cruntime::init16BitCharSet" ref="ga2e681d3f3503597bf6c58d7390f106f7" args="(Asn116BitCharSet *pCharSet, ASN116BITCHAR first, ASN116BITCHAR last, ASN1UINT abits, ASN1UINT ubits)" -->
EXTERN void&nbsp;</td><td class="memItemRight" valign="bottom"><b>init16BitCharSet</b> (<a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *pCharSet, ASN116BITCHAR first, ASN116BITCHAR last, ASN1UINT abits, ASN1UINT ubits)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4536ede7c1d5c2db5ef1702aa165403a"></a><!-- doxytag: member="cruntime::isExtendableSize" ref="ga4536ede7c1d5c2db5ef1702aa165403a" args="(Asn1SizeCnst *pSizeList)" -->
EXTERN ASN1BOOL&nbsp;</td><td class="memItemRight" valign="bottom"><b>isExtendableSize</b> (<a class="el" href="struct__Asn1SizeCnst.shtml">Asn1SizeCnst</a> *pSizeList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac89768bcfa8e386daf2688027e36942a"></a><!-- doxytag: member="cruntime::set16BitCharSet" ref="gac89768bcfa8e386daf2688027e36942a" args="(OOCTXT *pctxt, Asn116BitCharSet *pCharSet, Asn116BitCharSet *pAlphabet)" -->
EXTERN void&nbsp;</td><td class="memItemRight" valign="bottom"><b>set16BitCharSet</b> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt, <a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *pCharSet, <a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *pAlphabet)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0c64cb72e3f3da07d174cdf2c83faf34"></a><!-- doxytag: member="cruntime::lookupEnum" ref="ga0c64cb72e3f3da07d174cdf2c83faf34" args="(const char *strValue, size_t strValueSize, const OOEnumItem enumTable[], OOUINT16 enumTableSize)" -->
EXTERN OOINT32&nbsp;</td><td class="memItemRight" valign="bottom"><b>lookupEnum</b> (const char *strValue, size_t strValueSize, const <a class="el" href="structOOEnumItem.shtml">OOEnumItem</a> enumTable[], OOUINT16 enumTableSize)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga2ab530f52d72ab4a74e4675a4cc6a2d1"></a><!-- doxytag: member="ooasn1.h::VIS_CANSET" ref="ga2ab530f52d72ab4a74e4675a4cc6a2d1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define VIS_CANSET</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="stringliteral">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]&quot;</span>\
<span class="stringliteral">&quot;^_`abcdefghijklmnopqrstuvwxyz{|}~&quot;</span>
</pre></div>
<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l00156">156</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga50836facbd6ff45b0faad7cb379a4c8d"></a><!-- doxytag: member="ooasn1.h::T61_CANSET" ref="ga50836facbd6ff45b0faad7cb379a4c8d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define T61_CANSET</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="stringliteral">&quot; !\&quot;%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]&quot;</span>\
<span class="stringliteral">&quot;_abcdefghijklmnopqrstuvwxyz&quot;</span>
</pre></div>
<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l00162">162</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga85a80997925873c9df0cf377e8f4493b"></a><!-- doxytag: member="ooasn1.h::IA5_CANSET" ref="ga85a80997925873c9df0cf377e8f4493b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IA5_CANSET</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="stringliteral">&quot;\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017&quot;</span>\
<span class="stringliteral">&quot;\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037&quot;</span>\
<span class="stringliteral">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]&quot;</span>\
<span class="stringliteral">&quot;^_`abcdefghijklmnopqrstuvwxyz{|}~&quot;</span>
</pre></div>
<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l00168">168</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga56fffe4bc0bf8e9f7ef29c8d6bc4d2e4"></a><!-- doxytag: member="ooasn1.h::GEN_CANSET" ref="ga56fffe4bc0bf8e9f7ef29c8d6bc4d2e4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GEN_CANSET</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="stringliteral">&quot;\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017&quot;</span>\
<span class="stringliteral">&quot;\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037&quot;</span>\
<span class="stringliteral">&quot; !\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&quot;</span>\
<span class="stringliteral">&quot;`abcdefghijklmnopqrstuvwxyz{|}~\177\200\201\202\203\204\205\206\207&quot;</span>\
<span class="stringliteral">&quot;\220\221\222\223\224\225\226\227\230\231\232\233\234\235\236\237&quot;</span>\
<span class="stringliteral">&quot;\240\241\242\243\244\245\246\247\250\251\252\253\254\255\256\257&quot;</span>\
<span class="stringliteral">&quot;\260\261\262\263\264\265\266\267\270\271\272\273\274\275\276\277&quot;</span>\
<span class="stringliteral">&quot;\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317&quot;</span>\
<span class="stringliteral">&quot;\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337&quot;</span>\
<span class="stringliteral">&quot;\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357&quot;</span>\
<span class="stringliteral">&quot;\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377&quot;</span>
</pre></div>
<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l00179">179</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga4c82745e7790296963079463cc907d0e"></a><!-- doxytag: member="ooasn1.h::INCRBITIDX" ref="ga4c82745e7790296963079463cc907d0e" args="(pctxt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define INCRBITIDX</td>
          <td>(</td>
          <td class="paramtype">pctxt&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment">((--(pctxt)-&gt;buffer.bitOffset &lt; 0) ? \
((++(pctxt)-&gt;buffer.byteIndex &gt;= (pctxt)-&gt;buffer.size) ? ASN_E_ENDOFBUF : \
((pctxt)-&gt;buffer.bitOffset = 7, ASN_OK)) : ASN_OK)
</pre></div>
<p>rtmem </p>

<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l01019">1019</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga50feeff3e9e4f9cc787a9e12718bdd52"></a><!-- doxytag: member="ooasn1.h::DECODEBIT" ref="ga50feeff3e9e4f9cc787a9e12718bdd52" args="(pctxt, pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DECODEBIT</td>
          <td>(</td>
          <td class="paramtype">pctxt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pvalue&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment">((<a class="code" href="group__cruntime.shtml#ga4c82745e7790296963079463cc907d0e" title="rtmem">INCRBITIDX</a> (pctxt) != ASN_OK) ? ((*(pvalue) = 0), ASN_E_ENDOFBUF) : \
((*(pvalue) = (((pctxt)-&gt;buffer.data[(pctxt)-&gt;buffer.byteIndex]) &amp; \
(1 &lt;&lt; (pctxt)-&gt;buffer.bitOffset)) != 0), ASN_OK))
</pre></div>
<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l01024">1024</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga46e661de8f34aa466f301c259e917e12"></a><!-- doxytag: member="ooasn1.h::decodeUnconsInteger" ref="ga46e661de8f34aa466f301c259e917e12" args="(pctxt, pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define decodeUnconsInteger</td>
          <td>(</td>
          <td class="paramtype">pctxt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pvalue&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;decodeSemiConsInteger(pctxt, pvalue, ASN1INT_MIN)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an unconstrained integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l01412">1412</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga14e5d02a55fb5aafa710db7696c12d04"></a><!-- doxytag: member="ooasn1.h::decodeUnconsUnsigned" ref="ga14e5d02a55fb5aafa710db7696c12d04" args="(pctxt, pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define decodeUnconsUnsigned</td>
          <td>(</td>
          <td class="paramtype">pctxt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pvalue&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;decodeSemiConsUnsigned(pctxt, pvalue, 0U)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an unconstrained unsigned integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l01425">1425</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaccc161bfb69d131752e0b86a6c63d0df"></a><!-- doxytag: member="ooasn1.h::encodeUnconsInteger" ref="gaccc161bfb69d131752e0b86a6c63d0df" args="(pctxt, value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define encodeUnconsInteger</td>
          <td>(</td>
          <td class="paramtype">pctxt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">value&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;encodeSemiConsInteger(pctxt,value,ASN1INT_MIN)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes an unconstrained integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

<p>Definition at line <a class="el" href="ooasn1_8h_source.shtml#l01802">1802</a> of file <a class="el" href="ooasn1_8h_source.shtml">ooasn1.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga96344a73875215922d907c14dfb6123c"></a><!-- doxytag: member="ooasn1.h::decodeBits" ref="ga96344a73875215922d907c14dfb6123c" args="(OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeBits </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a series of multiple bits and place the results in an unsigned integer variable. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>A pointer to an unsigned integer variable to receive the decoded result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbits</em>&nbsp;</td><td>The number of bits to decode. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga5c8073e904884a4374ae807772373097"></a><!-- doxytag: member="ooasn1.h::decodeBitString" ref="ga5c8073e904884a4374ae807772373097" args="(OOCTXT *pctxt, ASN1UINT *numbits_p, ASN1OCTET *buffer, ASN1UINT bufsiz)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeBitString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>numbits_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>bufsiz</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a value of the ASN.1 bit string type whose maximum size is is known in advance. </p>
<p>The ASN1C complier generates a call to this function to decode bit string productions or elements that contain a size constraint.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numbits_p</em>&nbsp;</td><td>Pointer to an unsigned integer variable to receive decoded number of bits. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buffer</em>&nbsp;</td><td>Pointer to a fixed-size or pre-allocated array of bufsiz octets to receive a decoded bit string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bufsiz</em>&nbsp;</td><td>Length (in octets) of the buffer to receive the decoded bit string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga95aa259fd96d9d454481c1d0006e4b3f"></a><!-- doxytag: member="ooasn1.h::decodeBMPString" ref="ga95aa259fd96d9d454481c1d0006e4b3f" args="(OOCTXT *pctxt, ASN1BMPString *pvalue, Asn116BitCharSet *permCharSet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeBMPString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structAsn116BitCharString.shtml">ASN1BMPString</a> *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *&nbsp;</td>
          <td class="paramname"> <em>permCharSet</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a variable of the ASN.1 BMP character string. </p>
<p>This differs from the decode routines for the character strings previously described in that the BMP string type is based on 16-bit characters. A 16-bit character string is modeled using an array of unsigned short integers.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to character string structure to receive the decoded result The structure includes a count field containing the number of characters and an array of unsigned short integers to hold the 16-bit character values. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>permCharSet</em>&nbsp;</td><td>A pointer to the constraining character set. This contains an array containing all valid characters in the set as well as the aligned and unaligned bit counts required to encode the characters. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gafe39161ece6a81f89663aa4a64593b91"></a><!-- doxytag: member="ooasn1.h::decodeByteAlign" ref="gafe39161ece6a81f89663aa4a64593b91" args="(OOCTXT *pctxt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeByteAlign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will position the decode bit cursor on the next byte boundary. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga53bbfd9e90f95b7773639d702beb1584"></a><!-- doxytag: member="ooasn1.h::decodeConsInteger" ref="ga53bbfd9e90f95b7773639d702beb1584" args="(OOCTXT *pctxt, ASN1INT *pvalue, ASN1INT lower, ASN1INT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConsInteger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an integer constrained either by a value or value range constraint. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gabcb98e470a1b6b935afca7787618f43c"></a><!-- doxytag: member="ooasn1.h::decodeConsUnsigned" ref="gabcb98e470a1b6b935afca7787618f43c" args="(OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT lower, ASN1UINT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConsUnsigned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an unsigned integer constrained either by a value or value range constraint. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga157cf855b45ee8f95f6cb2903a7f65ef"></a><!-- doxytag: member="ooasn1.h::decodeConsUInt8" ref="ga157cf855b45ee8f95f6cb2903a7f65ef" args="(OOCTXT *pctxt, ASN1UINT8 *pvalue, ASN1UINT lower, ASN1UINT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConsUInt8 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT8 *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an 8-bit unsigned integer constrained either by a value or value range constraint. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to 8-bit unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga8f571ca02f25e368337b57755325fbe8"></a><!-- doxytag: member="ooasn1.h::decodeConsUInt16" ref="ga8f571ca02f25e368337b57755325fbe8" args="(OOCTXT *pctxt, ASN1USINT *pvalue, ASN1UINT lower, ASN1UINT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConsUInt16 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1USINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a 16-bit unsigned integer constrained either by a value or value range constraint. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to 16-bit unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga6b7915e5a39c410458ee6983db58e226"></a><!-- doxytag: member="ooasn1.h::decodeConsWholeNumber" ref="ga6b7915e5a39c410458ee6983db58e226" args="(OOCTXT *pctxt, ASN1UINT *padjusted_value, ASN1UINT range_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConsWholeNumber </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>padjusted_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>range_value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function decodes a constrained whole number as specified in Section 10.5 of the X.691 standard. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>padjusted_value</em>&nbsp;</td><td>Pointer to unsigned adjusted integer value to receive decoded result. To get the final value, this value is added to the lower boundary of the range. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>range_value</em>&nbsp;</td><td>Unsigned integer value specifying the total size of the range. This is obtained by subtracting the lower range value from the upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga24a77df32b4a3c79798e5edbbcfbc471"></a><!-- doxytag: member="ooasn1.h::decodeConstrainedStringEx" ref="ga24a77df32b4a3c79798e5edbbcfbc471" args="(OOCTXT *pctxt, const char **string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeConstrainedStringEx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&nbsp;</td>
          <td class="paramname"> <em>string</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>charSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>abits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>ubits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>canSetBits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function decodes a constrained string value. </p>
<p>This version of the function allows all of the required permitted alphabet constraint parameters to be passed in as arguments.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>string</em>&nbsp;</td><td>Pointer to const char* to receive decoded string. Memory will be allocated for this variable using internal memory management functions. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>charSet</em>&nbsp;</td><td>String containing permitted alphabet character set. Can be null if no character set was specified. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>abits</em>&nbsp;</td><td>Number of bits in a character set character (aligned). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ubits</em>&nbsp;</td><td>Number of bits in a character set character (unaligned). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>canSetBits</em>&nbsp;</td><td>Number of bits in a character from the canonical set representing this string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga8701667e5acbc0cae806118f3f3886ab"></a><!-- doxytag: member="ooasn1.h::decodeDynBitString" ref="ga8701667e5acbc0cae806118f3f3886ab" args="(OOCTXT *pctxt, ASN1DynBitStr *pBitStr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeDynBitString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structASN1DynBitStr.shtml">ASN1DynBitStr</a> *&nbsp;</td>
          <td class="paramname"> <em>pBitStr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a variable of thr ASN.1 BIT STRING type. </p>
<p>This function allocates dynamic memory t store the decoded result. The ASN1C complier generates a call to this function to decode an unconstrained bit string production or element.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pBitStr</em>&nbsp;</td><td>Pointer to a dynamic bit string structure to receive the decoded result. This structure contains a field to hold the number of decoded bits and a pointer to an octet string to hold the decoded data. Memory is allocated by the decoder using the memAlloc function. This memory is tracked within the context and released when the freeContext function is invoked. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga4f4c01acad7de1bf9950f0aa4b2003db"></a><!-- doxytag: member="ooasn1.h::decodeDynOctetString" ref="ga4f4c01acad7de1bf9950f0aa4b2003db" args="(OOCTXT *pctxt, ASN1DynOctStr *pOctStr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeDynOctetString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structASN1DynOctStr.shtml">ASN1DynOctStr</a> *&nbsp;</td>
          <td class="paramname"> <em>pOctStr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a value of the ASN.1 octet string type whose maximum size is known in advance. </p>
<p>The ASN1C complier generates a call to this function to decode octet string productions or elements that contain a size constraint.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pOctStr</em>&nbsp;</td><td>A pointer to a dynamic octet string to receive the decoded result. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gacfa2234f3a27fcc25a4ca19e343e1a08"></a><!-- doxytag: member="ooasn1.h::decodeLength" ref="gacfa2234f3a27fcc25a4ca19e343e1a08" args="(OOCTXT *pctxt, ASN1UINT *pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeLength </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a length determinant value. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>A pointer to an unsigned integer variable to receive the decoded length value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga4f010511dc52c533894b6081991d0bf6"></a><!-- doxytag: member="ooasn1.h::moveBitCursor" ref="ga4f010511dc52c533894b6081991d0bf6" args="(OOCTXT *pctxt, int bitOffset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int moveBitCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bitOffset</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bitOffset</em>&nbsp;</td><td>The bit offset inside the message buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gab3db59dd302108c23fcf342a04f69d57"></a><!-- doxytag: member="ooasn1.h::decodeObjectIdentifier" ref="gab3db59dd302108c23fcf342a04f69d57" args="(OOCTXT *pctxt, ASN1OBJID *pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeObjectIdentifier </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function decodes a value of the ASN.1 object identifier type. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to value to receive decoded result. The <a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> structure contains an integer to hold the number of subidentifiers and an array to hold the subidentifier values. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gace4d7906e2376749a60a716310b7720c"></a><!-- doxytag: member="ooasn1.h::decodeOctetString" ref="gace4d7906e2376749a60a716310b7720c" args="(OOCTXT *pctxt, ASN1UINT *numocts_p, ASN1OCTET *buffer, ASN1UINT bufsiz)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeOctetString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>numocts_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>bufsiz</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a value of the ASN.1 octet string type whose maximun size is known in advance. </p>
<p>The ASN1C compiler generates a call to this function to decode octet string productions or elements that contain a size constraint.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numocts_p</em>&nbsp;</td><td>A pointer to an unsigned buffer of bufsiz octets to receive decoded data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buffer</em>&nbsp;</td><td>A pointer to a pre-allocated buffer of size octets to receive the decoded data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bufsiz</em>&nbsp;</td><td>The size of the buffer to receive the decoded result. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gac99217fa95605befb143c2a17782833c"></a><!-- doxytag: member="ooasn1.h::decodeOpenType" ref="gac99217fa95605befb143c2a17782833c" args="(OOCTXT *pctxt, const ASN1OCTET **object_p2, ASN1UINT *numocts_p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeOpenType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ASN1OCTET **&nbsp;</td>
          <td class="paramname"> <em>object_p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>numocts_p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode an ASN.1 open type. </p>
<p>This used to be the ASN.1 ANY type, but now is used in a variety of applications requiring an encoding that can be interpreted by a decoder without prior knowledge of the type of the variable.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numocts_p</em>&nbsp;</td><td>A pointer to an unsigned buffer of bufsiz octets to receive decoded data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>object_p2</em>&nbsp;</td><td>A pointer to an open type variable to receive the decoded data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga7345e1cfabb92c8b05637dd1bc59f7a0"></a><!-- doxytag: member="ooasn1.h::decodeSmallNonNegWholeNumber" ref="ga7345e1cfabb92c8b05637dd1bc59f7a0" args="(OOCTXT *pctxt, ASN1UINT *pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeSmallNonNegWholeNumber </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a small non-negative whole number as specified in Section 10.6 of the X.691 standard. </p>
<p>This is a number that is expected to be small, but whose size is potentially unlimited due to the presence of an extension maker.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all workings variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to an unsigned integer value t receive decoded results. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga42476aecdc40c1fa8e5b47b63e78998f"></a><!-- doxytag: member="ooasn1.h::decodeSemiConsInteger" ref="ga42476aecdc40c1fa8e5b47b63e78998f" args="(OOCTXT *pctxt, ASN1INT *pvalue, ASN1INT lower)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeSemiConsInteger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>lower</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a semi-constrained integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value, represented as signed integer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga77bcc518e627a4b3ddbe22c40ae8c441"></a><!-- doxytag: member="ooasn1.h::decodeSemiConsUnsigned" ref="ga77bcc518e627a4b3ddbe22c40ae8c441" args="(OOCTXT *pctxt, ASN1UINT *pvalue, ASN1UINT lower)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int decodeSemiConsUnsigned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will decode a semi-constrained unsigned integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to unsigned integer variable to receive decoded value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value, represented as unsigned integer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga4b25e6b6f517194c1cdb54a8fbe7aa7f"></a><!-- doxytag: member="ooasn1.h::encodeBit" ref="ga4b25e6b6f517194c1cdb54a8fbe7aa7f" args="(OOCTXT *pctxt, ASN1BOOL value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeBit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1BOOL&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode a variable of the ASN.1 BOOLEAN type in a single bit. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The BOOLEAN value to be encoded. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga47ded4f662599e78065af73529ac5e5a"></a><!-- doxytag: member="ooasn1.h::encodeBits" ref="ga47ded4f662599e78065af73529ac5e5a" args="(OOCTXT *pctxt, ASN1UINT value, ASN1UINT nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeBits </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes multiple bits. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Unsigned integer containing the bits to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbits</em>&nbsp;</td><td>Number of bits in value to encode. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga45212560fe43a1a4dd1ce1102a2caf9e"></a><!-- doxytag: member="ooasn1.h::encodeBitString" ref="ga45212560fe43a1a4dd1ce1102a2caf9e" args="(OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeBitString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode a value of the ASN.1 bit string type. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numocts</em>&nbsp;</td><td>The number of bits n the string to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Pointer to the bit string data to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gac9f7dcd11523dd6aa51854de62faa9b5"></a><!-- doxytag: member="ooasn1.h::encodeBMPString" ref="gac9f7dcd11523dd6aa51854de62faa9b5" args="(OOCTXT *pctxt, ASN1BMPString value, Asn116BitCharSet *permCharSet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeBMPString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structAsn116BitCharString.shtml">ASN1BMPString</a>&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structAsn116BitCharSet.shtml">Asn116BitCharSet</a> *&nbsp;</td>
          <td class="paramname"> <em>permCharSet</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode a variable of the ASN.1 BMP character string. </p>
<p>This differs from the encode routines for the character strings previously described in that the BMP string type is based on 16-bit characters. A 16-bit character string is modeled using an array of unsigned short integers.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Character string to be encoded. This structure includes a count field containing the number of characters to encode and an array of unsigned short integers to hold the 16-bit characters to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>permCharSet</em>&nbsp;</td><td>Pointer to the constraining character set. This contains an array containing all valid characters in the set as well as the aligned and unaligned bit counts required to encode the characters. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga9dc77383f3d1734a24842811ce956b31"></a><!-- doxytag: member="ooasn1.h::encodeByteAlign" ref="ga9dc77383f3d1734a24842811ce956b31" args="(OOCTXT *pctxt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeByteAlign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will position the encode bit cursor on the next byte boundry. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga926b4efb8fb897f7e9b785387504c105"></a><!-- doxytag: member="ooasn1.h::encodeCheckBuffer" ref="ga926b4efb8fb897f7e9b785387504c105" args="(OOCTXT *pctxt, ASN1UINT nbytes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeCheckBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbytes</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will determine if the given number of bytes will fit in the encode buffer. </p>
<p>If not, either the buffer is expanded (if it is a dynamic buffer) or an error is signaled.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbytes</em>&nbsp;</td><td>Number of bytes of space required to hold the variable to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga7d15fb6e118e6f5d7831cd6a88e14b01"></a><!-- doxytag: member="ooasn1.h::encodeConstrainedStringEx" ref="ga7d15fb6e118e6f5d7831cd6a88e14b01" args="(OOCTXT *pctxt, const char *string, const char *charSet, ASN1UINT abits, ASN1UINT ubits, ASN1UINT canSetBits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeConstrainedStringEx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>string</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>charSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>abits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>ubits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>canSetBits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes a constrained string value. </p>
<p>This version of the function allows all of the required permitted alphabet constraint parameters to be passed in as arguments.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>string</em>&nbsp;</td><td>Pointer to string to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>charSet</em>&nbsp;</td><td>String containing permitted alphabet character set. Can be null if no character set was specified. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>abits</em>&nbsp;</td><td>Number of bits in a character set character (aligned). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ubits</em>&nbsp;</td><td>Number of bits in a character set character (unaligned). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>canSetBits</em>&nbsp;</td><td>Number of bits in a character from the canonical set representing this string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga87c543e34141694d1fbbd41261faadcc"></a><!-- doxytag: member="ooasn1.h::encodeConsInteger" ref="ga87c543e34141694d1fbbd41261faadcc" args="(OOCTXT *pctxt, ASN1INT value, ASN1INT lower, ASN1INT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeConsInteger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes an integer constrained either by a value or value range constraint. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga5cfcf8a51f04a62b7f312b1aa994e98e"></a><!-- doxytag: member="ooasn1.h::encodeConsUnsigned" ref="ga5cfcf8a51f04a62b7f312b1aa994e98e" args="(OOCTXT *pctxt, ASN1UINT value, ASN1UINT lower, ASN1UINT upper)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeConsUnsigned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>upper</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes an unsigned integer constrained either by a value or value range constraint. </p>
<p>The constrained unsigned integer option is used if:</p>
<p>1. The lower value of the range is &gt;= 0, and 2. The upper value of the range is &gt;= MAXINT</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga2336b23b4ebc19394e6771d37bd2543d"></a><!-- doxytag: member="ooasn1.h::encodeConsWholeNumber" ref="ga2336b23b4ebc19394e6771d37bd2543d" args="(OOCTXT *pctxt, ASN1UINT adjusted_value, ASN1UINT range_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeConsWholeNumber </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>adjusted_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>range_value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes a constrained whole number as specified in Section 10.5 of the X.691 standard. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>adjusted_value</em>&nbsp;</td><td>Unsigned adjusted integer value to be encoded. The adjustment is done by subtracting the lower value of the range from the value to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>range_value</em>&nbsp;</td><td>Unsigned integer value specifying the total size of the range. This is obtained by subtracting the lower range value from the upper range value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gad7c55a4387e3e72e353e69a7c5e28c73"></a><!-- doxytag: member="ooasn1.h::encodeExpandBuffer" ref="gad7c55a4387e3e72e353e69a7c5e28c73" args="(OOCTXT *pctxt, ASN1UINT nbytes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeExpandBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbytes</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will expand the buffer to hold the given number of bytes. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbytes</em>&nbsp;</td><td>The number of bytes the buffer is to be expanded by. Note that the buffer will be expanded by ASN_K_ENCBIFXIZ or nbytes (whichever is larger. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga331ac5998bb1c064216171ea0b458c24"></a><!-- doxytag: member="ooasn1.h::encodeGetMsgPtr" ref="ga331ac5998bb1c064216171ea0b458c24" args="(OOCTXT *pctxt, int *pLength)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN ASN1OCTET* encodeGetMsgPtr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>pLength</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will return the message pointer and length of an encoded message. </p>
<p>This function is called after a complier generated encode function to get the pointer and length of the message. It is normally used when dynamic encoding is specified because the message pointer is not known until encoding is complete. If static encoding is used, the message starts at the beginning of the specified buffer adn the encodeGetMsgLen function can be used to obtain the lenght of the message.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pLength</em>&nbsp;</td><td>Pointer to variable to receive length of the encoded message. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga78f5ad24f6ba72faa075e7cc084c86ed"></a><!-- doxytag: member="ooasn1.h::encodeLength" ref="ga78f5ad24f6ba72faa075e7cc084c86ed" args="(OOCTXT *pctxt, ASN1UINT value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeLength </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode a length determinant value. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to a context structure. This provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Length value to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga8add3bb77e52f7fb9dd9f9d6e201b37f"></a><!-- doxytag: member="ooasn1.h::encodeObjectIdentifier" ref="ga8add3bb77e52f7fb9dd9f9d6e201b37f" args="(OOCTXT *pctxt, ASN1OBJID *pvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeObjectIdentifier </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes a value of the ASN.1 object identifier type. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>Pointer to value to be encoded. The <a class="el" href="structASN1OBJID.shtml">ASN1OBJID</a> structure contains a numids fields to hold the number of subidentifiers and an array to hold the subidentifier values. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga31f81046d111ad6f2b52aaac44708ce8"></a><!-- doxytag: member="ooasn1.h::encodeBitsFromOctet" ref="ga31f81046d111ad6f2b52aaac44708ce8" args="(OOCTXT *pctxt, ASN1OCTET value, ASN1UINT nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeBitsFromOctet </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1OCTET&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes bits from a given octet to the output buffer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to ASN.1 PER context structure </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value of bits to be encoded </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbits</em>&nbsp;</td><td>Number of bits to be encoded</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Status of operation </dd></dl>

</div>
</div>
<a class="anchor" id="ga0a3cd5bc0c968c4579754dc1004138f7"></a><!-- doxytag: member="ooasn1.h::encodeOctets" ref="ga0a3cd5bc0c968c4579754dc1004138f7" args="(OOCTXT *pctxt, const ASN1OCTET *pvalue, ASN1UINT nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeOctets </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>pvalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This fuction will encode an array of octets. </p>
<p>The Octets will be encoded unaligned starting at the current bit offset within the encode buffer.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pvalue</em>&nbsp;</td><td>A pointer to an array of octets to encode </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nbits</em>&nbsp;</td><td>The number of Octets to encode </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga0efc31c77ea2b185fb64b59f5e61f8bc"></a><!-- doxytag: member="ooasn1.h::encodeOctetString" ref="ga0efc31c77ea2b185fb64b59f5e61f8bc" args="(OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeOctetString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode a value of the ASN.1 octet string type. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numocts</em>&nbsp;</td><td>Number of octets in the string to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Pointer to octet string data to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaeaadd45fe6caeb749f56e1c346fd665f"></a><!-- doxytag: member="ooasn1.h::encodeOpenType" ref="gaeaadd45fe6caeb749f56e1c346fd665f" args="(OOCTXT *pctxt, ASN1UINT numocts, const ASN1OCTET *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeOpenType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>numocts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ASN1OCTET *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode an ASN.1 open type. </p>
<p>This used to be the ANY type, but now is used in a variety of applications requiring an encoding that can be interpreted by a decoder without a prior knowledge of the type of the variable.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numocts</em>&nbsp;</td><td>Number of octets in the string to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Pointer to octet string data to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gab554080826bfa5b1aae14a32047c54e0"></a><!-- doxytag: member="ooasn1.h::encodeOpenTypeExt" ref="gab554080826bfa5b1aae14a32047c54e0" args="(OOCTXT *pctxt, DList *pElemList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeOpenTypeExt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DList *&nbsp;</td>
          <td class="paramname"> <em>pElemList</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will encode an ASN.1 open type extension. </p>
<p>An open type extension field is the data that potentially resides after the ... marker in a version-1 message. The open type structure contains a complete encoded bit set including option element bits or choice index, length, and data. Typically, this data is populated when a version-1 system decodes a version-2 message. The extension fields are retained and can then be re-encoded if a new message is to be sent out (for example, in a store and forward system).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pElemList</em>&nbsp;</td><td>A pointer to the open type to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaea2c4247ab91cfb132256e5158f85b9b"></a><!-- doxytag: member="ooasn1.h::encodeSmallNonNegWholeNumber" ref="gaea2c4247ab91cfb132256e5158f85b9b" args="(OOCTXT *pctxt, ASN1UINT value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeSmallNonNegWholeNumber </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function will endcode a small, non-negative whole number as specified in Section 10.6 of teh X.691 standard. </p>
<p>This is a number that is expected to be small, but whose size is potentially unlimited due to the presence of an extension marker.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. The provides a storage area for the function to store all working variables that must be maintained between function calls. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>An unsigned integer value to be encoded. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga1ac9005afae5f9fd6c2c8ff5bd1ab5b8"></a><!-- doxytag: member="ooasn1.h::encodeSemiConsInteger" ref="ga1ac9005afae5f9fd6c2c8ff5bd1ab5b8" args="(OOCTXT *pctxt, ASN1INT value, ASN1INT lower)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeSemiConsInteger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1INT&nbsp;</td>
          <td class="paramname"> <em>lower</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes a semi-constrained integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value, represented as signed integer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gacb312638694fcba29f27d5fde55546e6"></a><!-- doxytag: member="ooasn1.h::encodeSemiConsUnsigned" ref="gacb312638694fcba29f27d5fde55546e6" args="(OOCTXT *pctxt, ASN1UINT value, ASN1UINT lower)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int encodeSemiConsUnsigned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ASN1UINT&nbsp;</td>
          <td class="paramname"> <em>lower</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This function encodes an semi-constrained unsigned integer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>Pointer to context block structure. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Value to be encoded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Lower range value, represented as unsigned integer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Completion status of operation:<ul>
<li>0 (ASN_OK) = success,</li>
<li>negative return value is error. </li>
</ul>
</dd></dl>

</div>
</div>
</div>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
  <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
    10 Dec 2010.<BR> Objective Open H.323 Stack, 0.9.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
