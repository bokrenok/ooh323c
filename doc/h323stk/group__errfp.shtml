<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN" "hmpro6.dtd">
<HTML>
  <HEAD>
    <TITLE>Objective Open H.323 Stack: Error Formatting and Print Functions</TITLE>
    <LINK REL="stylesheet" HREF="stylesheet.css" TYPE="text/css">
  </HEAD>
  <BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
    <CENTER>
      <DIV ID="pageDiv">
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="0" CELLPADDING="0">
          <TR>
            <TD BORDERCOLOR="#D9E4F1"><IMG BORDER="0"
             SRC="./images/Head1.jpg" WIDTH="725" HEIGHT="90"
             ALT="Objective Systems, Inc."></TD>
            <TD WIDTH="100%" BACKGROUND="./images/Head2.jpg">&nbsp;</TD>
          </TR>
        </TABLE>
        <TABLE BORDER="0" WIDTH="760" CELLSPACING="10" CELLPADDING="10">
          <TR><TD>
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="classes.shtml"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
  </ul></div>
<h1>Error Formatting and Print Functions<br>
<small>
[<a class="el" href="group__cruntime.shtml">C Runtime Common Functions</a>]</small>
</h1>Error formatting and print functions allow information about the encode/decode errors to be added to a context block structure and then printed out when the error is propagated to the top level. 
<a href="#_details">More...</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="gb9f317065a0115b05caa5ce451c98301"></a><!-- doxytag: member="errfp::LOG_ASN1ERR" ref="gb9f317065a0115b05caa5ce451c98301" args="(ctxt, stat)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#gb9f317065a0115b05caa5ce451c98301">LOG_ASN1ERR</a>(ctxt, stat)&nbsp;&nbsp;&nbsp;errSetData(&amp;(ctxt)-&gt;errInfo,stat,__FILE__,__LINE__)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="g5a0c5009d4304319e911462b0cf42afe"></a><!-- doxytag: member="errfp::LOG_ASN1ERR_AND_FREE" ref="g5a0c5009d4304319e911462b0cf42afe" args="(pctxt, stat, lctxt)" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g5a0c5009d4304319e911462b0cf42afe">LOG_ASN1ERR_AND_FREE</a>(pctxt, stat, lctxt)&nbsp;&nbsp;&nbsp;freeContext ((lctxt)), LOG_ASN1ERR(pctxt, stat)</td></tr>

<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g0c000ff8a477db667ca7b8495cfbd6cd">errAddIntParm</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo, int errParm)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function adds an integer parameter to an error information structure.  <a href="#g0c000ff8a477db667ca7b8495cfbd6cd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#gd305421fe8880a00717c286b16c7a755">errAddStrParm</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo, const char *errprm_p)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function adds an string parameter to an error information structure.  <a href="#gd305421fe8880a00717c286b16c7a755"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g69d2110465fa515ab99326783a86fd6f">errAddUIntParm</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo, unsigned int errParm)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function adds an unsigned integer parameter to an error information structure.  <a href="#g69d2110465fa515ab99326783a86fd6f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="g714c8e0bceeea19be313e88d2f5e3ac8"></a><!-- doxytag: member="errfp::errCopyData" ref="g714c8e0bceeea19be313e88d2f5e3ac8" args="(ASN1ErrInfo *pSrcErrInfo, ASN1ErrInfo *pDestErrInfo)" -->
EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><b>errCopyData</b> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pSrcErrInfo, <a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pDestErrInfo)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#ga12aa5d6dc904fa3f7868138401e3f77">errFreeParms</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function frees memory associated with the storage of parameters associated with an error message.  <a href="#ga12aa5d6dc904fa3f7868138401e3f77"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="g569b80d5cbcdd0e868de4a2394661e67"></a><!-- doxytag: member="errfp::errFmtMsg" ref="g569b80d5cbcdd0e868de4a2394661e67" args="(ASN1ErrInfo *pErrInfo, char *bufp)" -->
EXTERN char *&nbsp;</td><td class="memItemRight" valign="bottom"><b>errFmtMsg</b> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo, char *bufp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g5aa45a513a753ffb3b78d693d3ffa302">errGetText</a> (<a class="el" href="structOOCTXT.shtml">OOCTXT</a> *pctxt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function gets the text of the error.  <a href="#g5aa45a513a753ffb3b78d693d3ffa302"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g0dca07c145628636d01da14067c0bc9b">errPrint</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function prints error information to the standard output device.  <a href="#g0dca07c145628636d01da14067c0bc9b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#gf4ebc9c5985418c58d621246a7e2447d">errReset</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function resets the error information in the error information sturcture.  <a href="#gf4ebc9c5985418c58d621246a7e2447d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">EXTERN int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__errfp.shtml#g7d5ae7d3d41200b5540b124ee5cafdda">errSetData</a> (<a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *pErrInfo, int status, const char *module, int lno)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function sets error information in an error information structure.  <a href="#g7d5ae7d3d41200b5540b124ee5cafdda"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Error formatting and print functions allow information about the encode/decode errors to be added to a context block structure and then printed out when the error is propagated to the top level.
<p>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="g0c000ff8a477db667ca7b8495cfbd6cd"></a><!-- doxytag: member="ooasn1.h::errAddIntParm" ref="g0c000ff8a477db667ca7b8495cfbd6cd" args="(ASN1ErrInfo *pErrInfo, int errParm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int errAddIntParm           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>errParm</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function adds an integer parameter to an error information structure.
<p>
Parameter substitution is done in much the same way as it is done in C printf statments. The base error message specification that goes along with a particular status code may have variable fields built in using '' modifiers. These would be replaced with actual parameter data.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>errParm</em>&nbsp;</td><td>The typed error parameter. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The status of the operation. </dd></dl>

</div>
</div><p>
<a class="anchor" name="gd305421fe8880a00717c286b16c7a755"></a><!-- doxytag: member="ooasn1.h::errAddStrParm" ref="gd305421fe8880a00717c286b16c7a755" args="(ASN1ErrInfo *pErrInfo, const char *errprm_p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int errAddStrParm           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>errprm_p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function adds an string parameter to an error information structure.
<p>
Parameter substitution is done in much the same way as it is done in C printf statments. The base error message specification that goes along with a particular status code may have variable fields built in using '' modifiers. These would be replaced with actual parameter data.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>errprm_p</em>&nbsp;</td><td>The typed error parameter. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The status of the operation. </dd></dl>

</div>
</div><p>
<a class="anchor" name="g69d2110465fa515ab99326783a86fd6f"></a><!-- doxytag: member="ooasn1.h::errAddUIntParm" ref="g69d2110465fa515ab99326783a86fd6f" args="(ASN1ErrInfo *pErrInfo, unsigned int errParm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int errAddUIntParm           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>errParm</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function adds an unsigned integer parameter to an error information structure.
<p>
Parameter substitution is done in much the same way as it is done in C printf statments. The base error message specification that goes along with a particular status code may have variable fields built in using '' modifiers. These would be replaced with actual parameter data.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>errParm</em>&nbsp;</td><td>The typed error parameter. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The status of the operation. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ga12aa5d6dc904fa3f7868138401e3f77"></a><!-- doxytag: member="ooasn1.h::errFreeParms" ref="ga12aa5d6dc904fa3f7868138401e3f77" args="(ASN1ErrInfo *pErrInfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN void errFreeParms           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function frees memory associated with the storage of parameters associated with an error message.
<p>
These parameters are maintained on an internal linked list maintained within the error information structure. The list memory must be freed when error processing is complete. This function is called from within errPrint after teh error has been printed out. It is also called in teh freeContext function.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="g5aa45a513a753ffb3b78d693d3ffa302"></a><!-- doxytag: member="ooasn1.h::errGetText" ref="g5aa45a513a753ffb3b78d693d3ffa302" args="(OOCTXT *pctxt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN char* errGetText           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOOCTXT.shtml">OOCTXT</a> *&nbsp;</td>
          <td class="paramname"> <em>pctxt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the text of the error.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pctxt</em>&nbsp;</td><td>A pointer to a context structure. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="g0dca07c145628636d01da14067c0bc9b"></a><!-- doxytag: member="ooasn1.h::errPrint" ref="g0dca07c145628636d01da14067c0bc9b" args="(ASN1ErrInfo *pErrInfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN void errPrint           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function prints error information to the standard output device.
<p>
The error information is stored in a structure of type <a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a>. A structure of the this type is part f the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. This is where error information is stored within the ASN1C generated and low-level encode/decode functions.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="gf4ebc9c5985418c58d621246a7e2447d"></a><!-- doxytag: member="ooasn1.h::errReset" ref="gf4ebc9c5985418c58d621246a7e2447d" args="(ASN1ErrInfo *pErrInfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int errReset           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function resets the error information in the error information sturcture.
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="g7d5ae7d3d41200b5540b124ee5cafdda"></a><!-- doxytag: member="ooasn1.h::errSetData" ref="g7d5ae7d3d41200b5540b124ee5cafdda" args="(ASN1ErrInfo *pErrInfo, int status, const char *module, int lno)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EXTERN int errSetData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structASN1ErrInfo.shtml">ASN1ErrInfo</a> *&nbsp;</td>
          <td class="paramname"> <em>pErrInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>module</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>lno</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets error information in an error information structure.
<p>
The information set includes status code, module name, and line number. Location information (i.e. module name and line number) is pushed onto a stack within the error information structure to provide a complete stack trace when the information is printed out.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pErrInfo</em>&nbsp;</td><td>A pointer to a structure containing information on the error to be printed. Typically, the error info structure referred to is the one inside the <a class="el" href="structOOCTXT.shtml">OOCTXT</a> structure. (i.e. &amp;pctxt-&gt;errInfo). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td>The error status code. This is one of the negative error status codes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>module</em>&nbsp;</td><td>The name of the module (C or C++ source file) in which the module occurred. This is typically obtained by using the _FILE_ macro. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lno</em>&nbsp;</td><td>The line number at which the error occurred. This is typically obtained by using the _LINE_ macro. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The status value passed to the operation in the third argument. This makes it possible to set the error information and return the status value in one line of code. </dd></dl>

</div>
</div><p>
<!--END DOXYGEN -->

</td></tr></table>
<HR WIDTH="80%" COLOR="#080A9A">
  <CENTER><FONT FACE="Arial" SIZE="-2">This file was last modified on
    28 Jul 2010.<BR> Objective Open H.323 Stack, 0.9.1 </FONT></CENTER></td>
</tr> </table></center></BODY>
</HTML>
